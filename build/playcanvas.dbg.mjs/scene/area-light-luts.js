/**
 * @license
 * PlayCanvas Engine v1.59.0-preview revision 797466563 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { FloatPacking } from '../core/math/float-packing.js';
import { Texture } from '../platform/graphics/texture.js';
import { DeviceCache } from '../platform/graphics/device-cache.js';
import { ADDRESS_CLAMP_TO_EDGE, TEXTURETYPE_DEFAULT, FILTER_LINEAR, FILTER_NEAREST, PIXELFORMAT_RGBA32F, PIXELFORMAT_RGBA16F } from '../platform/graphics/constants.js';

class AreaLightCacheEntry {
  constructor(texture0, texture1) {
    this.texture0 = texture0;
    this.texture1 = texture1;
  }
  destroy() {
    var _this$texture, _this$texture2;
    (_this$texture = this.texture0) == null ? void 0 : _this$texture.destroy();
    (_this$texture2 = this.texture1) == null ? void 0 : _this$texture2.destroy();
  }
}

const deviceCache = new DeviceCache();

class AreaLightLuts {
  static createTexture(device, format, size, postfix = '') {
    const tex = new Texture(device, {
      width: size,
      height: size,
      format: format,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      type: TEXTURETYPE_DEFAULT,
      magFilter: FILTER_LINEAR,
      minFilter: FILTER_NEAREST,
      anisotropy: 1,
      name: `AreaLightLUT${postfix}`
    });
    return tex;
  }
  static applyTextures(device, texture1, texture2) {
    deviceCache.remove(device);

    deviceCache.get(device, () => {
      return new AreaLightCacheEntry(texture1, texture1 === texture2 ? null : texture2);
    });

    device.scope.resolve('areaLightsLutTex1').setValue(texture1);
    device.scope.resolve('areaLightsLutTex2').setValue(texture2);
  }

  static createPlaceholder(device) {
    const texture = AreaLightLuts.createTexture(device, device.areaLightLutFormat, 2, 'placeholder');
    const pixels = texture.lock();
    pixels.fill(0);
    texture.unlock();
    AreaLightLuts.applyTextures(device, texture, texture);
  }

  static set(device, ltcMat1, ltcMat2) {
    function buildTexture(device, data, format) {
      const texture = AreaLightLuts.createTexture(device, format, 64);
      texture.lock().set(data);
      texture.unlock();
      return texture;
    }
    function offsetScale(data, offset, scale) {
      const count = data.length;
      const ret = new Float32Array(count);
      for (let i = 0; i < count; i++) {
        const n = i % 4;
        ret[i] = (data[i] + offset[n]) * scale[n];
      }
      return ret;
    }
    function convertToHalfFloat(data) {
      const count = data.length;
      const ret = new Uint16Array(count);
      const float2Half = FloatPacking.float2Half;
      for (let i = 0; i < count; i++) {
        ret[i] = float2Half(data[i]);
      }
      return ret;
    }
    function convertToUint(data) {
      const count = data.length;
      const ret = new Uint8ClampedArray(count);
      for (let i = 0; i < count; i++) {
        ret[i] = data[i] * 255;
      }
      return ret;
    }
    const srcData1 = ltcMat1;
    const srcData2 = ltcMat2;

    let data1, data2;
    const format = device.areaLightLutFormat;
    if (format === PIXELFORMAT_RGBA32F) {
      data1 = srcData1;
      data2 = srcData2;
    } else if (format === PIXELFORMAT_RGBA16F) {
      data1 = convertToHalfFloat(srcData1);
      data2 = convertToHalfFloat(srcData2);
    } else {
      const o1 = [0.0, 0.2976, 0.01381, 0.0];
      const s1 = [0.999, 3.08737, 1.6546, 0.603249];
      const o2 = [-0.306897, 0.0, 0.0, 0.0];
      const s2 = [1.442787, 1.0, 1.0, 1.0];
      data1 = convertToUint(offsetScale(srcData1, o1, s1));
      data2 = convertToUint(offsetScale(srcData2, o2, s2));
    }

    const tex1 = buildTexture(device, data1, format);
    const tex2 = buildTexture(device, data2, format);

    AreaLightLuts.applyTextures(device, tex1, tex2);
  }
}

export { AreaLightLuts };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS1saWdodC1sdXRzLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NlbmUvYXJlYS1saWdodC1sdXRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsb2F0UGFja2luZyB9IGZyb20gJy4uL2NvcmUvbWF0aC9mbG9hdC1wYWNraW5nLmpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi9wbGF0Zm9ybS9ncmFwaGljcy90ZXh0dXJlLmpzJztcbmltcG9ydCB7IERldmljZUNhY2hlIH0gZnJvbSAnLi4vcGxhdGZvcm0vZ3JhcGhpY3MvZGV2aWNlLWNhY2hlLmpzJztcblxuaW1wb3J0IHtcbiAgICBBRERSRVNTX0NMQU1QX1RPX0VER0UsXG4gICAgRklMVEVSX0xJTkVBUiwgRklMVEVSX05FQVJFU1QsXG4gICAgUElYRUxGT1JNQVRfUkdCQTE2RiwgUElYRUxGT1JNQVRfUkdCQTMyRixcbiAgICBURVhUVVJFVFlQRV9ERUZBVUxUXG59IGZyb20gJy4uL3BsYXRmb3JtL2dyYXBoaWNzL2NvbnN0YW50cy5qcyc7XG5cbi8vIGNsYXNzIHVzZWQgdG8gaG9sZCBMVVQgdGV4dHVyZXMgaW4gdGhlIGRldmljZSBjYWNoZVxuY2xhc3MgQXJlYUxpZ2h0Q2FjaGVFbnRyeSB7XG4gICAgY29uc3RydWN0b3IodGV4dHVyZTAsIHRleHR1cmUxKSB7XG4gICAgICAgIHRoaXMudGV4dHVyZTAgPSB0ZXh0dXJlMDtcbiAgICAgICAgdGhpcy50ZXh0dXJlMSA9IHRleHR1cmUxO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudGV4dHVyZTA/LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy50ZXh0dXJlMT8uZGVzdHJveSgpO1xuICAgIH1cbn1cblxuLy8gZGV2aWNlIGNhY2hlIHN0b3JpbmcgTFVUIHRleHR1cmVzLCB0YWtpbmcgY2FyZSBvZiB0aGVpciByZW1vdmFsIHdoZW4gdGhlIGRldmljZSBpcyBkZXN0cm95ZWRcbmNvbnN0IGRldmljZUNhY2hlID0gbmV3IERldmljZUNhY2hlKCk7XG5cbi8vIHN0YXRpYyBjbGFzcyBtYW5hZ2luZyBMVVQgdGFibGVzIGZvciB0aGUgYXJlYSBsaWdodHNcbmNsYXNzIEFyZWFMaWdodEx1dHMge1xuICAgIHN0YXRpYyBjcmVhdGVUZXh0dXJlKGRldmljZSwgZm9ybWF0LCBzaXplLCBwb3N0Zml4ID0gJycpIHtcbiAgICAgICAgY29uc3QgdGV4ID0gbmV3IFRleHR1cmUoZGV2aWNlLCB7XG4gICAgICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgICAgIGZvcm1hdDogZm9ybWF0LFxuICAgICAgICAgICAgYWRkcmVzc1U6IEFERFJFU1NfQ0xBTVBfVE9fRURHRSxcbiAgICAgICAgICAgIGFkZHJlc3NWOiBBRERSRVNTX0NMQU1QX1RPX0VER0UsXG4gICAgICAgICAgICB0eXBlOiBURVhUVVJFVFlQRV9ERUZBVUxULFxuICAgICAgICAgICAgbWFnRmlsdGVyOiBGSUxURVJfTElORUFSLFxuICAgICAgICAgICAgbWluRmlsdGVyOiBGSUxURVJfTkVBUkVTVCxcbiAgICAgICAgICAgIGFuaXNvdHJvcHk6IDEsXG4gICAgICAgICAgICBuYW1lOiBgQXJlYUxpZ2h0TFVUJHtwb3N0Zml4fWBcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0ZXg7XG4gICAgfVxuXG4gICAgc3RhdGljIGFwcGx5VGV4dHVyZXMoZGV2aWNlLCB0ZXh0dXJlMSwgdGV4dHVyZTIpIHtcbiAgICAgICAgLy8gcmVtb3ZlIHByZXZpb3VzIHRleHR1cmVzIGZyb20gY2FjaGVcbiAgICAgICAgZGV2aWNlQ2FjaGUucmVtb3ZlKGRldmljZSk7XG5cbiAgICAgICAgLy8gYWRkIG5ldyB0ZXh0dXJlcyB0byBjYWNoZVxuICAgICAgICBkZXZpY2VDYWNoZS5nZXQoZGV2aWNlLCAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFyZWFMaWdodENhY2hlRW50cnkodGV4dHVyZTEsIHRleHR1cmUxID09PSB0ZXh0dXJlMiA/IG51bGwgOiB0ZXh0dXJlMik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHNldCB0aGVtIGFzIHVuaWZvcm1zXG4gICAgICAgIGRldmljZS5zY29wZS5yZXNvbHZlKCdhcmVhTGlnaHRzTHV0VGV4MScpLnNldFZhbHVlKHRleHR1cmUxKTtcbiAgICAgICAgZGV2aWNlLnNjb3BlLnJlc29sdmUoJ2FyZWFMaWdodHNMdXRUZXgyJykuc2V0VmFsdWUodGV4dHVyZTIpO1xuICAgIH1cblxuICAgIC8vIHBsYWNlaG9sZGVyIExVVCB0ZXh0dXJlcyBmb3IgYXJlYSBsaWdodFxuICAgIHN0YXRpYyBjcmVhdGVQbGFjZWhvbGRlcihkZXZpY2UpIHtcbiAgICAgICAgY29uc3QgdGV4dHVyZSA9IEFyZWFMaWdodEx1dHMuY3JlYXRlVGV4dHVyZShkZXZpY2UsIGRldmljZS5hcmVhTGlnaHRMdXRGb3JtYXQsIDIsICdwbGFjZWhvbGRlcicpO1xuXG4gICAgICAgIGNvbnN0IHBpeGVscyA9IHRleHR1cmUubG9jaygpO1xuICAgICAgICBwaXhlbHMuZmlsbCgwKTtcbiAgICAgICAgdGV4dHVyZS51bmxvY2soKTtcblxuICAgICAgICBBcmVhTGlnaHRMdXRzLmFwcGx5VGV4dHVyZXMoZGV2aWNlLCB0ZXh0dXJlLCB0ZXh0dXJlKTtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGVzIExVVCB0ZXh0dXJlIHVzZWQgYnkgYXJlYSBsaWdodHNcbiAgICBzdGF0aWMgc2V0KGRldmljZSwgbHRjTWF0MSwgbHRjTWF0Mikge1xuXG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkVGV4dHVyZShkZXZpY2UsIGRhdGEsIGZvcm1hdCkge1xuICAgICAgICAgICAgY29uc3QgdGV4dHVyZSA9IEFyZWFMaWdodEx1dHMuY3JlYXRlVGV4dHVyZShkZXZpY2UsIGZvcm1hdCwgNjQpO1xuXG4gICAgICAgICAgICB0ZXh0dXJlLmxvY2soKS5zZXQoZGF0YSk7XG4gICAgICAgICAgICB0ZXh0dXJlLnVubG9jaygpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9mZnNldFNjYWxlKGRhdGEsIG9mZnNldCwgc2NhbGUpIHtcblxuICAgICAgICAgICAgY29uc3QgY291bnQgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IG5ldyBGbG9hdDMyQXJyYXkoY291bnQpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkgJSA0O1xuICAgICAgICAgICAgICAgIHJldFtpXSA9IChkYXRhW2ldICsgb2Zmc2V0W25dKSAqIHNjYWxlW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRUb0hhbGZGbG9hdChkYXRhKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCByZXQgPSBuZXcgVWludDE2QXJyYXkoY291bnQpO1xuICAgICAgICAgICAgY29uc3QgZmxvYXQySGFsZiA9IEZsb2F0UGFja2luZy5mbG9hdDJIYWxmO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmV0W2ldID0gZmxvYXQySGFsZihkYXRhW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRUb1VpbnQoZGF0YSkge1xuXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgcmV0ID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGNvdW50KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHJldFtpXSA9IGRhdGFbaV0gKiAyNTU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzcmNEYXRhMSA9IGx0Y01hdDE7XG4gICAgICAgIGNvbnN0IHNyY0RhdGEyID0gbHRjTWF0MjtcblxuICAgICAgICAvLyBwaWNrIGZvcm1hdCBmb3IgbHV0IHRleHR1cmVcbiAgICAgICAgbGV0IGRhdGExLCBkYXRhMjtcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gZGV2aWNlLmFyZWFMaWdodEx1dEZvcm1hdDtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gUElYRUxGT1JNQVRfUkdCQTMyRikge1xuXG4gICAgICAgICAgICAvLyBmbG9hdFxuICAgICAgICAgICAgZGF0YTEgPSBzcmNEYXRhMTtcbiAgICAgICAgICAgIGRhdGEyID0gc3JjRGF0YTI7XG5cbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IFBJWEVMRk9STUFUX1JHQkExNkYpIHtcblxuICAgICAgICAgICAgLy8gaGFsZiBmbG9hdFxuICAgICAgICAgICAgZGF0YTEgPSBjb252ZXJ0VG9IYWxmRmxvYXQoc3JjRGF0YTEpO1xuICAgICAgICAgICAgZGF0YTIgPSBjb252ZXJ0VG9IYWxmRmxvYXQoc3JjRGF0YTIpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIC8vIGxvdyBwcmVjaXNpb24gZm9ybWF0XG4gICAgICAgICAgICAvLyBvZmZzZXQgYW5kIHNjYWxlIHRvIGF2b2lkIGNsaXBwaW5nIGFuZCBpbmNyZWFzZSBwcmVjaXNpb24gLSB0aGlzIGlzIHVuZG9uZSBpbiB0aGUgc2hhZGVyXG4gICAgICAgICAgICBjb25zdCBvMSA9IFswLjAsIDAuMjk3NiwgMC4wMTM4MSwgMC4wXTtcbiAgICAgICAgICAgIGNvbnN0IHMxID0gWzAuOTk5LCAzLjA4NzM3LCAxLjY1NDYsIDAuNjAzMjQ5XTtcblxuICAgICAgICAgICAgY29uc3QgbzIgPSBbLTAuMzA2ODk3LCAwLjAsIDAuMCwgMC4wXTtcbiAgICAgICAgICAgIGNvbnN0IHMyID0gWzEuNDQyNzg3LCAxLjAsIDEuMCwgMS4wXTtcblxuICAgICAgICAgICAgZGF0YTEgPSBjb252ZXJ0VG9VaW50KG9mZnNldFNjYWxlKHNyY0RhdGExLCBvMSwgczEpKTtcbiAgICAgICAgICAgIGRhdGEyID0gY29udmVydFRvVWludChvZmZzZXRTY2FsZShzcmNEYXRhMiwgbzIsIHMyKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjcmVhdGUgbHV0IHRleHR1cmVzXG4gICAgICAgIGNvbnN0IHRleDEgPSBidWlsZFRleHR1cmUoZGV2aWNlLCBkYXRhMSwgZm9ybWF0KTtcbiAgICAgICAgY29uc3QgdGV4MiA9IGJ1aWxkVGV4dHVyZShkZXZpY2UsIGRhdGEyLCBmb3JtYXQpO1xuXG4gICAgICAgIC8vIGFzc2lnbiB0byB1bmlmb3Jtc1xuICAgICAgICBBcmVhTGlnaHRMdXRzLmFwcGx5VGV4dHVyZXMoZGV2aWNlLCB0ZXgxLCB0ZXgyKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEFyZWFMaWdodEx1dHMgfTtcbiJdLCJuYW1lcyI6WyJBcmVhTGlnaHRDYWNoZUVudHJ5IiwiY29uc3RydWN0b3IiLCJ0ZXh0dXJlMCIsInRleHR1cmUxIiwiZGVzdHJveSIsImRldmljZUNhY2hlIiwiRGV2aWNlQ2FjaGUiLCJBcmVhTGlnaHRMdXRzIiwiY3JlYXRlVGV4dHVyZSIsImRldmljZSIsImZvcm1hdCIsInNpemUiLCJwb3N0Zml4IiwidGV4IiwiVGV4dHVyZSIsIndpZHRoIiwiaGVpZ2h0IiwiYWRkcmVzc1UiLCJBRERSRVNTX0NMQU1QX1RPX0VER0UiLCJhZGRyZXNzViIsInR5cGUiLCJURVhUVVJFVFlQRV9ERUZBVUxUIiwibWFnRmlsdGVyIiwiRklMVEVSX0xJTkVBUiIsIm1pbkZpbHRlciIsIkZJTFRFUl9ORUFSRVNUIiwiYW5pc290cm9weSIsIm5hbWUiLCJhcHBseVRleHR1cmVzIiwidGV4dHVyZTIiLCJyZW1vdmUiLCJnZXQiLCJzY29wZSIsInJlc29sdmUiLCJzZXRWYWx1ZSIsImNyZWF0ZVBsYWNlaG9sZGVyIiwidGV4dHVyZSIsImFyZWFMaWdodEx1dEZvcm1hdCIsInBpeGVscyIsImxvY2siLCJmaWxsIiwidW5sb2NrIiwic2V0IiwibHRjTWF0MSIsImx0Y01hdDIiLCJidWlsZFRleHR1cmUiLCJkYXRhIiwib2Zmc2V0U2NhbGUiLCJvZmZzZXQiLCJzY2FsZSIsImNvdW50IiwibGVuZ3RoIiwicmV0IiwiRmxvYXQzMkFycmF5IiwiaSIsIm4iLCJjb252ZXJ0VG9IYWxmRmxvYXQiLCJVaW50MTZBcnJheSIsImZsb2F0MkhhbGYiLCJGbG9hdFBhY2tpbmciLCJjb252ZXJ0VG9VaW50IiwiVWludDhDbGFtcGVkQXJyYXkiLCJzcmNEYXRhMSIsInNyY0RhdGEyIiwiZGF0YTEiLCJkYXRhMiIsIlBJWEVMRk9STUFUX1JHQkEzMkYiLCJQSVhFTEZPUk1BVF9SR0JBMTZGIiwibzEiLCJzMSIsIm8yIiwiczIiLCJ0ZXgxIiwidGV4MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVlBLE1BQU1BLG1CQUFtQixDQUFDO0FBQ3RCQyxFQUFBQSxXQUFXLENBQUNDLFFBQVEsRUFBRUMsUUFBUSxFQUFFO0lBQzVCLElBQUksQ0FBQ0QsUUFBUSxHQUFHQSxRQUFRLENBQUE7SUFDeEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBLFFBQVEsQ0FBQTtBQUM1QixHQUFBO0FBRUFDLEVBQUFBLE9BQU8sR0FBRztBQUFBLElBQUEsSUFBQSxhQUFBLEVBQUEsY0FBQSxDQUFBO0FBQ04sSUFBQSxDQUFBLGFBQUEsR0FBQSxJQUFJLENBQUNGLFFBQVEsS0FBYixJQUFBLEdBQUEsS0FBQSxDQUFBLEdBQUEsYUFBQSxDQUFlRSxPQUFPLEVBQUUsQ0FBQTtBQUN4QixJQUFBLENBQUEsY0FBQSxHQUFBLElBQUksQ0FBQ0QsUUFBUSxLQUFiLElBQUEsR0FBQSxLQUFBLENBQUEsR0FBQSxj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
