/**
 * @license
 * PlayCanvas Engine v1.62.0-dev revision 7d088032c (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { TRACEID_RENDER_PASS, TRACEID_RENDER_PASS_DETAIL } from '../core/constants.js';
import { Debug } from '../core/debug.js';
import { Tracing } from '../core/tracing.js';
import { DEVICETYPE_WEBGPU } from '../platform/graphics/constants.js';

/**
 * A frame graph represents a single rendering frame as a sequence of render passes.
 *
 * @ignore
 */
class FrameGraph {
  constructor() {
    this.renderPasses = [];
    this.renderTargetMap = new Map();
  }
  /**
   * Add a render pass to the frame.
   *
   * @param {import('../platform/graphics/render-pass.js').RenderPass} renderPass - The render
   * pass to add.
   */
  addRenderPass(renderPass) {
    this.renderPasses.push(renderPass);
  }
  reset() {
    this.renderPasses.length = 0;
  }
  compile() {
    const renderTargetMap = this.renderTargetMap;
    const renderPasses = this.renderPasses;
    for (let i = 0; i < renderPasses.length; i++) {
      const renderPass = renderPasses[i];
      const renderTarget = renderPass.renderTarget;

      // if using a target, or null which represents the default framebuffer
      if (renderTarget !== undefined) {
        // previous pass using the same render target
        const prevPass = renderTargetMap.get(renderTarget);
        if (prevPass) {
          // if we use the RT without clearing, make sure the previous pass stores data
          if (!renderPass.colorOps.clear) {
            prevPass.colorOps.store = true;
          }
          if (!renderPass.depthStencilOps.clearDepth) {
            prevPass.depthStencilOps.storeDepth = true;
          }
          if (!renderPass.depthStencilOps.clearStencil) {
            prevPass.depthStencilOps.storeStencil = true;
          }
        }

        // add the pass to the map
        renderTargetMap.set(renderTarget, renderPass);
      }
    }

    // Walk over render passes to find passes rendering to the same cubemap texture.
    // If those passes are separated only by passes not requiring cubemap (shadows ..),
    // we skip the mipmap generation till the last rendering to the cubemap, to avoid
    // mipmaps being generated after each face.
    /** @type {import('../platform/graphics/texture.js').Texture} */
    let lastCubeTexture = null;
    /** @type {import('../platform/graphics/render-pass.js').RenderPass} */
    let lastCubeRenderPass = null;
    for (let i = 0; i < renderPasses.length; i++) {
      const renderPass = renderPasses[i];
      const renderTarget = renderPass.renderTarget;
      const thisTexture = renderTarget == null ? void 0 : renderTarget.colorBuffer;
      if (thisTexture != null && thisTexture.cubemap) {
        // if previous pass used the same cubemap texture, it does not need mipmaps generated
        if (lastCubeTexture === thisTexture) {
          lastCubeRenderPass.colorOps.mipmaps = false;
        }
        lastCubeTexture = renderTarget.colorBuffer;
        lastCubeRenderPass = renderPass;
      } else if (renderPass.requiresCubemaps) {
        // if the cubemap is required, break the cubemap rendering chain
        lastCubeTexture = null;
        lastCubeRenderPass = null;
      }
    }

    // handle what's left in the map - last passes rendering to each render target
    renderTargetMap.forEach((renderPass, renderTarget) => {
      // default framebuffer
      if (renderTarget === null) {
        // store the multisampled buffer
        renderPass.colorOps.store = true;

        // no resolve, no mipmaps
        renderPass.colorOps.resolve = false;
        renderPass.colorOps.mipmaps = false;
      }
    });
    renderTargetMap.clear();
  }
  render(device) {
    this.compile();
    const renderPasses = this.renderPasses;
    for (let i = 0; i < renderPasses.length; i++) {
      renderPasses[i].render();
    }
    this.log(device);
  }
  log(device) {
    if (Tracing.get(TRACEID_RENDER_PASS) || Tracing.get(TRACEID_RENDER_PASS_DETAIL)) {
      this.renderPasses.forEach((renderPass, index) => {
        var _rt$colorBuffer, _rt, _rt2, _rt3, _rt4;
        let rt = renderPass.renderTarget;
        if (rt === null && device.deviceType === DEVICETYPE_WEBGPU) {
          rt = device.frameBuffer;
        }
        const hasColor = (_rt$colorBuffer = (_rt = rt) == null ? void 0 : _rt.colorBuffer) != null ? _rt$colorBuffer : (_rt2 = rt) == null ? void 0 : _rt2.impl.assignedColorTexture;
        const hasDepth = (_rt3 = rt) == null ? void 0 : _rt3.depth;
        const hasStencil = (_rt4 = rt) == null ? void 0 : _rt4.stencil;
        const rtInfo = rt === undefined ? '' : ` RT: ${rt ? rt.name : 'NULL'} ` + `${hasColor ? '[Color]' : ''}` + `${hasDepth ? '[Depth]' : ''}` + `${hasStencil ? '[Stencil]' : ''}` + `${renderPass.samples > 0 ? ' samples: ' + renderPass.samples : ''}`;
        Debug.trace(TRACEID_RENDER_PASS, `${index.toString().padEnd(2, ' ')}: ${renderPass.name.padEnd(20, ' ')}` + rtInfo.padEnd(30));
        if (renderPass.colorOps && hasColor) {
          Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    colorOps: ` + `${renderPass.colorOps.clear ? 'clear' : 'load'}->` + `${renderPass.colorOps.store ? 'store' : 'discard'} ` + `${renderPass.colorOps.resolve ? 'resolve ' : ''}` + `${renderPass.colorOps.mipmaps ? 'mipmaps ' : ''}`);
        }
        if (renderPass.depthStencilOps) {
          if (hasDepth) {
            Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    depthOps: ` + `${renderPass.depthStencilOps.clearDepth ? 'clear' : 'load'}->` + `${renderPass.depthStencilOps.storeDepth ? 'store' : 'discard'}`);
          }
          if (hasStencil) {
            Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    stencOps: ` + `${renderPass.depthStencilOps.clearStencil ? 'clear' : 'load'}->` + `${renderPass.depthStencilOps.storeStencil ? 'store' : 'discard'}`);
          }
        }
      });
    }
  }
}

export { FrameGraph };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
