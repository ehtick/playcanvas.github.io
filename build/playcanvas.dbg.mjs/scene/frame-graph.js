/**
 * @license
 * PlayCanvas Engine v1.57.0 revision f1998a31e (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { TRACEID_RENDER_PASS, TRACEID_RENDER_PASS_DETAIL } from '../core/constants.js';
import { Debug } from '../core/debug.js';
import { Tracing } from '../core/tracing.js';

class FrameGraph {
  constructor() {
    this.renderPasses = [];
    this.renderTargetMap = new Map();
  }

  addRenderPass(renderPass) {
    this.renderPasses.push(renderPass);
  }

  reset() {
    this.renderPasses.length = 0;
  }

  compile() {
    const renderTargetMap = this.renderTargetMap;
    const renderPasses = this.renderPasses;

    for (let i = 0; i < renderPasses.length; i++) {
      const renderPass = renderPasses[i];
      const renderTarget = renderPass.renderTarget;

      if (renderTarget !== undefined) {
        const prevPass = renderTargetMap.get(renderTarget);

        if (prevPass) {
          if (!renderPass.colorOps.clear) {
            prevPass.colorOps.store = true;
          }

          if (!renderPass.depthStencilOps.clearDepth) {
            prevPass.depthStencilOps.storeDepth = true;
          }

          if (!renderPass.depthStencilOps.clearStencil) {
            prevPass.depthStencilOps.storeStencil = true;
          }
        }

        renderTargetMap.set(renderTarget, renderPass);
      }
    }

    let lastCubeTexture = null;
    let lastCubeRenderPass = null;

    for (let i = 0; i < renderPasses.length; i++) {
      const renderPass = renderPasses[i];
      const renderTarget = renderPass.renderTarget;
      const thisTexture = renderTarget == null ? void 0 : renderTarget.colorBuffer;

      if (thisTexture != null && thisTexture.cubemap) {
        if (lastCubeTexture === thisTexture) {
          lastCubeRenderPass.colorOps.mipmaps = false;
        }

        lastCubeTexture = renderTarget.colorBuffer;
        lastCubeRenderPass = renderPass;
      } else if (renderPass.requiresCubemaps) {
        lastCubeTexture = null;
        lastCubeRenderPass = null;
      }
    }

    renderTargetMap.forEach((renderPass, renderTarget) => {
      if (renderTarget === null) {
        renderPass.colorOps.store = true;
        renderPass.colorOps.resolve = false;
        renderPass.colorOps.mipmaps = false;
      }
    });
    renderTargetMap.clear();
    this.log();
  }

  render() {
    this.compile();
    const renderPasses = this.renderPasses;

    for (let i = 0; i < renderPasses.length; i++) {
      renderPasses[i].render();
    }
  }

  log() {
    if (Tracing.get(TRACEID_RENDER_PASS) || Tracing.get(TRACEID_RENDER_PASS_DETAIL)) {
      this.renderPasses.forEach((renderPass, index) => {
        var _renderPass$renderTar, _renderPass$renderTar2, _renderPass$renderTar3;

        const rt = renderPass.renderTarget === undefined ? '' : ` RT: ${renderPass.renderTarget ? renderPass.renderTarget.name : 'NULL'} ` + `${(_renderPass$renderTar = renderPass.renderTarget) != null && _renderPass$renderTar.colorBuffer ? '[Color]' : ''}` + `${(_renderPass$renderTar2 = renderPass.renderTarget) != null && _renderPass$renderTar2.depth ? '[Depth]' : ''}` + `${(_renderPass$renderTar3 = renderPass.renderTarget) != null && _renderPass$renderTar3.stencil ? '[Stencil]' : ''}` + `${renderPass.samples > 0 ? ' samples: ' + renderPass.samples : ''}`;
        Debug.trace(TRACEID_RENDER_PASS, `${index.toString().padEnd(2, ' ')}: ${renderPass.name.padEnd(20, ' ')}` + rt.padEnd(30));

        if (renderPass.colorOps) {
          Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    colorOps: ` + `${renderPass.colorOps.clear ? 'clear' : 'load'}->` + `${renderPass.colorOps.store ? 'store' : 'discard'} ` + `${renderPass.colorOps.resolve ? 'resolve ' : ''}` + `${renderPass.colorOps.mipmaps ? 'mipmaps ' : ''}`);
        }

        if (renderPass.depthStencilOps) {
          Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    depthOps: ` + `${renderPass.depthStencilOps.clearDepth ? 'clear' : 'load'}->` + `${renderPass.depthStencilOps.storeDepth ? 'store' : 'discard'}`);
          Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    stencOps: ` + `${renderPass.depthStencilOps.clearStencil ? 'clear' : 'load'}->` + `${renderPass.depthStencilOps.storeStencil ? 'store' : 'discard'}`);
        }
      });
    }
  }

}

export { FrameGraph };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
