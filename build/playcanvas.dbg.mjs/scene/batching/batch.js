/**
 * @license
 * PlayCanvas Engine v1.62.0-dev revision 7d088032c (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { BoundingBox } from '../../core/shape/bounding-box.js';

/**
 * Holds information about batched mesh instances. Created in {@link BatchManager#create}.
 *
 * @property {import('../mesh-instance.js').MeshInstance[]} origMeshInstances An array of original
 * mesh instances, from which this batch was generated.
 * @property {import('../mesh-instance.js').MeshInstance} meshInstance A single combined mesh
 * instance, the result of batching.
 * @property {boolean} dynamic Whether this batch is dynamic (supports transforming mesh instances
 * at runtime).
 * @property {number} [batchGroupId] Link this batch to a specific batch group. This is done
 * automatically with default batches.
 */
class Batch {
  /**
   * Create a new Batch instance.
   *
   * @param {import('../mesh-instance.js').MeshInstance[]} meshInstances - The mesh instances to
   * be batched.
   * @param {boolean} dynamic - Whether this batch is dynamic (supports transforming mesh
   * instances at runtime).
   * @param {number} batchGroupId - Link this batch to a specific batch group. This is done
   * automatically with default batches.
   */
  constructor(meshInstances, dynamic, batchGroupId) {
    this.origMeshInstances = meshInstances;
    this._aabb = new BoundingBox();
    this.meshInstance = null;
    this.dynamic = dynamic;
    this.batchGroupId = batchGroupId;
  }

  // Removes the batch meshes from all layers and destroys it
  destroy(scene, layers) {
    if (this.meshInstance) {
      this.removeFromLayers(scene, layers);
      this.meshInstance.destroy();
      this.meshInstance = null;
    }
  }
  addToLayers(scene, layers) {
    for (let i = 0; i < layers.length; i++) {
      const layer = scene.layers.getLayerById(layers[i]);
      if (layer) {
        layer.addMeshInstances([this.meshInstance]);
      }
    }
  }
  removeFromLayers(scene, layers) {
    for (let i = 0; i < layers.length; i++) {
      const layer = scene.layers.getLayerById(layers[i]);
      if (layer) {
        layer.removeMeshInstances([this.meshInstance]);
      }
    }
  }

  // Updates bounding box for a batch
  updateBoundingBox() {
    this._aabb.copy(this.origMeshInstances[0].aabb);
    for (let i = 1; i < this.origMeshInstances.length; i++) {
      this._aabb.add(this.origMeshInstances[i].aabb);
    }
    this.meshInstance.aabb = this._aabb;
    this.meshInstance._aabbVer = 0;
  }
}

export { Batch };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2guanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zY2VuZS9iYXRjaGluZy9iYXRjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3VuZGluZ0JveCB9IGZyb20gJy4uLy4uL2NvcmUvc2hhcGUvYm91bmRpbmctYm94LmpzJztcblxuLyoqXG4gKiBIb2xkcyBpbmZvcm1hdGlvbiBhYm91dCBiYXRjaGVkIG1lc2ggaW5zdGFuY2VzLiBDcmVhdGVkIGluIHtAbGluayBCYXRjaE1hbmFnZXIjY3JlYXRlfS5cbiAqXG4gKiBAcHJvcGVydHkge2ltcG9ydCgnLi4vbWVzaC1pbnN0YW5jZS5qcycpLk1lc2hJbnN0YW5jZVtdfSBvcmlnTWVzaEluc3RhbmNlcyBBbiBhcnJheSBvZiBvcmlnaW5hbFxuICogbWVzaCBpbnN0YW5jZXMsIGZyb20gd2hpY2ggdGhpcyBiYXRjaCB3YXMgZ2VuZXJhdGVkLlxuICogQHByb3BlcnR5IHtpbXBvcnQoJy4uL21lc2gtaW5zdGFuY2UuanMnKS5NZXNoSW5zdGFuY2V9IG1lc2hJbnN0YW5jZSBBIHNpbmdsZSBjb21iaW5lZCBtZXNoXG4gKiBpbnN0YW5jZSwgdGhlIHJlc3VsdCBvZiBiYXRjaGluZy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZHluYW1pYyBXaGV0aGVyIHRoaXMgYmF0Y2ggaXMgZHluYW1pYyAoc3VwcG9ydHMgdHJhbnNmb3JtaW5nIG1lc2ggaW5zdGFuY2VzXG4gKiBhdCBydW50aW1lKS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbYmF0Y2hHcm91cElkXSBMaW5rIHRoaXMgYmF0Y2ggdG8gYSBzcGVjaWZpYyBiYXRjaCBncm91cC4gVGhpcyBpcyBkb25lXG4gKiBhdXRvbWF0aWNhbGx5IHdpdGggZGVmYXVsdCBiYXRjaGVzLlxuICovXG5jbGFzcyBCYXRjaCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEJhdGNoIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uL21lc2gtaW5zdGFuY2UuanMnKS5NZXNoSW5zdGFuY2VbXX0gbWVzaEluc3RhbmNlcyAtIFRoZSBtZXNoIGluc3RhbmNlcyB0b1xuICAgICAqIGJlIGJhdGNoZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBkeW5hbWljIC0gV2hldGhlciB0aGlzIGJhdGNoIGlzIGR5bmFtaWMgKHN1cHBvcnRzIHRyYW5zZm9ybWluZyBtZXNoXG4gICAgICogaW5zdGFuY2VzIGF0IHJ1bnRpbWUpLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiYXRjaEdyb3VwSWQgLSBMaW5rIHRoaXMgYmF0Y2ggdG8gYSBzcGVjaWZpYyBiYXRjaCBncm91cC4gVGhpcyBpcyBkb25lXG4gICAgICogYXV0b21hdGljYWxseSB3aXRoIGRlZmF1bHQgYmF0Y2hlcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNoSW5zdGFuY2VzLCBkeW5hbWljLCBiYXRjaEdyb3VwSWQpIHtcbiAgICAgICAgdGhpcy5vcmlnTWVzaEluc3RhbmNlcyA9IG1lc2hJbnN0YW5jZXM7XG4gICAgICAgIHRoaXMuX2FhYmIgPSBuZXcgQm91bmRpbmdCb3goKTtcbiAgICAgICAgdGhpcy5tZXNoSW5zdGFuY2UgPSBudWxsO1xuICAgICAgICB0aGlzLmR5bmFtaWMgPSBkeW5hbWljO1xuICAgICAgICB0aGlzLmJhdGNoR3JvdXBJZCA9IGJhdGNoR3JvdXBJZDtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmVzIHRoZSBiYXRjaCBtZXNoZXMgZnJvbSBhbGwgbGF5ZXJzIGFuZCBkZXN0cm95cyBpdFxuICAgIGRlc3Ryb3koc2NlbmUsIGxheWVycykge1xuICAgICAgICBpZiAodGhpcy5tZXNoSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRnJvbUxheWVycyhzY2VuZSwgbGF5ZXJzKTtcbiAgICAgICAgICAgIHRoaXMubWVzaEluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMubWVzaEluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZFRvTGF5ZXJzKHNjZW5lLCBsYXllcnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gc2NlbmUubGF5ZXJzLmdldExheWVyQnlJZChsYXllcnNbaV0pO1xuICAgICAgICAgICAgaWYgKGxheWVyKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXIuYWRkTWVzaEluc3RhbmNlcyhbdGhpcy5tZXNoSW5zdGFuY2VdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUZyb21MYXllcnMoc2NlbmUsIGxheWVycykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSBzY2VuZS5sYXllcnMuZ2V0TGF5ZXJCeUlkKGxheWVyc1tpXSk7XG4gICAgICAgICAgICBpZiAobGF5ZXIpIHtcbiAgICAgICAgICAgICAgICBsYXllci5yZW1vdmVNZXNoSW5zdGFuY2VzKFt0aGlzLm1lc2hJbnN0YW5jZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlcyBib3VuZGluZyBib3ggZm9yIGEgYmF0Y2hcbiAgICB1cGRhdGVCb3VuZGluZ0JveCgpIHtcbiAgICAgICAgdGhpcy5fYWFiYi5jb3B5KHRoaXMub3JpZ01lc2hJbnN0YW5jZXNbMF0uYWFiYik7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5vcmlnTWVzaEluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fYWFiYi5hZGQodGhpcy5vcmlnTWVzaEluc3RhbmNlc1tpXS5hYWJiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1lc2hJbnN0YW5jZS5hYWJiID0gdGhpcy5fYWFiYjtcbiAgICAgICAgdGhpcy5tZXNoSW5zdGFuY2UuX2FhYmJWZXIgPSAwO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQmF0Y2ggfTtcbiJdLCJuYW1lcyI6WyJCYXRjaCIsImNvbnN0cnVjdG9yIiwibWVzaEluc3RhbmNlcyIsImR5bmFtaWMiLCJiYXRjaEdyb3VwSWQiLCJvcmlnTWVzaEluc3RhbmNlcyIsIl9hYWJiIiwiQm91bmRpbmdCb3giLCJtZXNoSW5zdGFuY2UiLCJkZXN0cm95Iiwic2NlbmUiLCJsYXllcnMiLCJyZW1vdmVGcm9tTGF5ZXJzIiwiYWRkVG9MYXllcnMiLCJpIiwibGVuZ3RoIiwibGF5ZXIiLCJnZXRMYXllckJ5SWQiLCJhZGRNZXNoSW5zdGFuY2VzIiwicmVtb3ZlTWVzaEluc3RhbmNlcyIsInVwZGF0ZUJvdW5kaW5nQm94IiwiY29weSIsImFhYmIiLCJhZGQiLCJfYWFiYlZlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLEtBQUssQ0FBQztBQUNSO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLEVBQUFBLFdBQVcsQ0FBQ0MsYUFBYSxFQUFFQyxPQUFPLEVBQUVDLFlBQVksRUFBRTtJQUM5QyxJQUFJLENBQUNDLGlCQUFpQixHQUFHSCxhQUFhLENBQUE7QUFDdEMsSUFBQSxJQUFJLENBQUNJLEtBQUssR0FBRyxJQUFJQyxXQUFXLEVBQUUsQ0FBQTtJQUM5QixJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUE7SUFDeEIsSUFBSSxDQUFDTCxPQUFPLEdBQUdBLE9BQU8sQ0FBQTtJQUN0QixJQUFJLENBQUNDLFlBQVksR0FBR0EsWUFBWSxDQUFBO0FBQ3BDLEdBQUE7O0FBRUE7QUFDQUssRUFBQUEsT0FBTyxDQUFDQyxLQUFLLEVBQUVDLE1BQU0sRUFBRTtJQUNuQixJQUFJLElBQUksQ0FBQ0gsWUFBWSxFQUFFO0FBQ25CLE1BQUEsSUFBSSxDQUFDSSxnQkFBZ0IsQ0FBQ0YsS0FBSyxFQUFFQyxNQUFNLENBQUMsQ0FBQTtBQUNwQyxNQUFBLElBQUksQ0FBQ0gsWUFBWSxDQUFDQyxPQUFPLEVBQUUsQ0FBQTtNQUMzQixJQUFJLENBQUNELFlBQVksR0FBRyxJQUFJLENBQUE7QUFDNUIsS0FBQTtBQUNKLEdBQUE7QUFFQUssRUFBQUEsV0FBVyxDQUFDSCxLQUFLLEVBQUVDLE1BQU0sRUFBRTtBQUN2QixJQUFBLEtBQUssSUFBSUcsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxNQUFNLENBQUNJLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7QUFDcEMsTUFBQSxNQUFNRSxLQUFLLEdBQUdOLEtBQUssQ0FBQ0MsTUFBTSxDQUFDTSxZQUFZLENBQUNOLE1BQU0sQ0FBQ0csQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNsRCxNQUFBLElBQUlFLEtBQUssRUFBRTtRQUNQQSxLQUFLLENBQUNFLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDVixZQUFZLENBQUMsQ0FBQyxDQUFBO0FBQy9DLE9BQUE7QUFDSixLQUFBO0FBQ0osR0FBQTtBQUVBSSxFQUFBQSxnQkFBZ0IsQ0FBQ0YsS0FBSyxFQUFFQyxNQUFNLEVBQUU7QUFDNUIsSUFBQSxLQUFLLElBQUlHLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0gsTUFBTSxDQUFDSSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0FBQ3BDLE1BQUEsTUFBTUUsS0FBSyxHQUFHTixLQUFLLENBQUNDLE1BQU0sQ0FBQ00sWUFBWSxDQUFDTixNQUFNLENBQUNHLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDbEQsTUFBQSxJQUFJRSxLQUFLLEVBQUU7UUFDUEEsS0FBSyxDQUFDRyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQ1gsWUFBWSxDQUFDLENBQUMsQ0FBQTtBQUNsRCxPQUFBO0FBQ0osS0FBQTtBQUNKLEdBQUE7O0FBRUE7QUFDQVksRUFBQUEsaUJBQWlCLEdBQUc7QUFDaEIsSUFBQSxJQUFJLENBQUNkLEtBQUssQ0FBQ2UsSUFBSSxDQUFDLElBQUksQ0FBQ2hCLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDaUIsSUFBSSxDQUFDLENBQUE7QUFDL0MsSUFBQSxLQUFLLElBQUlSLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNULGlCQUFpQixDQUFDVSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0FBQ3BELE1BQUEsSUFBSSxDQUFDUixLQUFLLENBQUNpQixHQUFHLENBQUMsSUFBSSxDQUFDbEIsaUJBQWlCLENBQUNTLENBQUMsQ0FBQyxDQUFDUSxJQUFJLENBQUMsQ0FBQTtBQUNsRCxLQUFBO0FBQ0EsSUFBQSxJQUFJLENBQUNkLFlBQVksQ0FBQ2MsSUFBSSxHQUFHLElBQUksQ0FBQ2hCLEtBQUssQ0FBQTtBQUNuQyxJQUFBLElBQUksQ0FBQ0UsWUFBWSxDQUFDZ0IsUUFBUSxHQUFHLENBQUMsQ0FBQTtBQUNsQyxHQUFBO0FBQ0o7Ozs7In0=
