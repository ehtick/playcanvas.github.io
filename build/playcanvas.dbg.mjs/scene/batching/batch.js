/**
 * @license
 * PlayCanvas Engine v1.57.0 revision f1998a31e (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { BoundingBox } from '../../shape/bounding-box.js';

class Batch {
  constructor(meshInstances, dynamic, batchGroupId) {
    this.origMeshInstances = meshInstances;
    this._aabb = new BoundingBox();
    this.meshInstance = null;
    this.dynamic = dynamic;
    this.batchGroupId = batchGroupId;
  }

  destroy(scene, layers) {
    if (this.meshInstance) {
      this.removeFromLayers(scene, layers);
      this.meshInstance.destroy();
    }
  }

  addToLayers(scene, layers) {
    for (let i = 0; i < layers.length; i++) {
      const layer = scene.layers.getLayerById(layers[i]);

      if (layer) {
        layer.addMeshInstances([this.meshInstance]);
      }
    }
  }

  removeFromLayers(scene, layers) {
    for (let i = 0; i < layers.length; i++) {
      const layer = scene.layers.getLayerById(layers[i]);

      if (layer) {
        layer.removeMeshInstances([this.meshInstance]);
      }
    }
  }

  updateBoundingBox() {
    this._aabb.copy(this.origMeshInstances[0].aabb);

    for (let i = 1; i < this.origMeshInstances.length; i++) {
      this._aabb.add(this.origMeshInstances[i].aabb);
    }

    this.meshInstance.aabb = this._aabb;
    this.meshInstance._aabbVer = 0;
  }

}

export { Batch };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2guanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zY2VuZS9iYXRjaGluZy9iYXRjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3VuZGluZ0JveCB9IGZyb20gJy4uLy4uL3NoYXBlL2JvdW5kaW5nLWJveC5qcyc7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9tZXNoLWluc3RhbmNlLmpzJykuTWVzaEluc3RhbmNlfSBNZXNoSW5zdGFuY2UgKi9cblxuLyoqXG4gKiBIb2xkcyBpbmZvcm1hdGlvbiBhYm91dCBiYXRjaGVkIG1lc2ggaW5zdGFuY2VzLiBDcmVhdGVkIGluIHtAbGluayBCYXRjaE1hbmFnZXIjY3JlYXRlfS5cbiAqXG4gKiBAcHJvcGVydHkge01lc2hJbnN0YW5jZVtdfSBvcmlnTWVzaEluc3RhbmNlcyBBbiBhcnJheSBvZiBvcmlnaW5hbCBtZXNoIGluc3RhbmNlcywgZnJvbSB3aGljaFxuICogdGhpcyBiYXRjaCB3YXMgZ2VuZXJhdGVkLlxuICogQHByb3BlcnR5IHtNZXNoSW5zdGFuY2V9IG1lc2hJbnN0YW5jZSBBIHNpbmdsZSBjb21iaW5lZCBtZXNoIGluc3RhbmNlLCB0aGUgcmVzdWx0IG9mIGJhdGNoaW5nLlxuICogQHByb3BlcnR5IHtib29sZWFufSBkeW5hbWljIFdoZXRoZXIgdGhpcyBiYXRjaCBpcyBkeW5hbWljIChzdXBwb3J0cyB0cmFuc2Zvcm1pbmcgbWVzaCBpbnN0YW5jZXNcbiAqIGF0IHJ1bnRpbWUpLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtiYXRjaEdyb3VwSWRdIExpbmsgdGhpcyBiYXRjaCB0byBhIHNwZWNpZmljIGJhdGNoIGdyb3VwLiBUaGlzIGlzIGRvbmVcbiAqIGF1dG9tYXRpY2FsbHkgd2l0aCBkZWZhdWx0IGJhdGNoZXMuXG4gKi9cbmNsYXNzIEJhdGNoIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQmF0Y2ggaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge01lc2hJbnN0YW5jZVtdfSBtZXNoSW5zdGFuY2VzIC0gVGhlIG1lc2ggaW5zdGFuY2VzIHRvIGJlIGJhdGNoZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBkeW5hbWljIC0gV2hldGhlciB0aGlzIGJhdGNoIGlzIGR5bmFtaWMgKHN1cHBvcnRzIHRyYW5zZm9ybWluZyBtZXNoIGluc3RhbmNlcyBhdCBydW50aW1lKS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmF0Y2hHcm91cElkIC0gTGluayB0aGlzIGJhdGNoIHRvIGEgc3BlY2lmaWMgYmF0Y2ggZ3JvdXAuIFRoaXMgaXMgZG9uZSBhdXRvbWF0aWNhbGx5IHdpdGggZGVmYXVsdCBiYXRjaGVzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1lc2hJbnN0YW5jZXMsIGR5bmFtaWMsIGJhdGNoR3JvdXBJZCkge1xuICAgICAgICB0aGlzLm9yaWdNZXNoSW5zdGFuY2VzID0gbWVzaEluc3RhbmNlcztcbiAgICAgICAgdGhpcy5fYWFiYiA9IG5ldyBCb3VuZGluZ0JveCgpO1xuICAgICAgICB0aGlzLm1lc2hJbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZHluYW1pYyA9IGR5bmFtaWM7XG4gICAgICAgIHRoaXMuYmF0Y2hHcm91cElkID0gYmF0Y2hHcm91cElkO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZXMgdGhlIGJhdGNoIG1lc2hlcyBmcm9tIGFsbCBsYXllcnMgYW5kIGRlc3Ryb3lzIGl0XG4gICAgZGVzdHJveShzY2VuZSwgbGF5ZXJzKSB7XG4gICAgICAgIGlmICh0aGlzLm1lc2hJbnN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVGcm9tTGF5ZXJzKHNjZW5lLCBsYXllcnMpO1xuICAgICAgICAgICAgdGhpcy5tZXNoSW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkVG9MYXllcnMoc2NlbmUsIGxheWVycykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSBzY2VuZS5sYXllcnMuZ2V0TGF5ZXJCeUlkKGxheWVyc1tpXSk7XG4gICAgICAgICAgICBpZiAobGF5ZXIpIHtcbiAgICAgICAgICAgICAgICBsYXllci5hZGRNZXNoSW5zdGFuY2VzKFt0aGlzLm1lc2hJbnN0YW5jZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlRnJvbUxheWVycyhzY2VuZSwgbGF5ZXJzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IHNjZW5lLmxheWVycy5nZXRMYXllckJ5SWQobGF5ZXJzW2ldKTtcbiAgICAgICAgICAgIGlmIChsYXllcikge1xuICAgICAgICAgICAgICAgIGxheWVyLnJlbW92ZU1lc2hJbnN0YW5jZXMoW3RoaXMubWVzaEluc3RhbmNlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVcGRhdGVzIGJvdW5kaW5nIGJveCBmb3IgYSBiYXRjaFxuICAgIHVwZGF0ZUJvdW5kaW5nQm94KCkge1xuICAgICAgICB0aGlzLl9hYWJiLmNvcHkodGhpcy5vcmlnTWVzaEluc3RhbmNlc1swXS5hYWJiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLm9yaWdNZXNoSW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9hYWJiLmFkZCh0aGlzLm9yaWdNZXNoSW5zdGFuY2VzW2ldLmFhYmIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVzaEluc3RhbmNlLmFhYmIgPSB0aGlzLl9hYWJiO1xuICAgICAgICB0aGlzLm1lc2hJbnN0YW5jZS5fYWFiYlZlciA9IDA7XG4gICAgfVxufVxuXG5leHBvcnQgeyBCYXRjaCB9O1xuIl0sIm5hbWVzIjpbIkJhdGNoIiwiY29uc3RydWN0b3IiLCJtZXNoSW5zdGFuY2VzIiwiZHluYW1pYyIsImJhdGNoR3JvdXBJZCIsIm9yaWdNZXNoSW5zdGFuY2VzIiwiX2FhYmIiLCJCb3VuZGluZ0JveCIsIm1lc2hJbnN0YW5jZSIsImRlc3Ryb3kiLCJzY2VuZSIsImxheWVycyIsInJlbW92ZUZyb21MYXllcnMiLCJhZGRUb0xheWVycyIsImkiLCJsZW5ndGgiLCJsYXllciIsImdldExheWVyQnlJZCIsImFkZE1lc2hJbnN0YW5jZXMiLCJyZW1vdmVNZXNoSW5zdGFuY2VzIiwidXBkYXRlQm91bmRpbmdCb3giLCJjb3B5IiwiYWFiYiIsImFkZCIsIl9hYWJiVmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZUEsTUFBTUEsS0FBTixDQUFZO0FBUVJDLEVBQUFBLFdBQVcsQ0FBQ0MsYUFBRCxFQUFnQkMsT0FBaEIsRUFBeUJDLFlBQXpCLEVBQXVDO0lBQzlDLElBQUtDLENBQUFBLGlCQUFMLEdBQXlCSCxhQUF6QixDQUFBO0FBQ0EsSUFBQSxJQUFBLENBQUtJLEtBQUwsR0FBYSxJQUFJQyxXQUFKLEVBQWIsQ0FBQTtJQUNBLElBQUtDLENBQUFBLFlBQUwsR0FBb0IsSUFBcEIsQ0FBQTtJQUNBLElBQUtMLENBQUFBLE9BQUwsR0FBZUEsT0FBZixDQUFBO0lBQ0EsSUFBS0MsQ0FBQUEsWUFBTCxHQUFvQkEsWUFBcEIsQ0FBQTtBQUNILEdBQUE7O0FBR0RLLEVBQUFBLE9BQU8sQ0FBQ0MsS0FBRCxFQUFRQyxNQUFSLEVBQWdCO0lBQ25CLElBQUksSUFBQSxDQUFLSCxZQUFULEVBQXVCO0FBQ25CLE1BQUEsSUFBQSxDQUFLSSxnQkFBTCxDQUFzQkYsS0FBdEIsRUFBNkJDLE1BQTdCLENBQUEsQ0FBQTtNQUNBLElBQUtILENBQUFBLFlBQUwsQ0FBa0JDLE9BQWxCLEVBQUEsQ0FBQTtBQUNILEtBQUE7QUFDSixHQUFBOztBQUVESSxFQUFBQSxXQUFXLENBQUNILEtBQUQsRUFBUUMsTUFBUixFQUFnQjtBQUN2QixJQUFBLEtBQUssSUFBSUcsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0gsTUFBTSxDQUFDSSxNQUEzQixFQUFtQ0QsQ0FBQyxFQUFwQyxFQUF3QztBQUNwQyxNQUFBLE1BQU1FLEtBQUssR0FBR04sS0FBSyxDQUFDQyxNQUFOLENBQWFNLFlBQWIsQ0FBMEJOLE1BQU0sQ0FBQ0csQ0FBRCxDQUFoQyxDQUFkLENBQUE7O0FBQ0EsTUFBQSxJQUFJRSxLQUFKLEVBQVc7QUFDUEEsUUFBQUEsS0FBSyxDQUFDRSxnQkFBTixDQUF1QixDQUFDLElBQUEsQ0FBS1YsWUFBTixDQUF2QixDQUFBLENBQUE7QUFDSCxPQUFBO0FBQ0osS0FBQTtBQUNKLEdBQUE7O0FBRURJLEVBQUFBLGdCQUFnQixDQUFDRixLQUFELEVBQVFDLE1BQVIsRUFBZ0I7QUFDNUIsSUFBQSxLQUFLLElBQUlHLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdILE1BQU0sQ0FBQ0ksTUFBM0IsRUFBbUNELENBQUMsRUFBcEMsRUFBd0M7QUFDcEMsTUFBQSxNQUFNRSxLQUFLLEdBQUdOLEtBQUssQ0FBQ0MsTUFBTixDQUFhTSxZQUFiLENBQTBCTixNQUFNLENBQUNHLENBQUQsQ0FBaEMsQ0FBZCxDQUFBOztBQUNBLE1BQUEsSUFBSUUsS0FBSixFQUFXO0FBQ1BBLFFBQUFBLEtBQUssQ0FBQ0csbUJBQU4sQ0FBMEIsQ0FBQyxJQUFBLENBQUtYLFlBQU4sQ0FBMUIsQ0FBQSxDQUFBO0FBQ0gsT0FBQTtBQUNKLEtBQUE7QUFDSixHQUFBOztBQUdEWSxFQUFBQSxpQkFBaUIsR0FBRztJQUNoQixJQUFLZCxDQUFBQSxLQUFMLENBQVdlLElBQVgsQ0FBZ0IsS0FBS2hCLGlCQUFMLENBQXVCLENBQXZCLENBQUEsQ0FBMEJpQixJQUExQyxDQUFBLENBQUE7O0FBQ0EsSUFBQSxLQUFLLElBQUlSLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsSUFBS1QsQ0FBQUEsaUJBQUwsQ0FBdUJVLE1BQTNDLEVBQW1ERCxDQUFDLEVBQXBELEVBQXdEO01BQ3BELElBQUtSLENBQUFBLEtBQUwsQ0FBV2lCLEdBQVgsQ0FBZSxLQUFLbEIsaUJBQUwsQ0FBdUJTLENBQXZCLENBQUEsQ0FBMEJRLElBQXpDLENBQUEsQ0FBQTtBQUNILEtBQUE7O0FBQ0QsSUFBQSxJQUFBLENBQUtkLFlBQUwsQ0FBa0JjLElBQWxCLEdBQXlCLEtBQUtoQixLQUE5QixDQUFBO0FBQ0EsSUFBQSxJQUFBLENBQUtFLFlBQUwsQ0FBa0JnQixRQUFsQixHQUE2QixDQUE3QixDQUFBO0FBQ0gsR0FBQTs7QUFsRE87Ozs7In0=
