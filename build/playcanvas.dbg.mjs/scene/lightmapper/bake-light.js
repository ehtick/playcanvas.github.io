/**
 * @license
 * PlayCanvas Engine v1.58.0-dev revision 1331860ee (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { BoundingBox } from '../../core/shape/bounding-box.js';
import { BoundingSphere } from '../../core/shape/bounding-sphere.js';
import { LIGHTTYPE_DIRECTIONAL } from '../constants.js';

const tempSphere = new BoundingSphere();

class BakeLight {
  constructor(scene, light) {
    this.scene = scene;
    this.light = light;
    this.store();
    light.numCascades = 1;

    if (light.type !== LIGHTTYPE_DIRECTIONAL) {
      light._node.getWorldTransform();

      light.getBoundingSphere(tempSphere);
      this.lightBounds = new BoundingBox();
      this.lightBounds.center.copy(tempSphere.center);
      this.lightBounds.halfExtents.set(tempSphere.radius, tempSphere.radius, tempSphere.radius);
    }
  }

  store() {
    this.mask = this.light.mask;
    this.shadowUpdateMode = this.light.shadowUpdateMode;
    this.enabled = this.light.enabled;
    this.intensity = this.light.intensity;
    this.rotation = this.light._node.getLocalRotation().clone();
    this.numCascades = this.light.numCascades;
  }

  restore() {
    const light = this.light;
    light.mask = this.mask;
    light.shadowUpdateMode = this.shadowUpdateMode;
    light.enabled = this.enabled;
    light.intensity = this.intensity;

    light._node.setLocalRotation(this.rotation);

    light.numCascades = this.numCascades;
  }

  startBake() {
    this.light.enabled = true;

    this.light._destroyShadowMap();
  }

  endBake(shadowMapCache) {
    const light = this.light;
    light.enabled = false;

    if (light.shadowMap) {
      if (light.shadowMap.cached) shadowMapCache.add(light, light.shadowMap);
      light.shadowMap = null;
    }
  }

}

export { BakeLight };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFrZS1saWdodC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NjZW5lL2xpZ2h0bWFwcGVyL2Jha2UtbGlnaHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm91bmRpbmdCb3ggfSBmcm9tICcuLi8uLi9jb3JlL3NoYXBlL2JvdW5kaW5nLWJveC5qcyc7XG5pbXBvcnQgeyBCb3VuZGluZ1NwaGVyZSB9IGZyb20gJy4uLy4uL2NvcmUvc2hhcGUvYm91bmRpbmctc3BoZXJlLmpzJztcbmltcG9ydCB7IExJR0hUVFlQRV9ESVJFQ1RJT05BTCB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5cbmNvbnN0IHRlbXBTcGhlcmUgPSBuZXcgQm91bmRpbmdTcGhlcmUoKTtcblxuLy8gaGVscGVyIGNsYXNzIHRvIHN0b3JlIGFsbCBsaWdodHMgaW5jbHVkaW5nIHRoZWlyIG9yaWdpbmFsIHN0YXRlXG5jbGFzcyBCYWtlTGlnaHQge1xuICAgIGNvbnN0cnVjdG9yKHNjZW5lLCBsaWdodCkge1xuXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcblxuICAgICAgICAvLyBsaWdodCBvZiB0eXBlIExpZ2h0XG4gICAgICAgIHRoaXMubGlnaHQgPSBsaWdodDtcblxuICAgICAgICAvLyBvcmlnaW5hbCBsaWdodCBwcm9wZXJ0aWVzXG4gICAgICAgIHRoaXMuc3RvcmUoKTtcblxuICAgICAgICAvLyBkb24ndCB1c2UgY2FzY2FkZXNcbiAgICAgICAgbGlnaHQubnVtQ2FzY2FkZXMgPSAxO1xuXG4gICAgICAgIC8vIGJvdW5kcyBmb3Igbm9uLWRpcmVjdGlvbmFsIGxpZ2h0XG4gICAgICAgIGlmIChsaWdodC50eXBlICE9PSBMSUdIVFRZUEVfRElSRUNUSU9OQUwpIHtcblxuICAgICAgICAgICAgLy8gd29ybGQgc3BoZXJlXG4gICAgICAgICAgICBsaWdodC5fbm9kZS5nZXRXb3JsZFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgbGlnaHQuZ2V0Qm91bmRpbmdTcGhlcmUodGVtcFNwaGVyZSk7XG5cbiAgICAgICAgICAgIC8vIHdvcmxkIGFhYmJcbiAgICAgICAgICAgIHRoaXMubGlnaHRCb3VuZHMgPSBuZXcgQm91bmRpbmdCb3goKTtcbiAgICAgICAgICAgIHRoaXMubGlnaHRCb3VuZHMuY2VudGVyLmNvcHkodGVtcFNwaGVyZS5jZW50ZXIpO1xuICAgICAgICAgICAgdGhpcy5saWdodEJvdW5kcy5oYWxmRXh0ZW50cy5zZXQodGVtcFNwaGVyZS5yYWRpdXMsIHRlbXBTcGhlcmUucmFkaXVzLCB0ZW1wU3BoZXJlLnJhZGl1cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdG9yZSgpIHtcbiAgICAgICAgdGhpcy5tYXNrID0gdGhpcy5saWdodC5tYXNrO1xuICAgICAgICB0aGlzLnNoYWRvd1VwZGF0ZU1vZGUgPSB0aGlzLmxpZ2h0LnNoYWRvd1VwZGF0ZU1vZGU7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRoaXMubGlnaHQuZW5hYmxlZDtcbiAgICAgICAgdGhpcy5pbnRlbnNpdHkgPSB0aGlzLmxpZ2h0LmludGVuc2l0eTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IHRoaXMubGlnaHQuX25vZGUuZ2V0TG9jYWxSb3RhdGlvbigpLmNsb25lKCk7XG4gICAgICAgIHRoaXMubnVtQ2FzY2FkZXMgPSB0aGlzLmxpZ2h0Lm51bUNhc2NhZGVzO1xuICAgIH1cblxuICAgIHJlc3RvcmUoKSB7XG4gICAgICAgIGNvbnN0IGxpZ2h0ID0gdGhpcy5saWdodDtcbiAgICAgICAgbGlnaHQubWFzayA9IHRoaXMubWFzaztcbiAgICAgICAgbGlnaHQuc2hhZG93VXBkYXRlTW9kZSA9IHRoaXMuc2hhZG93VXBkYXRlTW9kZTtcbiAgICAgICAgbGlnaHQuZW5hYmxlZCA9IHRoaXMuZW5hYmxlZDtcbiAgICAgICAgbGlnaHQuaW50ZW5zaXR5ID0gdGhpcy5pbnRlbnNpdHk7XG4gICAgICAgIGxpZ2h0Ll9ub2RlLnNldExvY2FsUm90YXRpb24odGhpcy5yb3RhdGlvbik7XG4gICAgICAgIGxpZ2h0Lm51bUNhc2NhZGVzID0gdGhpcy5udW1DYXNjYWRlcztcbiAgICB9XG5cbiAgICBzdGFydEJha2UoKSB7XG4gICAgICAgIHRoaXMubGlnaHQuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gZGVzdHJveSBzaGFkb3cgbWFwIHRoZSBsaWdodCBtaWdodCBoYXZlXG4gICAgICAgIHRoaXMubGlnaHQuX2Rlc3Ryb3lTaGFkb3dNYXAoKTtcbiAgICB9XG5cbiAgICBlbmRCYWtlKHNoYWRvd01hcENhY2hlKSB7XG4gICAgICAgIGNvbnN0IGxpZ2h0ID0gdGhpcy5saWdodDtcbiAgICAgICAgbGlnaHQuZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChsaWdodC5zaGFkb3dNYXApIHtcbiAgICAgICAgICAgIC8vIHJldHVybiBzaGFkb3cgbWFwIHRvIHRoZSBjYWNoZVxuICAgICAgICAgICAgaWYgKGxpZ2h0LnNoYWRvd01hcC5jYWNoZWQpXG4gICAgICAgICAgICAgICAgc2hhZG93TWFwQ2FjaGUuYWRkKGxpZ2h0LCBsaWdodC5zaGFkb3dNYXApO1xuXG4gICAgICAgICAgICBsaWdodC5zaGFkb3dNYXAgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBCYWtlTGlnaHQgfTtcbiJdLCJuYW1lcyI6WyJ0ZW1wU3BoZXJlIiwiQm91bmRpbmdTcGhlcmUiLCJCYWtlTGlnaHQiLCJjb25zdHJ1Y3RvciIsInNjZW5lIiwibGlnaHQiLCJzdG9yZSIsIm51bUNhc2NhZGVzIiwidHlwZSIsIkxJR0hUVFlQRV9ESVJFQ1RJT05BTCIsIl9ub2RlIiwiZ2V0V29ybGRUcmFuc2Zvcm0iLCJnZXRCb3VuZGluZ1NwaGVyZSIsImxpZ2h0Qm91bmRzIiwiQm91bmRpbmdCb3giLCJjZW50ZXIiLCJjb3B5IiwiaGFsZkV4dGVudHMiLCJzZXQiLCJyYWRpdXMiLCJtYXNrIiwic2hhZG93VXBkYXRlTW9kZSIsImVuYWJsZWQiLCJpbnRlbnNpdHkiLCJyb3RhdGlvbiIsImdldExvY2FsUm90YXRpb24iLCJjbG9uZSIsInJlc3RvcmUiLCJzZXRMb2NhbFJvdGF0aW9uIiwic3RhcnRCYWtlIiwiX2Rlc3Ryb3lTaGFkb3dNYXAiLCJlbmRCYWtlIiwic2hhZG93TWFwQ2FjaGUiLCJzaGFkb3dNYXAiLCJjYWNoZWQiLCJhZGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUlBLE1BQU1BLFVBQVUsR0FBRyxJQUFJQyxjQUFKLEVBQW5CLENBQUE7O0FBR0EsTUFBTUMsU0FBTixDQUFnQjtBQUNaQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUUMsS0FBUixFQUFlO0lBRXRCLElBQUtELENBQUFBLEtBQUwsR0FBYUEsS0FBYixDQUFBO0lBR0EsSUFBS0MsQ0FBQUEsS0FBTCxHQUFhQSxLQUFiLENBQUE7QUFHQSxJQUFBLElBQUEsQ0FBS0MsS0FBTCxFQUFBLENBQUE7SUFHQUQsS0FBSyxDQUFDRSxXQUFOLEdBQW9CLENBQXBCLENBQUE7O0FBR0EsSUFBQSxJQUFJRixLQUFLLENBQUNHLElBQU4sS0FBZUMscUJBQW5CLEVBQTBDO01BR3RDSixLQUFLLENBQUNLLEtBQU4sQ0FBWUMsaUJBQVosRUFBQSxDQUFBOztNQUNBTixLQUFLLENBQUNPLGlCQUFOLENBQXdCWixVQUF4QixDQUFBLENBQUE7QUFHQSxNQUFBLElBQUEsQ0FBS2EsV0FBTCxHQUFtQixJQUFJQyxXQUFKLEVBQW5CLENBQUE7TUFDQSxJQUFLRCxDQUFBQSxXQUFMLENBQWlCRSxNQUFqQixDQUF3QkMsSUFBeEIsQ0FBNkJoQixVQUFVLENBQUNlLE1BQXhDLENBQUEsQ0FBQTtBQUNBLE1BQUEsSUFBQSxDQUFLRixXQUFMLENBQWlCSSxXQUFqQixDQUE2QkMsR0FBN0IsQ0FBaUNsQixVQUFVLENBQUNtQixNQUE1QyxFQUFvRG5CLFVBQVUsQ0FBQ21CLE1BQS9ELEVBQXVFbkIsVUFBVSxDQUFDbUIsTUFBbEYsQ0FBQSxDQUFBO0FBQ0gsS0FBQTtBQUNKLEdBQUE7O0FBRURiLEVBQUFBLEtBQUssR0FBRztBQUNKLElBQUEsSUFBQSxDQUFLYyxJQUFMLEdBQVksSUFBS2YsQ0FBQUEsS0FBTCxDQUFXZSxJQUF2QixDQUFBO0FBQ0EsSUFBQSxJQUFBLENBQUtDLGdCQUFMLEdBQXdCLElBQUtoQixDQUFBQSxLQUFMLENBQVdnQixnQkFBbkMsQ0FBQTtBQUNBLElBQUEsSUFBQSxDQUFLQyxPQUFMLEdBQWUsSUFBS2pCLENBQUFBLEtBQUwsQ0FBV2lCLE9BQTFCLENBQUE7QUFDQSxJQUFBLElBQUEsQ0FBS0MsU0FBTCxHQUFpQixJQUFLbEIsQ0FBQUEsS0FBTCxDQUFXa0IsU0FBNUIsQ0FBQTtJQUNBLElBQUtDLENBQUFBLFFBQUwsR0FBZ0IsSUFBQSxDQUFLbkIsS0FBTCxDQUFXSyxLQUFYLENBQWlCZSxnQkFBakIsRUFBb0NDLENBQUFBLEtBQXBDLEVBQWhCLENBQUE7QUFDQSxJQUFBLElBQUEsQ0FBS25CLFdBQUwsR0FBbUIsSUFBS0YsQ0FBQUEsS0FBTCxDQUFXRSxXQUE5QixDQUFBO0FBQ0gsR0FBQTs7QUFFRG9CLEVBQUFBLE9BQU8sR0FBRztJQUNOLE1BQU10QixLQUFLLEdBQUcsSUFBQSxDQUFLQSxLQUFuQixDQUFBO0FBQ0FBLElBQUFBLEtBQUssQ0FBQ2UsSUFBTixHQUFhLElBQUEsQ0FBS0EsSUFBbEIsQ0FBQTtBQUNBZixJQUFBQSxLQUFLLENBQUNnQixnQkFBTixHQUF5QixJQUFBLENBQUtBLGdCQUE5QixDQUFBO0FBQ0FoQixJQUFBQSxLQUFLLENBQUNpQixPQUFOLEdBQWdCLElBQUEsQ0FBS0EsT0FBckIsQ0FBQTtBQUNBakIsSUFBQUEsS0FBSyxDQUFDa0IsU0FBTixHQUFrQixJQUFBLENBQUtBLFNBQXZCLENBQUE7O0FBQ0FsQixJQUFBQSxLQUFLLENBQUNLLEtBQU4sQ0FBWWtCLGdCQUFaLENBQTZCLEtBQUtKLFFBQWxDLENBQUEsQ0FBQTs7QUFDQW5CLElBQUFBLEtBQUssQ0FBQ0UsV0FBTixHQUFvQixJQUFBLENBQUtBLFdBQXpCLENBQUE7QUFDSCxHQUFBOztBQUVEc0IsRUFBQUEsU0FBUyxHQUFHO0FBQ1IsSUFBQSxJQUFBLENBQUt4QixLQUFMLENBQVdpQixPQUFYLEdBQXFCLElBQXJCLENBQUE7O0lBR0EsSUFBS2pCLENBQUFBLEtBQUwsQ0FBV3lCLGlCQUFYLEVBQUEsQ0FBQTtBQUNILEdBQUE7O0VBRURDLE9BQU8sQ0FBQ0MsY0FBRCxFQUFpQjtJQUNwQixNQUFNM0IsS0FBSyxHQUFHLElBQUEsQ0FBS0EsS0FBbkIsQ0FBQTtJQUNBQSxLQUFLLENBQUNpQixPQUFOLEdBQWdCLEtBQWhCLENBQUE7O0lBRUEsSUFBSWpCLEtBQUssQ0FBQzRCLFNBQVYsRUFBcUI7QUFFakIsTUFBQSxJQUFJNUIsS0FBSyxDQUFDNEIsU0FBTixDQUFnQkMsTUFBcEIsRUFDSUYsY0FBYyxDQUFDRyxHQUFmLENBQW1COUIsS0FBbkIsRUFBMEJBLEtBQUssQ0FBQzRCLFNBQWhDLENBQUEsQ0FBQTtNQUVKNUIsS0FBSyxDQUFDNEIsU0FBTixHQUFrQixJQUFsQixDQUFBO0FBQ0gsS0FBQTtBQUNKLEdBQUE7O0FBakVXOzs7OyJ9
