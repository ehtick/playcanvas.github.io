/**
 * @license
 * PlayCanvas Engine v1.59.0-preview revision 797466563 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { math } from '../../core/math/math.js';
import { ShadowRenderer } from './shadow-renderer.js';
import { ShadowMap } from './shadow-map.js';
import { LIGHTTYPE_SPOT, LIGHTTYPE_OMNI } from '../constants.js';

class ShadowRendererLocal extends ShadowRenderer {
  cull(light, drawCalls) {
    const isClustered = this.renderer.scene.clusteredLightingEnabled;

    light.visibleThisFrame = true;

    if (!isClustered) {
      if (!light._shadowMap) {
        light._shadowMap = ShadowMap.create(this.device, light);
      }
    }
    const type = light._type;
    const faceCount = type === LIGHTTYPE_SPOT ? 1 : 6;
    for (let face = 0; face < faceCount; face++) {
      const lightRenderData = light.getRenderData(null, face);
      const shadowCam = lightRenderData.shadowCamera;
      shadowCam.nearClip = light.attenuationEnd / 1000;
      shadowCam.farClip = light.attenuationEnd;
      const shadowCamNode = shadowCam._node;
      const lightNode = light._node;
      shadowCamNode.setPosition(lightNode.getPosition());
      if (type === LIGHTTYPE_SPOT) {
        shadowCam.fov = light._outerConeAngle * 2;

        shadowCamNode.setRotation(lightNode.getRotation());
        shadowCamNode.rotateLocal(-90, 0, 0);
      } else if (type === LIGHTTYPE_OMNI) {
        if (isClustered) {
          const tileSize = this.lightTextureAtlas.shadowAtlasResolution * light.atlasViewport.z / 3;
          const texelSize = 2 / tileSize;
          const filterSize = texelSize * this.lightTextureAtlas.shadowEdgePixels;
          shadowCam.fov = Math.atan(1 + filterSize) * math.RAD_TO_DEG * 2;
        } else {
          shadowCam.fov = 90;
        }
      }

      this.renderer.updateCameraFrustum(shadowCam);
      this.cullShadowCasters(drawCalls, lightRenderData.visibleCasters, shadowCam);
    }
  }
}

export { ShadowRendererLocal };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhZG93LXJlbmRlcmVyLWxvY2FsLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2NlbmUvcmVuZGVyZXIvc2hhZG93LXJlbmRlcmVyLWxvY2FsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hdGggfSBmcm9tICcuLi8uLi9jb3JlL21hdGgvbWF0aC5qcyc7XG5cbmltcG9ydCB7IFNoYWRvd1JlbmRlcmVyIH0gZnJvbSBcIi4vc2hhZG93LXJlbmRlcmVyLmpzXCI7XG5pbXBvcnQgeyBTaGFkb3dNYXAgfSBmcm9tICcuL3NoYWRvdy1tYXAuanMnO1xuaW1wb3J0IHtcbiAgICBMSUdIVFRZUEVfT01OSSwgTElHSFRUWVBFX1NQT1Rcbn0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIFNoYWRvd1JlbmRlcmVyTG9jYWwgZXh0ZW5kcyBTaGFkb3dSZW5kZXJlciB7XG4gICAgLy8gY3VsbCBsb2NhbCBzaGFkb3cgbWFwXG4gICAgY3VsbChsaWdodCwgZHJhd0NhbGxzKSB7XG5cbiAgICAgICAgY29uc3QgaXNDbHVzdGVyZWQgPSB0aGlzLnJlbmRlcmVyLnNjZW5lLmNsdXN0ZXJlZExpZ2h0aW5nRW5hYmxlZDtcblxuICAgICAgICAvLyBmb3JjZSBsaWdodCB2aXNpYmlsaXR5IGlmIGZ1bmN0aW9uIHdhcyBtYW51YWxseSBjYWxsZWRcbiAgICAgICAgbGlnaHQudmlzaWJsZVRoaXNGcmFtZSA9IHRydWU7XG5cbiAgICAgICAgLy8gYWxsb2NhdGUgc2hhZG93IG1hcCB1bmxlc3MgaW4gY2x1c3RlcmVkIGxpZ2h0aW5nIG1vZGVcbiAgICAgICAgaWYgKCFpc0NsdXN0ZXJlZCkge1xuICAgICAgICAgICAgaWYgKCFsaWdodC5fc2hhZG93TWFwKSB7XG4gICAgICAgICAgICAgICAgbGlnaHQuX3NoYWRvd01hcCA9IFNoYWRvd01hcC5jcmVhdGUodGhpcy5kZXZpY2UsIGxpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHR5cGUgPSBsaWdodC5fdHlwZTtcbiAgICAgICAgY29uc3QgZmFjZUNvdW50ID0gdHlwZSA9PT0gTElHSFRUWVBFX1NQT1QgPyAxIDogNjtcblxuICAgICAgICBmb3IgKGxldCBmYWNlID0gMDsgZmFjZSA8IGZhY2VDb3VudDsgZmFjZSsrKSB7XG5cbiAgICAgICAgICAgIC8vIHJlbmRlciBkYXRhIGFyZSBzaGFyZWQgYmV0d2VlbiBjYW1lcmFzIGZvciBsb2NhbCBsaWdodHMsIHNvIHBhc3MgbnVsbCBmb3IgY2FtZXJhXG4gICAgICAgICAgICBjb25zdCBsaWdodFJlbmRlckRhdGEgPSBsaWdodC5nZXRSZW5kZXJEYXRhKG51bGwsIGZhY2UpO1xuICAgICAgICAgICAgY29uc3Qgc2hhZG93Q2FtID0gbGlnaHRSZW5kZXJEYXRhLnNoYWRvd0NhbWVyYTtcblxuICAgICAgICAgICAgc2hhZG93Q2FtLm5lYXJDbGlwID0gbGlnaHQuYXR0ZW51YXRpb25FbmQgLyAxMDAwO1xuICAgICAgICAgICAgc2hhZG93Q2FtLmZhckNsaXAgPSBsaWdodC5hdHRlbnVhdGlvbkVuZDtcblxuICAgICAgICAgICAgY29uc3Qgc2hhZG93Q2FtTm9kZSA9IHNoYWRvd0NhbS5fbm9kZTtcbiAgICAgICAgICAgIGNvbnN0IGxpZ2h0Tm9kZSA9IGxpZ2h0Ll9ub2RlO1xuICAgICAgICAgICAgc2hhZG93Q2FtTm9kZS5zZXRQb3NpdGlvbihsaWdodE5vZGUuZ2V0UG9zaXRpb24oKSk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSBMSUdIVFRZUEVfU1BPVCkge1xuICAgICAgICAgICAgICAgIHNoYWRvd0NhbS5mb3YgPSBsaWdodC5fb3V0ZXJDb25lQW5nbGUgKiAyO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2FtZXJhIGxvb2tzIGRvd24gdGhlIG5lZ2F0aXZlIFosIGFuZCBzcG90IGxpZ2h0IHBvaW50cyBkb3duIHRoZSBuZWdhdGl2ZSBZXG4gICAgICAgICAgICAgICAgc2hhZG93Q2FtTm9kZS5zZXRSb3RhdGlvbihsaWdodE5vZGUuZ2V0Um90YXRpb24oKSk7XG4gICAgICAgICAgICAgICAgc2hhZG93Q2FtTm9kZS5yb3RhdGVMb2NhbCgtOTAsIDAsIDApO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IExJR0hUVFlQRV9PTU5JKSB7XG5cbiAgICAgICAgICAgICAgICAvLyB3aGVuIHJlbmRlcmluZyBvbW5pIHNoYWRvd3MgdG8gYW4gYXRsYXMsIHVzZSBsYXJnZXIgZm92IGJ5IGZldyBwaXhlbHMgdG8gYWxsb3cgc2hhZG93IGZpbHRlcmluZyB0byBzdGF5IG9uIGEgc2luZ2xlIGZhY2VcbiAgICAgICAgICAgICAgICBpZiAoaXNDbHVzdGVyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGlsZVNpemUgPSB0aGlzLmxpZ2h0VGV4dHVyZUF0bGFzLnNoYWRvd0F0bGFzUmVzb2x1dGlvbiAqIGxpZ2h0LmF0bGFzVmlld3BvcnQueiAvIDM7ICAgIC8vIHVzaW5nIDN4MyBmb3IgY3ViZW1hcFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXhlbFNpemUgPSAyIC8gdGlsZVNpemU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlclNpemUgPSB0ZXhlbFNpemUgKiB0aGlzLmxpZ2h0VGV4dHVyZUF0bGFzLnNoYWRvd0VkZ2VQaXhlbHM7XG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NhbS5mb3YgPSBNYXRoLmF0YW4oMSArIGZpbHRlclNpemUpICogbWF0aC5SQURfVE9fREVHICogMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDYW0uZm92ID0gOTA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjdWxsIHNoYWRvdyBjYXN0ZXJzXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnVwZGF0ZUNhbWVyYUZydXN0dW0oc2hhZG93Q2FtKTtcbiAgICAgICAgICAgIHRoaXMuY3VsbFNoYWRvd0Nhc3RlcnMoZHJhd0NhbGxzLCBsaWdodFJlbmRlckRhdGEudmlzaWJsZUNhc3RlcnMsIHNoYWRvd0NhbSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IFNoYWRvd1JlbmRlcmVyTG9jYWwgfTtcbiJdLCJuYW1lcyI6WyJTaGFkb3dSZW5kZXJlckxvY2FsIiwiU2hhZG93UmVuZGVyZXIiLCJjdWxsIiwibGlnaHQiLCJkcmF3Q2FsbHMiLCJpc0NsdXN0ZXJlZCIsInJlbmRlcmVyIiwic2NlbmUiLCJjbHVzdGVyZWRMaWdodGluZ0VuYWJsZWQiLCJ2aXNpYmxlVGhpc0ZyYW1lIiwiX3NoYWRvd01hcCIsIlNoYWRvd01hcCIsImNyZWF0ZSIsImRldmljZSIsInR5cGUiLCJfdHlwZSIsImZhY2VDb3VudCIsIkxJR0hUVFlQRV9TUE9UIiwiZmFjZSIsImxpZ2h0UmVuZGVyRGF0YSIsImdldFJlbmRlckRhdGEiLCJzaGFkb3dDYW0iLCJzaGFkb3dDYW1lcmEiLCJuZWFyQ2xpcCIsImF0dGVudWF0aW9uRW5kIiwiZmFyQ2xpcCIsInNoYWRvd0NhbU5vZGUiLCJfbm9kZSIsImxpZ2h0Tm9kZSIsInNldFBvc2l0aW9uIiwiZ2V0UG9zaXRpb24iLCJmb3YiLCJfb3V0ZXJDb25lQW5nbGUiLCJzZXRSb3RhdGlvbiIsImdldFJvdGF0aW9uIiwicm90YXRlTG9jYWwiLCJMSUdIVFRZUEVfT01OSSIsInRpbGVTaXplIiwibGlnaHRUZXh0dXJlQXRsYXMiLCJzaGFkb3dBdGxhc1Jlc29sdXRpb24iLCJhdGxhc1ZpZXdwb3J0IiwieiIsInRleGVsU2l6ZSIsImZpbHRlclNpemUiLCJzaGFkb3dFZGdlUGl4ZWxzIiwiTWF0aCIsImF0YW4iLCJtYXRoIiwiUkFEX1RPX0RFRyIsInVwZGF0ZUNhbWVyYUZydXN0dW0iLCJjdWxsU2hhZG93Q2FzdGVycyIsInZpc2libGVDYXN0ZXJzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FB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
