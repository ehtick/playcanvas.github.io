/**
 * @license
 * PlayCanvas Engine v1.62.0-dev revision 7d088032c (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { math } from '../../core/math/math.js';
import { ShadowMap } from './shadow-map.js';
import { LIGHTTYPE_SPOT, LIGHTTYPE_OMNI } from '../constants.js';

/**
 * @ignore
 */
class ShadowRendererLocal {
  constructor(renderer, shadowRenderer) {
    this.renderer = renderer;
    this.shadowRenderer = shadowRenderer;
    this.device = renderer.device;
  }

  // cull local shadow map
  cull(light, drawCalls) {
    const isClustered = this.renderer.scene.clusteredLightingEnabled;

    // force light visibility if function was manually called
    light.visibleThisFrame = true;

    // allocate shadow map unless in clustered lighting mode
    if (!isClustered) {
      if (!light._shadowMap) {
        light._shadowMap = ShadowMap.create(this.device, light);
      }
    }
    const type = light._type;
    const faceCount = type === LIGHTTYPE_SPOT ? 1 : 6;
    for (let face = 0; face < faceCount; face++) {
      // render data are shared between cameras for local lights, so pass null for camera
      const lightRenderData = light.getRenderData(null, face);
      const shadowCam = lightRenderData.shadowCamera;
      shadowCam.nearClip = light.attenuationEnd / 1000;
      shadowCam.farClip = light.attenuationEnd;
      const shadowCamNode = shadowCam._node;
      const lightNode = light._node;
      shadowCamNode.setPosition(lightNode.getPosition());
      if (type === LIGHTTYPE_SPOT) {
        shadowCam.fov = light._outerConeAngle * 2;

        // Camera looks down the negative Z, and spot light points down the negative Y
        shadowCamNode.setRotation(lightNode.getRotation());
        shadowCamNode.rotateLocal(-90, 0, 0);
      } else if (type === LIGHTTYPE_OMNI) {
        // when rendering omni shadows to an atlas, use larger fov by few pixels to allow shadow filtering to stay on a single face
        if (isClustered) {
          const tileSize = this.shadowRenderer.lightTextureAtlas.shadowAtlasResolution * light.atlasViewport.z / 3; // using 3x3 for cubemap
          const texelSize = 2 / tileSize;
          const filterSize = texelSize * this.shadowRenderer.lightTextureAtlas.shadowEdgePixels;
          shadowCam.fov = Math.atan(1 + filterSize) * math.RAD_TO_DEG * 2;
        } else {
          shadowCam.fov = 90;
        }
      }

      // cull shadow casters
      this.renderer.updateCameraFrustum(shadowCam);
      this.shadowRenderer.cullShadowCasters(drawCalls, lightRenderData.visibleCasters, shadowCam);
    }
  }
}

export { ShadowRendererLocal };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhZG93LXJlbmRlcmVyLWxvY2FsLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2NlbmUvcmVuZGVyZXIvc2hhZG93LXJlbmRlcmVyLWxvY2FsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hdGggfSBmcm9tICcuLi8uLi9jb3JlL21hdGgvbWF0aC5qcyc7XG5cbmltcG9ydCB7IFNoYWRvd01hcCB9IGZyb20gJy4vc2hhZG93LW1hcC5qcyc7XG5pbXBvcnQge1xuICAgIExJR0hUVFlQRV9PTU5JLCBMSUdIVFRZUEVfU1BPVFxufSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgU2hhZG93UmVuZGVyZXJMb2NhbCB7XG4gICAgY29uc3RydWN0b3IocmVuZGVyZXIsIHNoYWRvd1JlbmRlcmVyKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICAgICAgdGhpcy5zaGFkb3dSZW5kZXJlciA9IHNoYWRvd1JlbmRlcmVyO1xuICAgICAgICB0aGlzLmRldmljZSA9IHJlbmRlcmVyLmRldmljZTtcbiAgICB9XG5cbiAgICAvLyBjdWxsIGxvY2FsIHNoYWRvdyBtYXBcbiAgICBjdWxsKGxpZ2h0LCBkcmF3Q2FsbHMpIHtcblxuICAgICAgICBjb25zdCBpc0NsdXN0ZXJlZCA9IHRoaXMucmVuZGVyZXIuc2NlbmUuY2x1c3RlcmVkTGlnaHRpbmdFbmFibGVkO1xuXG4gICAgICAgIC8vIGZvcmNlIGxpZ2h0IHZpc2liaWxpdHkgaWYgZnVuY3Rpb24gd2FzIG1hbnVhbGx5IGNhbGxlZFxuICAgICAgICBsaWdodC52aXNpYmxlVGhpc0ZyYW1lID0gdHJ1ZTtcblxuICAgICAgICAvLyBhbGxvY2F0ZSBzaGFkb3cgbWFwIHVubGVzcyBpbiBjbHVzdGVyZWQgbGlnaHRpbmcgbW9kZVxuICAgICAgICBpZiAoIWlzQ2x1c3RlcmVkKSB7XG4gICAgICAgICAgICBpZiAoIWxpZ2h0Ll9zaGFkb3dNYXApIHtcbiAgICAgICAgICAgICAgICBsaWdodC5fc2hhZG93TWFwID0gU2hhZG93TWFwLmNyZWF0ZSh0aGlzLmRldmljZSwgbGlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHlwZSA9IGxpZ2h0Ll90eXBlO1xuICAgICAgICBjb25zdCBmYWNlQ291bnQgPSB0eXBlID09PSBMSUdIVFRZUEVfU1BPVCA/IDEgOiA2O1xuXG4gICAgICAgIGZvciAobGV0IGZhY2UgPSAwOyBmYWNlIDwgZmFjZUNvdW50OyBmYWNlKyspIHtcblxuICAgICAgICAgICAgLy8gcmVuZGVyIGRhdGEgYXJlIHNoYXJlZCBiZXR3ZWVuIGNhbWVyYXMgZm9yIGxvY2FsIGxpZ2h0cywgc28gcGFzcyBudWxsIGZvciBjYW1lcmFcbiAgICAgICAgICAgIGNvbnN0IGxpZ2h0UmVuZGVyRGF0YSA9IGxpZ2h0LmdldFJlbmRlckRhdGEobnVsbCwgZmFjZSk7XG4gICAgICAgICAgICBjb25zdCBzaGFkb3dDYW0gPSBsaWdodFJlbmRlckRhdGEuc2hhZG93Q2FtZXJhO1xuXG4gICAgICAgICAgICBzaGFkb3dDYW0ubmVhckNsaXAgPSBsaWdodC5hdHRlbnVhdGlvbkVuZCAvIDEwMDA7XG4gICAgICAgICAgICBzaGFkb3dDYW0uZmFyQ2xpcCA9IGxpZ2h0LmF0dGVudWF0aW9uRW5kO1xuXG4gICAgICAgICAgICBjb25zdCBzaGFkb3dDYW1Ob2RlID0gc2hhZG93Q2FtLl9ub2RlO1xuICAgICAgICAgICAgY29uc3QgbGlnaHROb2RlID0gbGlnaHQuX25vZGU7XG4gICAgICAgICAgICBzaGFkb3dDYW1Ob2RlLnNldFBvc2l0aW9uKGxpZ2h0Tm9kZS5nZXRQb3NpdGlvbigpKTtcblxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IExJR0hUVFlQRV9TUE9UKSB7XG4gICAgICAgICAgICAgICAgc2hhZG93Q2FtLmZvdiA9IGxpZ2h0Ll9vdXRlckNvbmVBbmdsZSAqIDI7XG5cbiAgICAgICAgICAgICAgICAvLyBDYW1lcmEgbG9va3MgZG93biB0aGUgbmVnYXRpdmUgWiwgYW5kIHNwb3QgbGlnaHQgcG9pbnRzIGRvd24gdGhlIG5lZ2F0aXZlIFlcbiAgICAgICAgICAgICAgICBzaGFkb3dDYW1Ob2RlLnNldFJvdGF0aW9uKGxpZ2h0Tm9kZS5nZXRSb3RhdGlvbigpKTtcbiAgICAgICAgICAgICAgICBzaGFkb3dDYW1Ob2RlLnJvdGF0ZUxvY2FsKC05MCwgMCwgMCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gTElHSFRUWVBFX09NTkkpIHtcblxuICAgICAgICAgICAgICAgIC8vIHdoZW4gcmVuZGVyaW5nIG9tbmkgc2hhZG93cyB0byBhbiBhdGxhcywgdXNlIGxhcmdlciBmb3YgYnkgZmV3IHBpeGVscyB0byBhbGxvdyBzaGFkb3cgZmlsdGVyaW5nIHRvIHN0YXkgb24gYSBzaW5nbGUgZmFjZVxuICAgICAgICAgICAgICAgIGlmIChpc0NsdXN0ZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aWxlU2l6ZSA9IHRoaXMuc2hhZG93UmVuZGVyZXIubGlnaHRUZXh0dXJlQXRsYXMuc2hhZG93QXRsYXNSZXNvbHV0aW9uICogbGlnaHQuYXRsYXNWaWV3cG9ydC56IC8gMzsgICAgLy8gdXNpbmcgM3gzIGZvciBjdWJlbWFwXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleGVsU2l6ZSA9IDIgLyB0aWxlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyU2l6ZSA9IHRleGVsU2l6ZSAqIHRoaXMuc2hhZG93UmVuZGVyZXIubGlnaHRUZXh0dXJlQXRsYXMuc2hhZG93RWRnZVBpeGVscztcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93Q2FtLmZvdiA9IE1hdGguYXRhbigxICsgZmlsdGVyU2l6ZSkgKiBtYXRoLlJBRF9UT19ERUcgKiAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NhbS5mb3YgPSA5MDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGN1bGwgc2hhZG93IGNhc3RlcnNcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIudXBkYXRlQ2FtZXJhRnJ1c3R1bShzaGFkb3dDYW0pO1xuICAgICAgICAgICAgdGhpcy5zaGFkb3dSZW5kZXJlci5jdWxsU2hhZG93Q2FzdGVycyhkcmF3Q2FsbHMsIGxpZ2h0UmVuZGVyRGF0YS52aXNpYmxlQ2FzdGVycywgc2hhZG93Q2FtKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgU2hhZG93UmVuZGVyZXJMb2NhbCB9O1xuIl0sIm5hbWVzIjpbIlNoYWRvd1JlbmRlcmVyTG9jYWwiLCJjb25zdHJ1Y3RvciIsInJlbmRlcmVyIiwic2hhZG93UmVuZGVyZXIiLCJkZXZpY2UiLCJjdWxsIiwibGlnaHQiLCJkcmF3Q2FsbHMiLCJpc0NsdXN0ZXJlZCIsInNjZW5lIiwiY2x1c3RlcmVkTGlnaHRpbmdFbmFibGVkIiwidmlzaWJsZVRoaXNGcmFtZSIsIl9zaGFkb3dNYXAiLCJTaGFkb3dNYXAiLCJjcmVhdGUiLCJ0eXBlIiwiX3R5cGUiLCJmYWNlQ291bnQiLCJMSUdIVFRZUEVfU1BPVCIsImZhY2UiLCJsaWdodFJlbmRlckRhdGEiLCJnZXRSZW5kZXJEYXRhIiwic2hhZG93Q2FtIiwic2hhZG93Q2FtZXJhIiwibmVhckNsaXAiLCJhdHRlbnVhdGlvbkVuZCIsImZhckNsaXAiLCJzaGFkb3dDYW1Ob2RlIiwiX25vZGUiLCJsaWdodE5vZGUiLCJzZXRQb3NpdGlvbiIsImdldFBvc2l0aW9uIiwiZm92IiwiX291dGVyQ29uZUFuZ2xlIiwic2V0Um90YXRpb24iLCJnZXRSb3RhdGlvbiIsInJvdGF0ZUxvY2FsIiwiTElHSFRUWVBFX09NTkkiLCJ0aWxlU2l6ZSIsImxpZ2h0VGV4dHVyZUF0bGFzIiwic2hhZG93QXRsYXNSZXNvbHV0aW9uIiwiYXRsYXNWaWV3cG9ydCIsInoiLCJ0ZXhlbFNpemUiLCJmaWx0ZXJTaXplIiwic2hhZG93RWRnZVBpeGVscyIsIk1hdGgiLCJhdGFuIiwibWF0aCIsIlJBRF9UT19ERUciLCJ1cGRhdGVDYW1lcmFGcnVzdHVtIiwiY3VsbFNoYWRvd0Nhc3RlcnMiLCJ2aXNpYmxlQ2FzdGVycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsbUJBQW1CLENBQUM7QUFDdEJDLEVBQUFBLFdBQVcsQ0FBQ0MsUUFBUSxFQUFFQyxjQUFjLEVBQUU7SUFDbEMsSUFBSSxDQUFDRCxRQUFRLEdBQUdBLFFBQVEsQ0FBQTtJQUN4QixJQUFJLENBQUNDLGNBQWMsR0FBR0EsY0FBYyxDQUFBO0FBQ3BDLElBQUEsSUFBSSxDQUFDQyxNQUFNLEdBQUdGLFFBQVEsQ0FBQ0UsTUFBTSxDQUFBO0FBQ2pDLEdBQUE7O0FBRUE7QUFDQUMsRUFBQUEsSUFBSSxDQUFDQyxLQUFLLEVBQUVDLFNBQVMsRUFBRTtJQUVuQixNQUFNQyxXQUFXLEdBQUcsSUFBSSxDQUFDTixRQUFRLENBQUNPLEtBQUssQ0FBQ0Msd0JBQXdCLENBQUE7O0FBRWhFO0lBQ0FKLEtBQUssQ0FBQ0ssZ0JBQWdCLEdBQUcsSUFBSSxDQUFBOztBQUU3QjtJQUNBLElBQUksQ0FBQ0gsV0FBVyxFQUFFO0FBQ2QsTUFBQSxJQUFJLENBQUNGLEtBQUssQ0FBQ00sVUFBVSxFQUFFO0FBQ25CTixRQUFBQSxLQUFLLENBQUNNLFVBQVUsR0FBR0MsU0FBUyxDQUFDQyxNQUFNLENBQUMsSUFBSSxDQUFDVixNQUFNLEVBQUVFLEtBQUssQ0FBQyxDQUFBO0FBQzNELE9BQUE7QUFDSixLQUFBO0FBRUEsSUFBQSxNQUFNUyxJQUFJLEdBQUdULEtBQUssQ0FBQ1UsS0FBSyxDQUFBO0lBQ3hCLE1BQU1DLFNBQVMsR0FBR0YsSUFBSSxLQUFLRyxjQUFjLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVqRCxLQUFLLElBQUlDLElBQUksR0FBRyxDQUFDLEVBQUVBLElBQUksR0FBR0YsU0FBUyxFQUFFRSxJQUFJLEVBQUUsRUFBRTtBQUV6QztNQUNBLE1BQU1DLGVBQWUsR0FBR2QsS0FBSyxDQUFDZSxhQUFhLENBQUMsSUFBSSxFQUFFRixJQUFJLENBQUMsQ0FBQTtBQUN2RCxNQUFBLE1BQU1HLFNBQVMsR0FBR0YsZUFBZSxDQUFDRyxZQUFZLENBQUE7QUFFOUNELE1BQUFBLFNBQVMsQ0FBQ0UsUUFBUSxHQUFHbEIsS0FBSyxDQUFDbUIsY0FBYyxHQUFHLElBQUksQ0FBQTtBQUNoREgsTUFBQUEsU0FBUyxDQUFDSSxPQUFPLEdBQUdwQixLQUFLLENBQUNtQixjQUFjLENBQUE7QUFFeEMsTUFBQSxNQUFNRSxhQUFhLEdBQUdMLFNBQVMsQ0FBQ00sS0FBSyxDQUFBO0FBQ3JDLE1BQUEsTUFBTUMsU0FBUyxHQUFHdkIsS0FBSyxDQUFDc0IsS0FBSyxDQUFBO0FBQzdCRCxNQUFBQSxhQUFhLENBQUNHLFdBQVcsQ0FBQ0QsU0FBUyxDQUFDRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO01BRWxELElBQUloQixJQUFJLEtBQUtHLGNBQWMsRUFBRTtBQUN6QkksUUFBQUEsU0FBUyxDQUFDVSxHQUFHLEdBQUcxQixLQUFLLENBQUMyQixlQUFlLEdBQUcsQ0FBQyxDQUFBOztBQUV6QztBQUNBTixRQUFBQSxhQUFhLENBQUNPLFdBQVcsQ0FBQ0wsU0FBUyxDQUFDTSxXQUFXLEVBQUUsQ0FBQyxDQUFBO1FBQ2xEUixhQUFhLENBQUNTLFdBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFeEMsT0FBQyxNQUFNLElBQUlyQixJQUFJLEtBQUtzQixjQUFjLEVBQUU7QUFFaEM7QUFDQSxRQUFBLElBQUk3QixXQUFXLEVBQUU7QUFDYixVQUFBLE1BQU04QixRQUFRLEdBQUcsSUFBSSxDQUFDbkMsY0FBYyxDQUFDb0MsaUJBQWlCLENBQUNDLHFCQUFxQixHQUFHbEMsS0FBSyxDQUFDbUMsYUFBYSxDQUFDQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pHLFVBQUEsTUFBTUMsU0FBUyxHQUFHLENBQUMsR0FBR0wsUUFBUSxDQUFBO1VBQzlCLE1BQU1NLFVBQVUsR0FBR0QsU0FBUyxHQUFHLElBQUksQ0FBQ3hDLGNBQWMsQ0FBQ29DLGlCQUFpQixDQUFDTSxnQkFBZ0IsQ0FBQTtBQUNyRnZCLFVBQUFBLFNBQVMsQ0FBQ1UsR0FBRyxHQUFHYyxJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLEdBQUdILFVBQVUsQ0FBQyxHQUFHSSxJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDLENBQUE7QUFDbkUsU0FBQyxNQUFNO1VBQ0gzQixTQUFTLENBQUNVLEdBQUcsR0FBRyxFQUFFLENBQUE7QUFDdEIsU0FBQTtBQUNKLE9BQUE7O0FBRUE7QUFDQSxNQUFBLElBQUksQ0FBQzlCLFFBQVEsQ0FBQ2dELG1CQUFtQixDQUFDNUIsU0FBUyxDQUFDLENBQUE7QUFDNUMsTUFBQSxJQUFJLENBQUNuQixjQUFjLENBQUNnRCxpQkFBaUIsQ0FBQzVDLFNBQVMsRUFBRWEsZUFBZSxDQUFDZ0MsY0FBYyxFQUFFOUIsU0FBUyxDQUFDLENBQUE7QUFDL0YsS0FBQTtBQUNKLEdBQUE7QUFDSjs7OzsifQ==
