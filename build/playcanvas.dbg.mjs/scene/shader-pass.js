/**
 * @license
 * PlayCanvas Engine v1.57.0 revision f1998a31e (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../core/debug.js';
import { SHADER_SHADOW, SHADOW_COUNT, LIGHTTYPE_COUNT, SHADERTYPE_SHADOW, SHADERTYPE_FORWARD, SHADER_PICK, SHADERTYPE_PICK, SHADER_DEPTH, SHADERTYPE_DEPTH, SHADER_FORWARDHDR, SHADER_FORWARD } from './constants.js';

class ShaderPass {
  static getType(shaderPass) {
    switch (shaderPass) {
      case SHADER_FORWARD:
      case SHADER_FORWARDHDR:
        return SHADERTYPE_FORWARD;

      case SHADER_DEPTH:
        return SHADERTYPE_DEPTH;

      case SHADER_PICK:
        return SHADERTYPE_PICK;

      default:
        return shaderPass >= SHADER_SHADOW && shaderPass < SHADER_SHADOW + SHADOW_COUNT * LIGHTTYPE_COUNT ? SHADERTYPE_SHADOW : SHADERTYPE_FORWARD;
    }
  }

  static isForward(pass) {
    return this.getType(pass) === SHADERTYPE_FORWARD;
  }

  static isShadow(pass) {
    return this.getType(pass) === SHADERTYPE_SHADOW;
  }

  static toLightType(pass) {
    Debug.assert(ShaderPass.isShadow(pass));
    const shadowMode = pass - SHADER_SHADOW;
    return Math.floor(shadowMode / SHADOW_COUNT);
  }

  static toShadowType(pass) {
    Debug.assert(ShaderPass.isShadow(pass));
    const shadowMode = pass - SHADER_SHADOW;
    const lightType = Math.floor(shadowMode / SHADOW_COUNT);
    return shadowMode - lightType * SHADOW_COUNT;
  }

  static getShadow(lightType, shadowType) {
    const shadowMode = shadowType + lightType * SHADOW_COUNT;
    const pass = SHADER_SHADOW + shadowMode;
    Debug.assert(ShaderPass.isShadow(pass));
    return pass;
  }

  static getPassShaderDefine(pass) {
    if (pass === SHADER_PICK) {
      return '#define PICK_PASS\n';
    } else if (pass === SHADER_DEPTH) {
      return '#define DEPTH_PASS\n';
    } else if (ShaderPass.isShadow(pass)) {
      return '#define SHADOW_PASS\n';
    }

    return '';
  }

}

export { ShaderPass };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhZGVyLXBhc3MuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY2VuZS9zaGFkZXItcGFzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWJ1ZyB9IGZyb20gJy4uL2NvcmUvZGVidWcuanMnO1xuaW1wb3J0IHtcbiAgICBTSEFERVJfRk9SV0FSRCwgU0hBREVSX0ZPUldBUkRIRFIsIFNIQURFUl9ERVBUSCwgU0hBREVSX1BJQ0ssXG4gICAgU0hBREVSX1NIQURPVywgU0hBRE9XX0NPVU5ULCBMSUdIVFRZUEVfQ09VTlQsXG4gICAgU0hBREVSVFlQRV9GT1JXQVJELCBTSEFERVJUWVBFX0RFUFRILCBTSEFERVJUWVBFX1BJQ0ssIFNIQURFUlRZUEVfU0hBRE9XXG59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBBIHB1cmUgc3RhdGljIHV0aWxpdHkgY2xhc3MsIHJlc3BvbnNpYmxlIGZvciBtYXRoIG9wZXJhdGlvbnMgb24gdGhlIHNoYWRlciBwYXNzIGNvbnN0YW50cy5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIFNoYWRlclBhc3Mge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNoYWRlciB0eXBlIGdpdmVuIHRoZSBzaGFkZXIgcGFzcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaGFkZXJQYXNzIC0gVGhlIHNoYWRlciBwYXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIHNoYWRlciB0eXBlLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRUeXBlKHNoYWRlclBhc3MpIHtcbiAgICAgICAgc3dpdGNoIChzaGFkZXJQYXNzKSB7XG4gICAgICAgICAgICBjYXNlIFNIQURFUl9GT1JXQVJEOlxuICAgICAgICAgICAgY2FzZSBTSEFERVJfRk9SV0FSREhEUjpcbiAgICAgICAgICAgICAgICByZXR1cm4gU0hBREVSVFlQRV9GT1JXQVJEO1xuICAgICAgICAgICAgY2FzZSBTSEFERVJfREVQVEg6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNIQURFUlRZUEVfREVQVEg7XG4gICAgICAgICAgICBjYXNlIFNIQURFUl9QSUNLOlxuICAgICAgICAgICAgICAgIHJldHVybiBTSEFERVJUWVBFX1BJQ0s7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAoc2hhZGVyUGFzcyA+PSBTSEFERVJfU0hBRE9XICYmIHNoYWRlclBhc3MgPCBTSEFERVJfU0hBRE9XICsgU0hBRE9XX0NPVU5UICogTElHSFRUWVBFX0NPVU5UKSA/IFNIQURFUlRZUEVfU0hBRE9XIDogU0hBREVSVFlQRV9GT1JXQVJEO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBzaGFkZXIgcGFzcyBpcyBhIGZvcndhcmQgc2hhZGVyIHBhc3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFzcyAtIFRoZSBzaGFkZXIgcGFzcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUcnVlIGlmIHRoZSBwYXNzIGlzIGEgZm9yd2FyZCBzaGFkZXIgcGFzcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNGb3J3YXJkKHBhc3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZShwYXNzKSA9PT0gU0hBREVSVFlQRV9GT1JXQVJEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc2hhZGVyIHBhc3MgaXMgYSBzaGFkb3cgc2hhZGVyIHBhc3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFzcyAtIFRoZSBzaGFkZXIgcGFzcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUcnVlIGlmIHRoZSBwYXNzIGlzIGEgc2hhZG93IHNoYWRlciBwYXNzLlxuICAgICAqL1xuICAgIHN0YXRpYyBpc1NoYWRvdyhwYXNzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGUocGFzcykgPT09IFNIQURFUlRZUEVfU0hBRE9XO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpZ2h0IHR5cGUgYmFzZWQgb24gdGhlIHNoYWRlciBzaGFkb3cgcGFzcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwYXNzIC0gVGhlIHNoYWRlciBwYXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IC0gQSBsaWdodCB0eXBlLlxuICAgICAqL1xuICAgIHN0YXRpYyB0b0xpZ2h0VHlwZShwYXNzKSB7XG4gICAgICAgIERlYnVnLmFzc2VydChTaGFkZXJQYXNzLmlzU2hhZG93KHBhc3MpKTtcbiAgICAgICAgY29uc3Qgc2hhZG93TW9kZSA9IHBhc3MgLSBTSEFERVJfU0hBRE9XO1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihzaGFkb3dNb2RlIC8gU0hBRE9XX0NPVU5UKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzaGFkb3cgdHlwZSBiYXNlZCBvbiB0aGUgc2hhZGVyIHNoYWRvdyBwYXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBhc3MgLSBUaGUgc2hhZGVyIHBhc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gLSBBIHNoYWRvdyB0eXBlLlxuICAgICAqL1xuICAgIHN0YXRpYyB0b1NoYWRvd1R5cGUocGFzcykge1xuICAgICAgICBEZWJ1Zy5hc3NlcnQoU2hhZGVyUGFzcy5pc1NoYWRvdyhwYXNzKSk7XG4gICAgICAgIGNvbnN0IHNoYWRvd01vZGUgPSBwYXNzIC0gU0hBREVSX1NIQURPVztcbiAgICAgICAgY29uc3QgbGlnaHRUeXBlID0gTWF0aC5mbG9vcihzaGFkb3dNb2RlIC8gU0hBRE9XX0NPVU5UKTtcbiAgICAgICAgcmV0dXJuIHNoYWRvd01vZGUgLSBsaWdodFR5cGUgKiBTSEFET1dfQ09VTlQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHNoYWRlciBwYXNzIGZvciBzcGVjaWZpZWQgbGlnaHQgYW5kIHNoYWRvdyB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxpZ2h0VHlwZSAtIEEgbGlnaHQgdHlwZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2hhZG93VHlwZSAtIEEgc2hhZG93IHR5cGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gLSBBIHNoYWRlciBwYXNzLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRTaGFkb3cobGlnaHRUeXBlLCBzaGFkb3dUeXBlKSB7XG4gICAgICAgIGNvbnN0IHNoYWRvd01vZGUgPSBzaGFkb3dUeXBlICsgbGlnaHRUeXBlICogU0hBRE9XX0NPVU5UO1xuICAgICAgICBjb25zdCBwYXNzID0gU0hBREVSX1NIQURPVyArIHNoYWRvd01vZGU7XG4gICAgICAgIERlYnVnLmFzc2VydChTaGFkZXJQYXNzLmlzU2hhZG93KHBhc3MpKTtcbiAgICAgICAgcmV0dXJuIHBhc3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGVmaW5lIGNvZGUgbGluZSBmb3IgdGhlIHNoYWRlciBwYXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBhc3MgLSBUaGUgc2hhZGVyIHBhc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gLSBBIGNvZGUgbGluZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0UGFzc1NoYWRlckRlZmluZShwYXNzKSB7XG4gICAgICAgIGlmIChwYXNzID09PSBTSEFERVJfUElDSykge1xuICAgICAgICAgICAgcmV0dXJuICcjZGVmaW5lIFBJQ0tfUEFTU1xcbic7XG4gICAgICAgIH0gZWxzZSBpZiAocGFzcyA9PT0gU0hBREVSX0RFUFRIKSB7XG4gICAgICAgICAgICByZXR1cm4gJyNkZWZpbmUgREVQVEhfUEFTU1xcbic7XG4gICAgICAgIH0gZWxzZSBpZiAoU2hhZGVyUGFzcy5pc1NoYWRvdyhwYXNzKSkge1xuICAgICAgICAgICAgcmV0dXJuICcjZGVmaW5lIFNIQURPV19QQVNTXFxuJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuXG5leHBvcnQgeyBTaGFkZXJQYXNzIH07XG4iXSwibmFtZXMiOlsiU2hhZGVyUGFzcyIsImdldFR5cGUiLCJzaGFkZXJQYXNzIiwiU0hBREVSX0ZPUldBUkQiLCJTSEFERVJfRk9SV0FSREhEUiIsIlNIQURFUlRZUEVfRk9SV0FSRCIsIlNIQURFUl9ERVBUSCIsIlNIQURFUlRZUEVfREVQVEgiLCJTSEFERVJfUElDSyIsIlNIQURFUlRZUEVfUElDSyIsIlNIQURFUl9TSEFET1ciLCJTSEFET1dfQ09VTlQiLCJMSUdIVFRZUEVfQ09VTlQiLCJTSEFERVJUWVBFX1NIQURPVyIsImlzRm9yd2FyZCIsInBhc3MiLCJpc1NoYWRvdyIsInRvTGlnaHRUeXBlIiwiRGVidWciLCJhc3NlcnQiLCJzaGFkb3dNb2RlIiwiTWF0aCIsImZsb29yIiwidG9TaGFkb3dUeXBlIiwibGlnaHRUeXBlIiwiZ2V0U2hhZG93Iiwic2hhZG93VHlwZSIsImdldFBhc3NTaGFkZXJEZWZpbmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBWUEsTUFBTUEsVUFBTixDQUFpQjtFQU9DLE9BQVBDLE9BQU8sQ0FBQ0MsVUFBRCxFQUFhO0FBQ3ZCLElBQUEsUUFBUUEsVUFBUjtBQUNJLE1BQUEsS0FBS0MsY0FBTCxDQUFBO0FBQ0EsTUFBQSxLQUFLQyxpQkFBTDtBQUNJLFFBQUEsT0FBT0Msa0JBQVAsQ0FBQTs7QUFDSixNQUFBLEtBQUtDLFlBQUw7QUFDSSxRQUFBLE9BQU9DLGdCQUFQLENBQUE7O0FBQ0osTUFBQSxLQUFLQyxXQUFMO0FBQ0ksUUFBQSxPQUFPQyxlQUFQLENBQUE7O0FBQ0osTUFBQTtBQUNJLFFBQUEsT0FBUVAsVUFBVSxJQUFJUSxhQUFkLElBQStCUixVQUFVLEdBQUdRLGFBQWEsR0FBR0MsWUFBWSxHQUFHQyxlQUE1RSxHQUErRkMsaUJBQS9GLEdBQW1IUixrQkFBMUgsQ0FBQTtBQVRSLEtBQUE7QUFXSCxHQUFBOztFQVFlLE9BQVRTLFNBQVMsQ0FBQ0MsSUFBRCxFQUFPO0FBQ25CLElBQUEsT0FBTyxJQUFLZCxDQUFBQSxPQUFMLENBQWFjLElBQWIsTUFBdUJWLGtCQUE5QixDQUFBO0FBQ0gsR0FBQTs7RUFRYyxPQUFSVyxRQUFRLENBQUNELElBQUQsRUFBTztBQUNsQixJQUFBLE9BQU8sSUFBS2QsQ0FBQUEsT0FBTCxDQUFhYyxJQUFiLE1BQXVCRixpQkFBOUIsQ0FBQTtBQUNILEdBQUE7O0VBUWlCLE9BQVhJLFdBQVcsQ0FBQ0YsSUFBRCxFQUFPO0lBQ3JCRyxLQUFLLENBQUNDLE1BQU4sQ0FBYW5CLFVBQVUsQ0FBQ2dCLFFBQVgsQ0FBb0JELElBQXBCLENBQWIsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxNQUFNSyxVQUFVLEdBQUdMLElBQUksR0FBR0wsYUFBMUIsQ0FBQTtBQUNBLElBQUEsT0FBT1csSUFBSSxDQUFDQyxLQUFMLENBQVdGLFVBQVUsR0FBR1QsWUFBeEIsQ0FBUCxDQUFBO0FBQ0gsR0FBQTs7RUFRa0IsT0FBWlksWUFBWSxDQUFDUixJQUFELEVBQU87SUFDdEJHLEtBQUssQ0FBQ0MsTUFBTixDQUFhbkIsVUFBVSxDQUFDZ0IsUUFBWCxDQUFvQkQsSUFBcEIsQ0FBYixDQUFBLENBQUE7QUFDQSxJQUFBLE1BQU1LLFVBQVUsR0FBR0wsSUFBSSxHQUFHTCxhQUExQixDQUFBO0lBQ0EsTUFBTWMsU0FBUyxHQUFHSCxJQUFJLENBQUNDLEtBQUwsQ0FBV0YsVUFBVSxHQUFHVCxZQUF4QixDQUFsQixDQUFBO0FBQ0EsSUFBQSxPQUFPUyxVQUFVLEdBQUdJLFNBQVMsR0FBR2IsWUFBaEMsQ0FBQTtBQUNILEdBQUE7O0FBU2UsRUFBQSxPQUFUYyxTQUFTLENBQUNELFNBQUQsRUFBWUUsVUFBWixFQUF3QjtBQUNwQyxJQUFBLE1BQU1OLFVBQVUsR0FBR00sVUFBVSxHQUFHRixTQUFTLEdBQUdiLFlBQTVDLENBQUE7QUFDQSxJQUFBLE1BQU1JLElBQUksR0FBR0wsYUFBYSxHQUFHVSxVQUE3QixDQUFBO0lBQ0FGLEtBQUssQ0FBQ0MsTUFBTixDQUFhbkIsVUFBVSxDQUFDZ0IsUUFBWCxDQUFvQkQsSUFBcEIsQ0FBYixDQUFBLENBQUE7QUFDQSxJQUFBLE9BQU9BLElBQVAsQ0FBQTtBQUNILEdBQUE7O0VBUXlCLE9BQW5CWSxtQkFBbUIsQ0FBQ1osSUFBRCxFQUFPO0lBQzdCLElBQUlBLElBQUksS0FBS1AsV0FBYixFQUEwQjtBQUN0QixNQUFBLE9BQU8scUJBQVAsQ0FBQTtBQUNILEtBRkQsTUFFTyxJQUFJTyxJQUFJLEtBQUtULFlBQWIsRUFBMkI7QUFDOUIsTUFBQSxPQUFPLHNCQUFQLENBQUE7S0FERyxNQUVBLElBQUlOLFVBQVUsQ0FBQ2dCLFFBQVgsQ0FBb0JELElBQXBCLENBQUosRUFBK0I7QUFDbEMsTUFBQSxPQUFPLHVCQUFQLENBQUE7QUFDSCxLQUFBOztBQUNELElBQUEsT0FBTyxFQUFQLENBQUE7QUFDSCxHQUFBOztBQS9GWTs7OzsifQ==
