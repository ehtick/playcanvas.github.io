/**
 * @license
 * PlayCanvas Engine v1.62.0-dev revision 7d088032c (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { LitOptions } from './lit-options.js';

/**
 * The standard material options define a set of options used to control the shader frontend shader generation,
 * such as textures, tints and multipliers.
 *
 * @property {number} pass Value of {@link Layer#shaderPass} of the Layer being rendered. Must be set to the
 * same in {@link LitOptions#pass}.
 * @property {boolean} forceUv1 If UV1 (second set of texture coordinates) is required in the shader. Will be
 * declared as "vUv1" and passed to the fragment shader.
 * @property {boolean} ambientTint The value of {@link StandardMaterial#ambientTint}.
 * @property {boolean} diffuseTint Defines if {@link StandardMaterial#diffuse} constant should affect diffuse color.
 * @property {boolean} specularTint Defines if {@link StandardMaterial#specular} constant should affect specular
 * color.
 * @property {boolean} metalnessTint Defines if {@link StandardMaterial#metalness} constant should affect metalness
 * value.
 * @property {boolean} glossTint Defines if {@link StandardMaterial#shininess} constant should affect glossiness
 * value.
 * @property {boolean} emissiveTint Defines if {@link StandardMaterial#emissive} constant should affect emission
 * value.
 * @property {boolean} opacityTint Defines if {@link StandardMaterial#opacity} constant should affect opacity value.
 * @property {boolean} packedNormal If normal map contains X in RGB, Y in Alpha, and Z must be reconstructed.
 * @property {boolean} glossInvert Invert the gloss channel.
 * @property {boolean} sheenGlossInvert Invert the sheen gloss channel.
 * @property {boolean} clearCoatGlossInvert Invert the clearcoat gloss channel.
 */
class StandardMaterialOptions {
  constructor() {
    this.chunks = [];
    this._pass = 0;
    this.forceUv1 = false;
    this.ambientTint = false;
    this.diffuseTint = false;
    this.specularTint = false;
    this.metalnessTint = false;
    this.glossTint = false;
    this.emissiveTint = false;
    this.opacityTint = false;
    this.emissiveEncoding = 'linear';
    this.lightMapEncoding = 'linear';
    this.packedNormal = false;
    this.glossInvert = false;
    this.sheenGlossInvert = false;
    this.clearCoatGlossInvert = false;
    this.litOptions = new LitOptions();
  }
  set pass(p) {
    this._pass = p;
    this.litOptions._pass = p;
  }
  get pass() {
    return this._pass;
  }
}

export { StandardMaterialOptions };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmRhcmQtbWF0ZXJpYWwtb3B0aW9ucy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NjZW5lL21hdGVyaWFscy9zdGFuZGFyZC1tYXRlcmlhbC1vcHRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExpdE9wdGlvbnMgfSBmcm9tIFwiLi9saXQtb3B0aW9ucy5qc1wiO1xuXG4vKipcbiAqIFRoZSBzdGFuZGFyZCBtYXRlcmlhbCBvcHRpb25zIGRlZmluZSBhIHNldCBvZiBvcHRpb25zIHVzZWQgdG8gY29udHJvbCB0aGUgc2hhZGVyIGZyb250ZW5kIHNoYWRlciBnZW5lcmF0aW9uLFxuICogc3VjaCBhcyB0ZXh0dXJlcywgdGludHMgYW5kIG11bHRpcGxpZXJzLlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwYXNzIFZhbHVlIG9mIHtAbGluayBMYXllciNzaGFkZXJQYXNzfSBvZiB0aGUgTGF5ZXIgYmVpbmcgcmVuZGVyZWQuIE11c3QgYmUgc2V0IHRvIHRoZVxuICogc2FtZSBpbiB7QGxpbmsgTGl0T3B0aW9ucyNwYXNzfS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZm9yY2VVdjEgSWYgVVYxIChzZWNvbmQgc2V0IG9mIHRleHR1cmUgY29vcmRpbmF0ZXMpIGlzIHJlcXVpcmVkIGluIHRoZSBzaGFkZXIuIFdpbGwgYmVcbiAqIGRlY2xhcmVkIGFzIFwidlV2MVwiIGFuZCBwYXNzZWQgdG8gdGhlIGZyYWdtZW50IHNoYWRlci5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYW1iaWVudFRpbnQgVGhlIHZhbHVlIG9mIHtAbGluayBTdGFuZGFyZE1hdGVyaWFsI2FtYmllbnRUaW50fS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZGlmZnVzZVRpbnQgRGVmaW5lcyBpZiB7QGxpbmsgU3RhbmRhcmRNYXRlcmlhbCNkaWZmdXNlfSBjb25zdGFudCBzaG91bGQgYWZmZWN0IGRpZmZ1c2UgY29sb3IuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNwZWN1bGFyVGludCBEZWZpbmVzIGlmIHtAbGluayBTdGFuZGFyZE1hdGVyaWFsI3NwZWN1bGFyfSBjb25zdGFudCBzaG91bGQgYWZmZWN0IHNwZWN1bGFyXG4gKiBjb2xvci5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbWV0YWxuZXNzVGludCBEZWZpbmVzIGlmIHtAbGluayBTdGFuZGFyZE1hdGVyaWFsI21ldGFsbmVzc30gY29uc3RhbnQgc2hvdWxkIGFmZmVjdCBtZXRhbG5lc3NcbiAqIHZhbHVlLlxuICogQHByb3BlcnR5IHtib29sZWFufSBnbG9zc1RpbnQgRGVmaW5lcyBpZiB7QGxpbmsgU3RhbmRhcmRNYXRlcmlhbCNzaGluaW5lc3N9IGNvbnN0YW50IHNob3VsZCBhZmZlY3QgZ2xvc3NpbmVzc1xuICogdmFsdWUuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGVtaXNzaXZlVGludCBEZWZpbmVzIGlmIHtAbGluayBTdGFuZGFyZE1hdGVyaWFsI2VtaXNzaXZlfSBjb25zdGFudCBzaG91bGQgYWZmZWN0IGVtaXNzaW9uXG4gKiB2YWx1ZS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gb3BhY2l0eVRpbnQgRGVmaW5lcyBpZiB7QGxpbmsgU3RhbmRhcmRNYXRlcmlhbCNvcGFjaXR5fSBjb25zdGFudCBzaG91bGQgYWZmZWN0IG9wYWNpdHkgdmFsdWUuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHBhY2tlZE5vcm1hbCBJZiBub3JtYWwgbWFwIGNvbnRhaW5zIFggaW4gUkdCLCBZIGluIEFscGhhLCBhbmQgWiBtdXN0IGJlIHJlY29uc3RydWN0ZWQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGdsb3NzSW52ZXJ0IEludmVydCB0aGUgZ2xvc3MgY2hhbm5lbC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2hlZW5HbG9zc0ludmVydCBJbnZlcnQgdGhlIHNoZWVuIGdsb3NzIGNoYW5uZWwuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGNsZWFyQ29hdEdsb3NzSW52ZXJ0IEludmVydCB0aGUgY2xlYXJjb2F0IGdsb3NzIGNoYW5uZWwuXG4gKi9cbmNsYXNzIFN0YW5kYXJkTWF0ZXJpYWxPcHRpb25zIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jaHVua3MgPSBbXTtcbiAgICAgICAgdGhpcy5fcGFzcyA9IDA7XG4gICAgICAgIHRoaXMuZm9yY2VVdjEgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hbWJpZW50VGludCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpZmZ1c2VUaW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3BlY3VsYXJUaW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWV0YWxuZXNzVGludCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdsb3NzVGludCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVtaXNzaXZlVGludCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9wYWNpdHlUaW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW1pc3NpdmVFbmNvZGluZyA9ICdsaW5lYXInO1xuICAgICAgICB0aGlzLmxpZ2h0TWFwRW5jb2RpbmcgPSAnbGluZWFyJztcbiAgICAgICAgdGhpcy5wYWNrZWROb3JtYWwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5nbG9zc0ludmVydCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNoZWVuR2xvc3NJbnZlcnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jbGVhckNvYXRHbG9zc0ludmVydCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMubGl0T3B0aW9ucyA9IG5ldyBMaXRPcHRpb25zKCk7XG4gICAgfVxuXG4gICAgc2V0IHBhc3MocCkge1xuICAgICAgICB0aGlzLl9wYXNzID0gcDtcbiAgICAgICAgdGhpcy5saXRPcHRpb25zLl9wYXNzID0gcDtcbiAgICB9XG5cbiAgICBnZXQgcGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bhc3M7XG4gICAgfVxufVxuXG5leHBvcnQgeyBTdGFuZGFyZE1hdGVyaWFsT3B0aW9ucyB9O1xuIl0sIm5hbWVzIjpbIlN0YW5kYXJkTWF0ZXJpYWxPcHRpb25zIiwiY29uc3RydWN0b3IiLCJjaHVua3MiLCJfcGFzcyIsImZvcmNlVXYxIiwiYW1iaWVudFRpbnQiLCJkaWZmdXNlVGludCIsInNwZWN1bGFyVGludCIsIm1ldGFsbmVzc1RpbnQiLCJnbG9zc1RpbnQiLCJlbWlzc2l2ZVRpbnQiLCJvcGFjaXR5VGludCIsImVtaXNzaXZlRW5jb2RpbmciLCJsaWdodE1hcEVuY29kaW5nIiwicGFja2VkTm9ybWFsIiwiZ2xvc3NJbnZlcnQiLCJzaGVlbkdsb3NzSW52ZXJ0IiwiY2xlYXJDb2F0R2xvc3NJbnZlcnQiLCJsaXRPcHRpb25zIiwiTGl0T3B0aW9ucyIsInBhc3MiLCJwIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsdUJBQXVCLENBQUM7QUFDMUJDLEVBQUFBLFdBQVcsR0FBRztJQUNWLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUUsQ0FBQTtJQUNoQixJQUFJLENBQUNDLEtBQUssR0FBRyxDQUFDLENBQUE7SUFDZCxJQUFJLENBQUNDLFFBQVEsR0FBRyxLQUFLLENBQUE7SUFDckIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsS0FBSyxDQUFBO0lBQ3hCLElBQUksQ0FBQ0MsV0FBVyxHQUFHLEtBQUssQ0FBQTtJQUN4QixJQUFJLENBQUNDLFlBQVksR0FBRyxLQUFLLENBQUE7SUFDekIsSUFBSSxDQUFDQyxhQUFhLEdBQUcsS0FBSyxDQUFBO0lBQzFCLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEtBQUssQ0FBQTtJQUN0QixJQUFJLENBQUNDLFlBQVksR0FBRyxLQUFLLENBQUE7SUFDekIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsS0FBSyxDQUFBO0lBQ3hCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsUUFBUSxDQUFBO0lBQ2hDLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsUUFBUSxDQUFBO0lBQ2hDLElBQUksQ0FBQ0MsWUFBWSxHQUFHLEtBQUssQ0FBQTtJQUN6QixJQUFJLENBQUNDLFdBQVcsR0FBRyxLQUFLLENBQUE7SUFDeEIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUE7SUFDN0IsSUFBSSxDQUFDQyxvQkFBb0IsR0FBRyxLQUFLLENBQUE7QUFFakMsSUFBQSxJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJQyxVQUFVLEVBQUUsQ0FBQTtBQUN0QyxHQUFBO0VBRUEsSUFBSUMsSUFBSSxDQUFDQyxDQUFDLEVBQUU7SUFDUixJQUFJLENBQUNsQixLQUFLLEdBQUdrQixDQUFDLENBQUE7QUFDZCxJQUFBLElBQUksQ0FBQ0gsVUFBVSxDQUFDZixLQUFLLEdBQUdrQixDQUFDLENBQUE7QUFDN0IsR0FBQTtBQUVBLEVBQUEsSUFBSUQsSUFBSSxHQUFHO0lBQ1AsT0FBTyxJQUFJLENBQUNqQixLQUFLLENBQUE7QUFDckIsR0FBQTtBQUNKOzs7OyJ9
