/**
 * @license
 * PlayCanvas Engine v1.62.0-dev revision 7d088032c (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { Color } from '../../core/math/color.js';
import { DebugGraphics } from './debug-graphics.js';

class ColorAttachmentOps {
  constructor() {
    this.clearValue = new Color(0, 0, 0, 1);
    this.clear = false;
    this.store = false;
    this.resolve = true;
    this.mipmaps = false;
  }
}
class DepthStencilAttachmentOps {
  constructor() {
    this.clearDepthValue = 1;
    this.clearStencilValue = 0;
    this.clearDepth = false;
    this.clearStencil = false;
    this.storeDepth = false;
    this.storeStencil = false;
  }
}

/**
 * A render pass represents a node in the frame graph, and encapsulates a system which
 * renders to a render target using an execution callback.
 *
 * @ignore
 */
class RenderPass {
  /** @type {string} */

  /** @type {import('../graphics/render-target.js').RenderTarget} */

  /**
   * Number of samples. 0 if no render target, otherwise number of samples from the render target,
   * or the main framebuffer if render target is null.
   *
   * @type {number}
   */

  /** @type {ColorAttachmentOps} */

  /** @type {DepthStencilAttachmentOps} */

  /**
   * If true, this pass might use dynamically rendered cubemaps. Use for a case where rendering to cubemap
   * faces is interleaved with rendering to shadows, to avoid generating cubemap mipmaps. This will likely
   * be retired when render target dependency tracking gets implemented.
   *
   * @type {boolean}
   */

  /**
   * True if the render pass uses the full viewport / scissor for rendering into the render target.
   *
   * @type {boolean}
   */

  /**
   * Custom function that is called before the pass has started.
   *
   * @type {Function}
   */

  /**
   * Custom function that is called after the pass has fnished.
   *
   * @type {Function}
   */

  /**
   * Creates an instance of the RenderPass.
   *
   * @param {import('../graphics/graphics-device.js').GraphicsDevice} graphicsDevice - The
   * graphics device.
   * @param {Function} execute - Custom function that is called when the pass needs to be
   * rendered.
   */
  constructor(graphicsDevice, execute) {
    this.name = void 0;
    this.renderTarget = void 0;
    this.samples = 0;
    this.colorOps = void 0;
    this.depthStencilOps = void 0;
    this.requiresCubemaps = true;
    this.fullSizeClearRect = true;
    this.before = void 0;
    this.after = void 0;
    this.device = graphicsDevice;

    /** @type {Function} */
    this.execute = execute;
  }

  /**
   * @param {import('../graphics/render-target.js').RenderTarget} renderTarget - The render
   * target to render into (output). This function should be called only for render passes which
   * use render target, or passes which render directly into the default framebuffer, in which
   * case a null or undefined render target is expected.
   */
  init(renderTarget) {
    var _this$renderTarget, _this$renderTarget$co;
    // null represents the default framebuffer
    this.renderTarget = renderTarget || null;

    // allocate ops only when render target is used
    this.colorOps = new ColorAttachmentOps();
    this.depthStencilOps = new DepthStencilAttachmentOps();

    // defaults depend on multisampling
    this.samples = Math.max(this.renderTarget ? this.renderTarget.samples : this.device.samples, 1);

    // if rendering to single-sampled buffer, this buffer needs to be stored
    if (this.samples === 1) {
      this.colorOps.store = true;
      this.colorOps.resolve = false;
    }

    // if render target needs mipmaps
    if ((_this$renderTarget = this.renderTarget) != null && (_this$renderTarget$co = _this$renderTarget.colorBuffer) != null && _this$renderTarget$co.mipmaps) {
      this.colorOps.mipmaps = true;
    }
  }

  /**
   * Mark render pass as clearing the full color buffer.
   *
   * @param {Color} color - The color to clear to.
   */
  setClearColor(color) {
    this.colorOps.clearValue.copy(color);
    this.colorOps.clear = true;
  }

  /**
   * Mark render pass as clearing the full depth buffer.
   *
   * @param {number} depthValue - The depth value to clear to.
   */
  setClearDepth(depthValue) {
    this.depthStencilOps.clearDepthValue = depthValue;
    this.depthStencilOps.clearDepth = true;
  }

  /**
   * Mark render pass as clearing the full stencil buffer.
   *
   * @param {number} stencilValue - The stencil value to clear to.
   */
  setClearStencil(stencilValue) {
    this.depthStencilOps.clearStencilValue = stencilValue;
    this.depthStencilOps.clearStencil = true;
  }

  /**
   * Render the render pass
   */
  render() {
    var _this$before, _this$after;
    const device = this.device;
    const realPass = this.renderTarget !== undefined;
    DebugGraphics.pushGpuMarker(device, `Pass:${this.name}`);
    (_this$before = this.before) == null ? void 0 : _this$before.call(this);
    if (realPass) {
      device.startPass(this);
    }
    this.execute();
    if (realPass) {
      device.endPass(this);
    }
    (_this$after = this.after) == null ? void 0 : _this$after.call(this);
    DebugGraphics.popGpuMarker(device);
  }
}

export { ColorAttachmentOps, DepthStencilAttachmentOps, RenderPass };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
