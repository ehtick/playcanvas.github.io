/**
 * @license
 * PlayCanvas Engine v1.59.0-preview revision 797466563 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { TRACEID_BINDGROUPFORMAT_ALLOC } from '../../core/constants.js';
import { DebugHelper, Debug } from '../../core/debug.js';
import { TEXTUREDIMENSION_2D, SAMPLETYPE_FLOAT, SAMPLETYPE_DEPTH, TEXTUREDIMENSION_CUBE, TEXTUREDIMENSION_3D } from './constants.js';

let id = 0;
const textureDimensionInfo = {
  [TEXTUREDIMENSION_2D]: 'texture2D',
  [TEXTUREDIMENSION_CUBE]: 'textureCube',
  [TEXTUREDIMENSION_3D]: 'texture3D'
};

class BindBufferFormat {
  constructor(name, visibility) {
    this.name = name;

    this.visibility = visibility;
  }
}

class BindTextureFormat {

  constructor(name, visibility, textureDimension = TEXTUREDIMENSION_2D, sampleType = SAMPLETYPE_FLOAT) {
    this.scopeId = void 0;
    this.name = name;

    this.visibility = visibility;

    this.textureDimension = textureDimension;

    this.sampleType = sampleType;
  }
}

class BindGroupFormat {
  constructor(graphicsDevice, bufferFormats, textureFormats) {
    this.id = id++;
    DebugHelper.setName(this, `BindGroupFormat_${this.id}`);

    this.device = graphicsDevice;

    this.bufferFormats = bufferFormats;

    this.bufferFormatsMap = new Map();
    bufferFormats.forEach((bf, i) => this.bufferFormatsMap.set(bf.name, i));

    this.textureFormats = textureFormats;
    const scope = graphicsDevice.scope;

    this.textureFormatsMap = new Map();
    textureFormats.forEach((tf, i) => {
      this.textureFormatsMap.set(tf.name, i);

      tf.scopeId = scope.resolve(tf.name);
    });
    this.impl = graphicsDevice.createBindGroupFormatImpl(this);
    Debug.trace(TRACEID_BINDGROUPFORMAT_ALLOC, `Alloc: Id ${this.id}`, this);
  }

  destroy() {
    this.impl.destroy();
  }

  getTexture(name) {
    const index = this.textureFormatsMap.get(name);
    if (index !== undefined) {
      return this.textureFormats[index];
    }
    return null;
  }
  getShaderDeclarationTextures(bindGroup) {
    let code = '';
    let bindIndex = this.bufferFormats.length;
    this.textureFormats.forEach(format => {
      const textureType = textureDimensionInfo[format.textureDimension];
      Debug.assert(textureType, "Unsupported texture type");

      Debug.assert(format.sampleType !== SAMPLETYPE_DEPTH, format);
      code += `layout(set = ${bindGroup}, binding = ${bindIndex++}) uniform ${textureType} ${format.name};\n` + `layout(set = ${bindGroup}, binding = ${bindIndex++}) uniform sampler ${format.name}_sampler;\n`;
    });
    return code;
  }
  loseContext() {
  }
}

export { BindBufferFormat, BindGroupFormat, BindTextureFormat };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
