import { Debug } from '../../core/debug.js';
import { pixelFormatInfo, PIXELFORMAT_PVRTC_2BPP_RGB_1, PIXELFORMAT_PVRTC_2BPP_RGBA_1 } from './constants.js';

/**
 * A class providing utility functions for textures.
 *
 * @ignore
 */
class TextureUtils {
  /**
   * Calculate the dimension of a texture at a specific mip level.
   *
   * @param {number} dimension - Texture dimension at level 0.
   * @param {number} mipLevel - Mip level.
   * @returns {number} The dimension of the texture at the specified mip level.
   */
  static calcLevelDimension(dimension, mipLevel) {
    return Math.max(dimension >> mipLevel, 1);
  }

  /**
   * Calculate the size in bytes of the texture level given its format and dimensions.
   *
   * @param {number} width - Texture's width.
   * @param {number} height - Texture's height.
   * @param {number} format - Texture's pixel format PIXELFORMAT_***.
   * @returns {number} The number of bytes of GPU memory required for the texture.
   * @ignore
   */
  static calcLevelGpuSize(width, height, format) {
    var _pixelFormatInfo$get$, _pixelFormatInfo$get, _formatInfo$blockSize;
    const formatInfo = pixelFormatInfo.get(format);
    Debug.assert(formatInfo !== undefined, `Invalid pixel format ${format}`);
    const pixelSize = (_pixelFormatInfo$get$ = (_pixelFormatInfo$get = pixelFormatInfo.get(format)) == null ? void 0 : _pixelFormatInfo$get.size) != null ? _pixelFormatInfo$get$ : 0;
    if (pixelSize > 0) {
      return width * height * pixelSize;
    }
    const blockSize = (_formatInfo$blockSize = formatInfo.blockSize) != null ? _formatInfo$blockSize : 0;
    let blockWidth = Math.floor((width + 3) / 4);
    const blockHeight = Math.floor((height + 3) / 4);
    if (format === PIXELFORMAT_PVRTC_2BPP_RGB_1 || format === PIXELFORMAT_PVRTC_2BPP_RGBA_1) {
      blockWidth = Math.max(Math.floor(blockWidth / 2), 1);
    }
    return blockWidth * blockHeight * blockSize;
  }

  /**
   * Calculate the GPU memory required for a texture.
   *
   * @param {number} width - Texture's width.
   * @param {number} height - Texture's height.
   * @param {number} depth - Texture's depth.
   * @param {number} format - Texture's pixel format PIXELFORMAT_***.
   * @param {boolean} mipmaps - True if the texture includes mipmaps, false otherwise.
   * @param {boolean} cubemap - True is the texture is a cubemap, false otherwise.
   * @returns {number} The number of bytes of GPU memory required for the texture.
   * @ignore
   */
  static calcGpuSize(width, height, depth, format, mipmaps, cubemap) {
    let result = 0;
    while (1) {
      result += TextureUtils.calcLevelGpuSize(width, height, format);

      // we're done if mipmaps aren't required or we've calculated the smallest mipmap level
      if (!mipmaps || width === 1 && height === 1 && depth === 1) {
        break;
      }
      width = Math.max(width >> 1, 1);
      height = Math.max(height >> 1, 1);
      depth = Math.max(depth >> 1, 1);
    }
    return result * (cubemap ? 6 : 1);
  }
}

export { TextureUtils };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHVyZS11dGlscy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BsYXRmb3JtL2dyYXBoaWNzL3RleHR1cmUtdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcgfSBmcm9tICcuLi8uLi9jb3JlL2RlYnVnLmpzJztcbmltcG9ydCB7XG4gICAgcGl4ZWxGb3JtYXRJbmZvLFxuICAgIFBJWEVMRk9STUFUX1BWUlRDXzJCUFBfUkdCXzEsIFBJWEVMRk9STUFUX1BWUlRDXzJCUFBfUkdCQV8xXG59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBBIGNsYXNzIHByb3ZpZGluZyB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgdGV4dHVyZXMuXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBUZXh0dXJlVXRpbHMge1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgZGltZW5zaW9uIG9mIGEgdGV4dHVyZSBhdCBhIHNwZWNpZmljIG1pcCBsZXZlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaW1lbnNpb24gLSBUZXh0dXJlIGRpbWVuc2lvbiBhdCBsZXZlbCAwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaXBMZXZlbCAtIE1pcCBsZXZlbC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgZGltZW5zaW9uIG9mIHRoZSB0ZXh0dXJlIGF0IHRoZSBzcGVjaWZpZWQgbWlwIGxldmVsLlxuICAgICAqL1xuICAgIHN0YXRpYyBjYWxjTGV2ZWxEaW1lbnNpb24oZGltZW5zaW9uLCBtaXBMZXZlbCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoZGltZW5zaW9uID4+IG1pcExldmVsLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIHNpemUgaW4gYnl0ZXMgb2YgdGhlIHRleHR1cmUgbGV2ZWwgZ2l2ZW4gaXRzIGZvcm1hdCBhbmQgZGltZW5zaW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRleHR1cmUncyB3aWR0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGV4dHVyZSdzIGhlaWdodC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZm9ybWF0IC0gVGV4dHVyZSdzIHBpeGVsIGZvcm1hdCBQSVhFTEZPUk1BVF8qKiouXG4gICAgICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWJlciBvZiBieXRlcyBvZiBHUFUgbWVtb3J5IHJlcXVpcmVkIGZvciB0aGUgdGV4dHVyZS5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgc3RhdGljIGNhbGNMZXZlbEdwdVNpemUod2lkdGgsIGhlaWdodCwgZm9ybWF0KSB7XG5cbiAgICAgICAgY29uc3QgZm9ybWF0SW5mbyA9IHBpeGVsRm9ybWF0SW5mby5nZXQoZm9ybWF0KTtcbiAgICAgICAgRGVidWcuYXNzZXJ0KGZvcm1hdEluZm8gIT09IHVuZGVmaW5lZCwgYEludmFsaWQgcGl4ZWwgZm9ybWF0ICR7Zm9ybWF0fWApO1xuXG4gICAgICAgIGNvbnN0IHBpeGVsU2l6ZSA9IHBpeGVsRm9ybWF0SW5mby5nZXQoZm9ybWF0KT8uc2l6ZSA/PyAwO1xuICAgICAgICBpZiAocGl4ZWxTaXplID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpZHRoICogaGVpZ2h0ICogcGl4ZWxTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYmxvY2tTaXplID0gZm9ybWF0SW5mby5ibG9ja1NpemUgPz8gMDtcbiAgICAgICAgbGV0IGJsb2NrV2lkdGggPSBNYXRoLmZsb29yKCh3aWR0aCArIDMpIC8gNCk7XG4gICAgICAgIGNvbnN0IGJsb2NrSGVpZ2h0ID0gTWF0aC5mbG9vcigoaGVpZ2h0ICsgMykgLyA0KTtcblxuICAgICAgICBpZiAoZm9ybWF0ID09PSBQSVhFTEZPUk1BVF9QVlJUQ18yQlBQX1JHQl8xIHx8XG4gICAgICAgICAgICBmb3JtYXQgPT09IFBJWEVMRk9STUFUX1BWUlRDXzJCUFBfUkdCQV8xKSB7XG4gICAgICAgICAgICBibG9ja1dpZHRoID0gTWF0aC5tYXgoTWF0aC5mbG9vcihibG9ja1dpZHRoIC8gMiksIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJsb2NrV2lkdGggKiBibG9ja0hlaWdodCAqIGJsb2NrU2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIEdQVSBtZW1vcnkgcmVxdWlyZWQgZm9yIGEgdGV4dHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRleHR1cmUncyB3aWR0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGV4dHVyZSdzIGhlaWdodC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggLSBUZXh0dXJlJ3MgZGVwdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZvcm1hdCAtIFRleHR1cmUncyBwaXhlbCBmb3JtYXQgUElYRUxGT1JNQVRfKioqLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbWlwbWFwcyAtIFRydWUgaWYgdGhlIHRleHR1cmUgaW5jbHVkZXMgbWlwbWFwcywgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY3ViZW1hcCAtIFRydWUgaXMgdGhlIHRleHR1cmUgaXMgYSBjdWJlbWFwLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWJlciBvZiBieXRlcyBvZiBHUFUgbWVtb3J5IHJlcXVpcmVkIGZvciB0aGUgdGV4dHVyZS5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgc3RhdGljIGNhbGNHcHVTaXplKHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBmb3JtYXQsIG1pcG1hcHMsIGN1YmVtYXApIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IDA7XG5cbiAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBUZXh0dXJlVXRpbHMuY2FsY0xldmVsR3B1U2l6ZSh3aWR0aCwgaGVpZ2h0LCBmb3JtYXQpO1xuXG4gICAgICAgICAgICAvLyB3ZSdyZSBkb25lIGlmIG1pcG1hcHMgYXJlbid0IHJlcXVpcmVkIG9yIHdlJ3ZlIGNhbGN1bGF0ZWQgdGhlIHNtYWxsZXN0IG1pcG1hcCBsZXZlbFxuICAgICAgICAgICAgaWYgKCFtaXBtYXBzIHx8ICgod2lkdGggPT09IDEpICYmIChoZWlnaHQgPT09IDEpICYmIChkZXB0aCA9PT0gMSkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aWR0aCA9IE1hdGgubWF4KHdpZHRoID4+IDEsIDEpO1xuICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0ID4+IDEsIDEpO1xuICAgICAgICAgICAgZGVwdGggPSBNYXRoLm1heChkZXB0aCA+PiAxLCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQgKiAoY3ViZW1hcCA/IDYgOiAxKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRleHR1cmVVdGlscyB9O1xuIl0sIm5hbWVzIjpbIlRleHR1cmVVdGlscyIsImNhbGNMZXZlbERpbWVuc2lvbiIsImRpbWVuc2lvbiIsIm1pcExldmVsIiwiTWF0aCIsIm1heCIsImNhbGNMZXZlbEdwdVNpemUiLCJ3aWR0aCIsImhlaWdodCIsImZvcm1hdCIsIl9waXhlbEZvcm1hdEluZm8kZ2V0JCIsIl9waXhlbEZvcm1hdEluZm8kZ2V0IiwiX2Zvcm1hdEluZm8kYmxvY2tTaXplIiwiZm9ybWF0SW5mbyIsInBpeGVsRm9ybWF0SW5mbyIsImdldCIsIkRlYnVnIiwiYXNzZXJ0IiwidW5kZWZpbmVkIiwicGl4ZWxTaXplIiwic2l6ZSIsImJsb2NrU2l6ZSIsImJsb2NrV2lkdGgiLCJmbG9vciIsImJsb2NrSGVpZ2h0IiwiUElYRUxGT1JNQVRfUFZSVENfMkJQUF9SR0JfMSIsIlBJWEVMRk9STUFUX1BWUlRDXzJC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
