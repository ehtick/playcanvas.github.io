import { Debug } from '../../core/debug.js';

/**
 * @ignore
 */
class GpuProfiler {
  constructor() {
    /**
     * @type {Map<string, number>}
     */
    this.namesMap = new Map();
    /**
     * @type {string[]}
     */
    this.indexedNames = [];
    /** @type {number[]} */
    this.frameAllocations = [];
    this.pastFrameAllocations = new Map();
  }
  destroy() {}
  frameEnd(renderVersion) {
    this.pastFrameAllocations.set(renderVersion, this.frameAllocations);
    this.frameAllocations = [];
  }
  report(renderVersion, timings) {
    const allocations = this.pastFrameAllocations.get(renderVersion);
    Debug.assert(allocations.length === timings.length);
    if (!(renderVersion % 100)) {
      console.log(`------------- Frame ${renderVersion}:`);
      for (let i = 0; i < allocations.length; ++i) {
        const name = this.indexedNames[allocations[i]];
        console.log(`    ${name}: ${timings[i]} ms`);
      }
    }
    // remove
    this.pastFrameAllocations.delete(renderVersion);
  }
  getNameIndex(name) {
    let index = this.namesMap.get(name);
    if (index === undefined) {
      index = this.namesMap.size;
      this.namesMap.set(name, index);
      this.indexedNames[index] = name;
    }
    return index;
  }
  getSlot(name) {
    const nameIndex = this.getNameIndex(name);
    const slot = this.frameAllocations.length;
    this.frameAllocations.push(nameIndex);
    return slot;
  }
  get slotCount() {
    return this.frameAllocations.length;
  }
}

export { GpuProfiler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3B1LXByb2ZpbGVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGxhdGZvcm0vZ3JhcGhpY3MvZ3B1LXByb2ZpbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnIH0gZnJvbSBcIi4uLy4uL2NvcmUvZGVidWcuanNcIjtcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIEdwdVByb2ZpbGVyIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TWFwPHN0cmluZywgbnVtYmVyPn1cbiAgICAgKi9cbiAgICBuYW1lc01hcCA9IG5ldyBNYXAoKTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmdbXX1cbiAgICAgKi9cbiAgICBpbmRleGVkTmFtZXMgPSBbXTtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyW119ICovXG4gICAgZnJhbWVBbGxvY2F0aW9ucyA9IFtdO1xuXG4gICAgcGFzdEZyYW1lQWxsb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG5cbiAgICBkZXN0cm95KCkge1xuICAgIH1cblxuICAgIGZyYW1lRW5kKHJlbmRlclZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5wYXN0RnJhbWVBbGxvY2F0aW9ucy5zZXQocmVuZGVyVmVyc2lvbiwgdGhpcy5mcmFtZUFsbG9jYXRpb25zKTtcbiAgICAgICAgdGhpcy5mcmFtZUFsbG9jYXRpb25zID0gW107XG4gICAgfVxuXG4gICAgcmVwb3J0KHJlbmRlclZlcnNpb24sIHRpbWluZ3MpIHtcbiAgICAgICAgY29uc3QgYWxsb2NhdGlvbnMgPSB0aGlzLnBhc3RGcmFtZUFsbG9jYXRpb25zLmdldChyZW5kZXJWZXJzaW9uKTtcbiAgICAgICAgRGVidWcuYXNzZXJ0KGFsbG9jYXRpb25zLmxlbmd0aCA9PT0gdGltaW5ncy5sZW5ndGgpO1xuXG4gICAgICAgIGlmICghKHJlbmRlclZlcnNpb24gJSAxMDApKSB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAtLS0tLS0tLS0tLS0tIEZyYW1lICR7cmVuZGVyVmVyc2lvbn06YCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbG9jYXRpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuaW5kZXhlZE5hbWVzW2FsbG9jYXRpb25zW2ldXTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgICAgICR7bmFtZX06ICR7dGltaW5nc1tpXX0gbXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyByZW1vdmVcbiAgICAgICAgdGhpcy5wYXN0RnJhbWVBbGxvY2F0aW9ucy5kZWxldGUocmVuZGVyVmVyc2lvbik7XG4gICAgfVxuXG4gICAgZ2V0TmFtZUluZGV4KG5hbWUpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5uYW1lc01hcC5nZXQobmFtZSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmRleCA9IHRoaXMubmFtZXNNYXAuc2l6ZTtcbiAgICAgICAgICAgIHRoaXMubmFtZXNNYXAuc2V0KG5hbWUsIGluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuaW5kZXhlZE5hbWVzW2luZGV4XSA9IG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cblxuICAgIGdldFNsb3QobmFtZSkge1xuICAgICAgICBjb25zdCBuYW1lSW5kZXggPSB0aGlzLmdldE5hbWVJbmRleChuYW1lKTtcbiAgICAgICAgY29uc3Qgc2xvdCA9IHRoaXMuZnJhbWVBbGxvY2F0aW9ucy5sZW5ndGg7XG4gICAgICAgIHRoaXMuZnJhbWVBbGxvY2F0aW9ucy5wdXNoKG5hbWVJbmRleCk7XG4gICAgICAgIHJldHVybiBzbG90O1xuICAgIH1cblxuICAgIGdldCBzbG90Q291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyYW1lQWxsb2NhdGlvbnMubGVuZ3RoO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgR3B1UHJvZmlsZXIgfTtcbiJdLCJuYW1lcyI6WyJHcHVQcm9maWxlciIsImNvbnN0cnVjdG9yIiwibmFtZXNNYXAiLCJNYXAiLCJpbmRleGVkTmFtZXMiLCJmcmFtZUFsbG9jYXRpb25zIiwicGFzdEZyYW1lQWxsb2NhdGlvbnMiLCJkZXN0cm95IiwiZnJhbWVFbmQiLCJyZW5kZXJWZXJzaW9uIiwic2V0IiwicmVwb3J0IiwidGltaW5ncyIsImFsbG9jYXRpb25zIiwiZ2V0IiwiRGVidWciLCJhc3NlcnQiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwiaSIsIm5hbWUiLCJkZWxldGUiLCJnZXROYW1lSW5kZXgiLCJpbmRleCIsInVuZGVmaW5lZCIsInNpemUiLCJnZXRTbG90IiwibmFtZUluZGV4Iiwic2xvdCIsInB1c2giLCJzbG90Q291bnQiXSwibWFwcGluZ3MiOiI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsV0FBVyxDQUFDO0VBQUFDLFdBQUEsR0FBQTtBQUNkO0FBQ0o7QUFDQTtBQUZJLElBQUEsSUFBQSxDQUdBQyxRQUFRLEdBQUcsSUFBSUMsR0FBRyxFQUFFLENBQUE7QUFFcEI7QUFDSjtBQUNBO0lBRkksSUFHQUMsQ0FBQUEsWUFBWSxHQUFHLEVBQUUsQ0FBQTtBQUVqQjtJQUFBLElBQ0FDLENBQUFBLGdCQUFnQixHQUFHLEVBQUUsQ0FBQTtBQUFBLElBQUEsSUFBQSxDQUVyQkMsb0JBQW9CLEdBQUcsSUFBSUgsR0FBRyxFQUFFLENBQUE7QUFBQSxHQUFBO0VBRWhDSSxPQUFPQSxHQUFHLEVBQ1Y7RUFFQUMsUUFBUUEsQ0FBQ0MsYUFBYSxFQUFFO0lBQ3BCLElBQUksQ0FBQ0gsb0JBQW9CLENBQUNJLEdBQUcsQ0FBQ0QsYUFBYSxFQUFFLElBQUksQ0FBQ0osZ0JBQWdCLENBQUMsQ0FBQTtJQUNuRSxJQUFJLENBQUNBLGdCQUFnQixHQUFHLEVBQUUsQ0FBQTtBQUM5QixHQUFBO0FBRUFNLEVBQUFBLE1BQU1BLENBQUNGLGFBQWEsRUFBRUcsT0FBTyxFQUFFO0lBQzNCLE1BQU1DLFdBQVcsR0FBRyxJQUFJLENBQUNQLG9CQUFvQixDQUFDUSxHQUFHLENBQUNMLGFBQWEsQ0FBQyxDQUFBO0lBQ2hFTSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0gsV0FBVyxDQUFDSSxNQUFNLEtBQUtMLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDLENBQUE7QUFFbkQsSUFBQSxJQUFJLEVBQUVSLGFBQWEsR0FBRyxHQUFHLENBQUMsRUFBRTtBQUV4QlMsTUFBQUEsT0FBTyxDQUFDQyxHQUFHLENBQUUsQ0FBc0JWLG9CQUFBQSxFQUFBQSxhQUFjLEdBQUUsQ0FBQyxDQUFBO0FBQ3BELE1BQUEsS0FBSyxJQUFJVyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdQLFdBQVcsQ0FBQ0ksTUFBTSxFQUFFLEVBQUVHLENBQUMsRUFBRTtRQUN6QyxNQUFNQyxJQUFJLEdBQUcsSUFBSSxDQUFDakIsWUFBWSxDQUFDUyxXQUFXLENBQUNPLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDOUNGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLENBQU1FLElBQUFBLEVBQUFBLElBQUssQ0FBSVQsRUFBQUEsRUFBQUEsT0FBTyxDQUFDUSxDQUFDLENBQUUsQ0FBQSxHQUFBLENBQUksQ0FBQyxDQUFBO0FBQ2hELE9BQUE7QUFDSixLQUFBO0FBQ0E7QUFDQSxJQUFBLElBQUksQ0FBQ2Qsb0JBQW9CLENBQUNnQixNQUFNLENBQUNiLGFBQWEsQ0FBQyxDQUFBO0FBQ25ELEdBQUE7RUFFQWMsWUFBWUEsQ0FBQ0YsSUFBSSxFQUFFO0lBQ2YsSUFBSUcsS0FBSyxHQUFHLElBQUksQ0FBQ3RCLFFBQVEsQ0FBQ1ksR0FBRyxDQUFDTyxJQUFJLENBQUMsQ0FBQTtJQUNuQyxJQUFJRyxLQUFLLEtBQUtDLFNBQVMsRUFBRTtBQUNyQkQsTUFBQUEsS0FBSyxHQUFHLElBQUksQ0FBQ3RCLFFBQVEsQ0FBQ3dCLElBQUksQ0FBQTtNQUMxQixJQUFJLENBQUN4QixRQUFRLENBQUNRLEdBQUcsQ0FBQ1csSUFBSSxFQUFFRyxLQUFLLENBQUMsQ0FBQTtBQUM5QixNQUFBLElBQUksQ0FBQ3BCLFlBQVksQ0FBQ29CLEtBQUssQ0FBQyxHQUFHSCxJQUFJLENBQUE7QUFDbkMsS0FBQTtBQUNBLElBQUEsT0FBT0csS0FBSyxDQUFBO0FBQ2hCLEdBQUE7RUFFQUcsT0FBT0EsQ0FBQ04sSUFBSSxFQUFFO0FBQ1YsSUFBQSxNQUFNTyxTQUFTLEdBQUcsSUFBSSxDQUFDTCxZQUFZLENBQUNGLElBQUksQ0FBQyxDQUFBO0FBQ3pDLElBQUEsTUFBTVEsSUFBSSxHQUFHLElBQUksQ0FBQ3hCLGdCQUFnQixDQUFDWSxNQUFNLENBQUE7QUFDekMsSUFBQSxJQUFJLENBQUNaLGdCQUFnQixDQUFDeUIsSUFBSSxDQUFDRixTQUFTLENBQUMsQ0FBQTtBQUNyQyxJQUFBLE9BQU9DLElBQUksQ0FBQTtBQUNmLEdBQUE7RUFFQSxJQUFJRSxTQUFTQSxHQUFHO0FBQ1osSUFBQSxPQUFPLElBQUksQ0FBQzFCLGdCQUFnQixDQUFDWSxNQUFNLENBQUE7QUFDdkMsR0FBQTtBQUNKOzs7OyJ9
