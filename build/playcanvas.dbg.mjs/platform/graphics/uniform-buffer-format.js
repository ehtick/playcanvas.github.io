/**
 * @license
 * PlayCanvas Engine v1.62.0-dev revision 7d088032c (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../../core/debug.js';
import { math } from '../../core/math/math.js';
import { uniformTypeToName, UNIFORMTYPE_MAT4, UNIFORMTYPE_MAT4ARRAY, UNIFORMTYPE_VEC4, UNIFORMTYPE_VEC4ARRAY, UNIFORMTYPE_VEC3, UNIFORMTYPE_VEC3ARRAY, UNIFORMTYPE_VEC2, UNIFORMTYPE_VEC2ARRAY, UNIFORMTYPE_FLOAT, UNIFORMTYPE_FLOATARRAY, bindGroupNames, UNIFORMTYPE_INT, UNIFORMTYPE_IVEC2, UNIFORMTYPE_IVEC3, UNIFORMTYPE_IVEC4, UNIFORMTYPE_BOOL, UNIFORMTYPE_BVEC2, UNIFORMTYPE_BVEC3, UNIFORMTYPE_BVEC4, UNIFORMTYPE_MAT2, UNIFORMTYPE_MAT3 } from './constants.js';

// map of UNIFORMTYPE_*** to number of 32bit elements
const uniformTypeToNumElements = [];
uniformTypeToNumElements[UNIFORMTYPE_FLOAT] = 1;
uniformTypeToNumElements[UNIFORMTYPE_VEC2] = 2;
uniformTypeToNumElements[UNIFORMTYPE_VEC3] = 3;
uniformTypeToNumElements[UNIFORMTYPE_VEC4] = 4;
uniformTypeToNumElements[UNIFORMTYPE_INT] = 1;
uniformTypeToNumElements[UNIFORMTYPE_IVEC2] = 2;
uniformTypeToNumElements[UNIFORMTYPE_IVEC3] = 3;
uniformTypeToNumElements[UNIFORMTYPE_IVEC4] = 4;
uniformTypeToNumElements[UNIFORMTYPE_BOOL] = 1;
uniformTypeToNumElements[UNIFORMTYPE_BVEC2] = 2;
uniformTypeToNumElements[UNIFORMTYPE_BVEC3] = 3;
uniformTypeToNumElements[UNIFORMTYPE_BVEC4] = 4;
uniformTypeToNumElements[UNIFORMTYPE_MAT2] = 8; // 2 x vec4
uniformTypeToNumElements[UNIFORMTYPE_MAT3] = 12; // 3 x vec4
uniformTypeToNumElements[UNIFORMTYPE_MAT4] = 16; // 4 x vec4

/**
 * A class storing description of an individual uniform, stored inside a uniform buffer.
 *
 * @ignore
 */
class UniformFormat {
  /** @type {string} */

  // UNIFORMTYPE_***
  /** @type {number} */

  /** @type {number} */

  /**
   * Index of the uniform in an array of 32bit values (Float32Array and similar)
   *
   * @type {number}
   */

  /** @type {import('./scope-id.js').ScopeId} */

  /**
   * Count of elements for arrays, otherwise 1.
   *
   * @type {number}
   */

  constructor(name, type, count = 1) {
    this.name = void 0;
    this.type = void 0;
    this.byteSize = void 0;
    this.offset = void 0;
    this.scopeId = void 0;
    this.count = void 0;
    // just a name
    this.shortName = name;

    // name with [0] if this is an array
    this.name = count > 1 ? `${name}[0]` : name;
    this.type = type;
    this.updateType = type;
    if (count > 1) {
      switch (type) {
        case UNIFORMTYPE_FLOAT:
          this.updateType = UNIFORMTYPE_FLOATARRAY;
          break;
        case UNIFORMTYPE_VEC2:
          this.updateType = UNIFORMTYPE_VEC2ARRAY;
          break;
        case UNIFORMTYPE_VEC3:
          this.updateType = UNIFORMTYPE_VEC3ARRAY;
          break;
        case UNIFORMTYPE_VEC4:
          this.updateType = UNIFORMTYPE_VEC4ARRAY;
          break;
        case UNIFORMTYPE_MAT4:
          this.updateType = UNIFORMTYPE_MAT4ARRAY;
          break;
        default:
          Debug.error(`Uniform array of type ${uniformTypeToName[type]} is not supported when processing uniform '${name}'.`);
          Debug.call(() => {
            this.invalid = true;
          });
          break;
      }
    }
    this.count = count;
    Debug.assert(!isNaN(count), `Unsupported uniform: ${name}[${count}]`);
    Debug.call(() => {
      if (isNaN(count)) this.invalid = true;
    });
    let elementSize = uniformTypeToNumElements[type];
    Debug.assert(elementSize, `Unhandled uniform format ${type} used for ${name}`);

    // element size for arrays is aligned up to vec4
    if (count > 1) elementSize = math.roundUp(elementSize, 4);
    this.byteSize = count * elementSize * 4;
    Debug.assert(this.byteSize, `Unknown byte size for uniform format ${type} used for ${name}`);
  }

  // std140 rules: https://registry.khronos.org/OpenGL/specs/gl/glspec45.core.pdf#page=159
  // TODO: this support limited subset of functionality, arrays and structs are not supported.
  calculateOffset(offset) {
    // Note: vec3 has the same alignment as vec4
    let alignment = this.byteSize <= 8 ? this.byteSize : 16;

    // arrays have vec4 alignments
    if (this.count > 1) alignment = 16;

    // align the start offset
    offset = math.roundUp(offset, alignment);
    this.offset = offset / 4;
  }
}

/**
 * A descriptor that defines the layout of of data inside the {@link UniformBuffer}.
 *
 * @ignore
 */
class UniformBufferFormat {
  /** @type {number} */

  /** @type {Map<string,UniformFormat>} */

  /**
   * Create a new UniformBufferFormat instance.
   *
   * @param {import('./graphics-device.js').GraphicsDevice} graphicsDevice - The graphics device.
   * @param {UniformFormat[]} uniforms - An array of uniforms to be stored in the buffer
   */
  constructor(graphicsDevice, uniforms) {
    this.byteSize = 0;
    this.map = new Map();
    this.scope = graphicsDevice.scope;

    /** @type {UniformFormat[]} */
    this.uniforms = uniforms;

    // TODO: optimize uniforms ordering

    let offset = 0;
    for (let i = 0; i < uniforms.length; i++) {
      const uniform = uniforms[i];
      uniform.calculateOffset(offset);
      offset = uniform.offset * 4 + uniform.byteSize;
      uniform.scopeId = this.scope.resolve(uniform.name);
      this.map.set(uniform.name, uniform);
    }

    // round up buffer size
    this.byteSize = math.roundUp(offset, 16);
  }

  /**
   * Returns format of a uniform with specified name.
   *
   * @param {string} name - The name of the uniform.
   * @returns {UniformFormat} - The format of the uniform.
   */
  get(name) {
    return this.map.get(name);
  }
  getShaderDeclaration(bindGroup, bindIndex) {
    const name = bindGroupNames[bindGroup];
    let code = `layout(set = ${bindGroup}, binding = ${bindIndex}, std140) uniform ub_${name} {\n`;
    this.uniforms.forEach(uniform => {
      const typeString = uniformTypeToName[uniform.type];
      Debug.assert(typeString.length > 0, `Uniform type ${uniform.type} is not handled.`);
      code += `    ${typeString} ${uniform.shortName}${uniform.count !== 1 ? `[${uniform.count}]` : ''};\n`;
    });
    return code + '};\n';
  }
}

export { UniformBufferFormat, UniformFormat };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pZm9ybS1idWZmZXItZm9ybWF0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGxhdGZvcm0vZ3JhcGhpY3MvdW5pZm9ybS1idWZmZXItZm9ybWF0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5pbXBvcnQgeyBtYXRoIH0gZnJvbSAnLi4vLi4vY29yZS9tYXRoL21hdGguanMnO1xuaW1wb3J0IHtcbiAgICB1bmlmb3JtVHlwZVRvTmFtZSwgYmluZEdyb3VwTmFtZXMsXG4gICAgVU5JRk9STVRZUEVfQk9PTCwgVU5JRk9STVRZUEVfSU5ULCBVTklGT1JNVFlQRV9GTE9BVCwgVU5JRk9STVRZUEVfVkVDMiwgVU5JRk9STVRZUEVfVkVDMyxcbiAgICBVTklGT1JNVFlQRV9WRUM0LCBVTklGT1JNVFlQRV9JVkVDMiwgVU5JRk9STVRZUEVfSVZFQzMsIFVOSUZPUk1UWVBFX0lWRUM0LCBVTklGT1JNVFlQRV9CVkVDMixcbiAgICBVTklGT1JNVFlQRV9CVkVDMywgVU5JRk9STVRZUEVfQlZFQzQsIFVOSUZPUk1UWVBFX01BVDQsIFVOSUZPUk1UWVBFX01BVDIsIFVOSUZPUk1UWVBFX01BVDMsXG4gICAgVU5JRk9STVRZUEVfRkxPQVRBUlJBWSwgVU5JRk9STVRZUEVfVkVDMkFSUkFZLCBVTklGT1JNVFlQRV9WRUMzQVJSQVksIFVOSUZPUk1UWVBFX1ZFQzRBUlJBWSxcbiAgICBVTklGT1JNVFlQRV9NQVQ0QVJSQVlcbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG4vLyBtYXAgb2YgVU5JRk9STVRZUEVfKioqIHRvIG51bWJlciBvZiAzMmJpdCBlbGVtZW50c1xuY29uc3QgdW5pZm9ybVR5cGVUb051bUVsZW1lbnRzID0gW107XG51bmlmb3JtVHlwZVRvTnVtRWxlbWVudHNbVU5JRk9STVRZUEVfRkxPQVRdID0gMTtcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9WRUMyXSA9IDI7XG51bmlmb3JtVHlwZVRvTnVtRWxlbWVudHNbVU5JRk9STVRZUEVfVkVDM10gPSAzO1xudW5pZm9ybVR5cGVUb051bUVsZW1lbnRzW1VOSUZPUk1UWVBFX1ZFQzRdID0gNDtcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9JTlRdID0gMTtcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9JVkVDMl0gPSAyO1xudW5pZm9ybVR5cGVUb051bUVsZW1lbnRzW1VOSUZPUk1UWVBFX0lWRUMzXSA9IDM7XG51bmlmb3JtVHlwZVRvTnVtRWxlbWVudHNbVU5JRk9STVRZUEVfSVZFQzRdID0gNDtcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9CT09MXSA9IDE7XG51bmlmb3JtVHlwZVRvTnVtRWxlbWVudHNbVU5JRk9STVRZUEVfQlZFQzJdID0gMjtcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9CVkVDM10gPSAzO1xudW5pZm9ybVR5cGVUb051bUVsZW1lbnRzW1VOSUZPUk1UWVBFX0JWRUM0XSA9IDQ7XG51bmlmb3JtVHlwZVRvTnVtRWxlbWVudHNbVU5JRk9STVRZUEVfTUFUMl0gPSA4OyAgICAvLyAyIHggdmVjNFxudW5pZm9ybVR5cGVUb051bUVsZW1lbnRzW1VOSUZPUk1UWVBFX01BVDNdID0gMTI7ICAgLy8gMyB4IHZlYzRcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9NQVQ0XSA9IDE2OyAgIC8vIDQgeCB2ZWM0XG5cbi8qKlxuICogQSBjbGFzcyBzdG9yaW5nIGRlc2NyaXB0aW9uIG9mIGFuIGluZGl2aWR1YWwgdW5pZm9ybSwgc3RvcmVkIGluc2lkZSBhIHVuaWZvcm0gYnVmZmVyLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgVW5pZm9ybUZvcm1hdCB7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgbmFtZTtcblxuICAgIC8vIFVOSUZPUk1UWVBFXyoqKlxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIHR5cGU7XG5cbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICBieXRlU2l6ZTtcblxuICAgIC8qKlxuICAgICAqIEluZGV4IG9mIHRoZSB1bmlmb3JtIGluIGFuIGFycmF5IG9mIDMyYml0IHZhbHVlcyAoRmxvYXQzMkFycmF5IGFuZCBzaW1pbGFyKVxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBvZmZzZXQ7XG5cbiAgICAvKiogQHR5cGUge2ltcG9ydCgnLi9zY29wZS1pZC5qcycpLlNjb3BlSWR9ICovXG4gICAgc2NvcGVJZDtcblxuICAgIC8qKlxuICAgICAqIENvdW50IG9mIGVsZW1lbnRzIGZvciBhcnJheXMsIG90aGVyd2lzZSAxLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBjb3VudDtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHR5cGUsIGNvdW50ID0gMSkge1xuXG4gICAgICAgIC8vIGp1c3QgYSBuYW1lXG4gICAgICAgIHRoaXMuc2hvcnROYW1lID0gbmFtZTtcblxuICAgICAgICAvLyBuYW1lIHdpdGggWzBdIGlmIHRoaXMgaXMgYW4gYXJyYXlcbiAgICAgICAgdGhpcy5uYW1lID0gY291bnQgPiAxID8gYCR7bmFtZX1bMF1gIDogbmFtZTtcblxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuXG4gICAgICAgIHRoaXMudXBkYXRlVHlwZSA9IHR5cGU7XG4gICAgICAgIGlmIChjb3VudCA+IDEpIHtcblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBVTklGT1JNVFlQRV9GTE9BVDogdGhpcy51cGRhdGVUeXBlID0gVU5JRk9STVRZUEVfRkxPQVRBUlJBWTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBVTklGT1JNVFlQRV9WRUMyOiB0aGlzLnVwZGF0ZVR5cGUgPSBVTklGT1JNVFlQRV9WRUMyQVJSQVk7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVU5JRk9STVRZUEVfVkVDMzogdGhpcy51cGRhdGVUeXBlID0gVU5JRk9STVRZUEVfVkVDM0FSUkFZOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFVOSUZPUk1UWVBFX1ZFQzQ6IHRoaXMudXBkYXRlVHlwZSA9IFVOSUZPUk1UWVBFX1ZFQzRBUlJBWTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBVTklGT1JNVFlQRV9NQVQ0OiB0aGlzLnVwZGF0ZVR5cGUgPSBVTklGT1JNVFlQRV9NQVQ0QVJSQVk7IGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3IoYFVuaWZvcm0gYXJyYXkgb2YgdHlwZSAke3VuaWZvcm1UeXBlVG9OYW1lW3R5cGVdfSBpcyBub3Qgc3VwcG9ydGVkIHdoZW4gcHJvY2Vzc2luZyB1bmlmb3JtICcke25hbWV9Jy5gKTtcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuY2FsbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICAgIERlYnVnLmFzc2VydCghaXNOYU4oY291bnQpLCBgVW5zdXBwb3J0ZWQgdW5pZm9ybTogJHtuYW1lfVske2NvdW50fV1gKTtcbiAgICAgICAgRGVidWcuY2FsbCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNOYU4oY291bnQpKVxuICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZCA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBlbGVtZW50U2l6ZSA9IHVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1t0eXBlXTtcbiAgICAgICAgRGVidWcuYXNzZXJ0KGVsZW1lbnRTaXplLCBgVW5oYW5kbGVkIHVuaWZvcm0gZm9ybWF0ICR7dHlwZX0gdXNlZCBmb3IgJHtuYW1lfWApO1xuXG4gICAgICAgIC8vIGVsZW1lbnQgc2l6ZSBmb3IgYXJyYXlzIGlzIGFsaWduZWQgdXAgdG8gdmVjNFxuICAgICAgICBpZiAoY291bnQgPiAxKVxuICAgICAgICAgICAgZWxlbWVudFNpemUgPSBtYXRoLnJvdW5kVXAoZWxlbWVudFNpemUsIDQpO1xuXG4gICAgICAgIHRoaXMuYnl0ZVNpemUgPSBjb3VudCAqIGVsZW1lbnRTaXplICogNDtcbiAgICAgICAgRGVidWcuYXNzZXJ0KHRoaXMuYnl0ZVNpemUsIGBVbmtub3duIGJ5dGUgc2l6ZSBmb3IgdW5pZm9ybSBmb3JtYXQgJHt0eXBlfSB1c2VkIGZvciAke25hbWV9YCk7XG4gICAgfVxuXG4gICAgLy8gc3RkMTQwIHJ1bGVzOiBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL09wZW5HTC9zcGVjcy9nbC9nbHNwZWM0NS5jb3JlLnBkZiNwYWdlPTE1OVxuICAgIC8vIFRPRE86IHRoaXMgc3VwcG9ydCBsaW1pdGVkIHN1YnNldCBvZiBmdW5jdGlvbmFsaXR5LCBhcnJheXMgYW5kIHN0cnVjdHMgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgY2FsY3VsYXRlT2Zmc2V0KG9mZnNldCkge1xuXG4gICAgICAgIC8vIE5vdGU6IHZlYzMgaGFzIHRoZSBzYW1lIGFsaWdubWVudCBhcyB2ZWM0XG4gICAgICAgIGxldCBhbGlnbm1lbnQgPSB0aGlzLmJ5dGVTaXplIDw9IDggPyB0aGlzLmJ5dGVTaXplIDogMTY7XG5cbiAgICAgICAgLy8gYXJyYXlzIGhhdmUgdmVjNCBhbGlnbm1lbnRzXG4gICAgICAgIGlmICh0aGlzLmNvdW50ID4gMSlcbiAgICAgICAgICAgIGFsaWdubWVudCA9IDE2O1xuXG4gICAgICAgIC8vIGFsaWduIHRoZSBzdGFydCBvZmZzZXRcbiAgICAgICAgb2Zmc2V0ID0gbWF0aC5yb3VuZFVwKG9mZnNldCwgYWxpZ25tZW50KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQgLyA0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGRlc2NyaXB0b3IgdGhhdCBkZWZpbmVzIHRoZSBsYXlvdXQgb2Ygb2YgZGF0YSBpbnNpZGUgdGhlIHtAbGluayBVbmlmb3JtQnVmZmVyfS5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIFVuaWZvcm1CdWZmZXJGb3JtYXQge1xuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIGJ5dGVTaXplID0gMDtcblxuICAgIC8qKiBAdHlwZSB7TWFwPHN0cmluZyxVbmlmb3JtRm9ybWF0Pn0gKi9cbiAgICBtYXAgPSBuZXcgTWFwKCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgVW5pZm9ybUJ1ZmZlckZvcm1hdCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuL2dyYXBoaWNzLWRldmljZS5qcycpLkdyYXBoaWNzRGV2aWNlfSBncmFwaGljc0RldmljZSAtIFRoZSBncmFwaGljcyBkZXZpY2UuXG4gICAgICogQHBhcmFtIHtVbmlmb3JtRm9ybWF0W119IHVuaWZvcm1zIC0gQW4gYXJyYXkgb2YgdW5pZm9ybXMgdG8gYmUgc3RvcmVkIGluIHRoZSBidWZmZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihncmFwaGljc0RldmljZSwgdW5pZm9ybXMpIHtcbiAgICAgICAgdGhpcy5zY29wZSA9IGdyYXBoaWNzRGV2aWNlLnNjb3BlO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7VW5pZm9ybUZvcm1hdFtdfSAqL1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gdW5pZm9ybXM7XG5cbiAgICAgICAgLy8gVE9ETzogb3B0aW1pemUgdW5pZm9ybXMgb3JkZXJpbmdcblxuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bmlmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdW5pZm9ybSA9IHVuaWZvcm1zW2ldO1xuICAgICAgICAgICAgdW5pZm9ybS5jYWxjdWxhdGVPZmZzZXQob2Zmc2V0KTtcbiAgICAgICAgICAgIG9mZnNldCA9IHVuaWZvcm0ub2Zmc2V0ICogNCArIHVuaWZvcm0uYnl0ZVNpemU7XG5cbiAgICAgICAgICAgIHVuaWZvcm0uc2NvcGVJZCA9IHRoaXMuc2NvcGUucmVzb2x2ZSh1bmlmb3JtLm5hbWUpO1xuXG4gICAgICAgICAgICB0aGlzLm1hcC5zZXQodW5pZm9ybS5uYW1lLCB1bmlmb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJvdW5kIHVwIGJ1ZmZlciBzaXplXG4gICAgICAgIHRoaXMuYnl0ZVNpemUgPSBtYXRoLnJvdW5kVXAob2Zmc2V0LCAxNik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBmb3JtYXQgb2YgYSB1bmlmb3JtIHdpdGggc3BlY2lmaWVkIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB1bmlmb3JtLlxuICAgICAqIEByZXR1cm5zIHtVbmlmb3JtRm9ybWF0fSAtIFRoZSBmb3JtYXQgb2YgdGhlIHVuaWZvcm0uXG4gICAgICovXG4gICAgZ2V0KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChuYW1lKTtcbiAgICB9XG5cbiAgICBnZXRTaGFkZXJEZWNsYXJhdGlvbihiaW5kR3JvdXAsIGJpbmRJbmRleCkge1xuXG4gICAgICAgIGNvbnN0IG5hbWUgPSBiaW5kR3JvdXBOYW1lc1tiaW5kR3JvdXBdO1xuICAgICAgICBsZXQgY29kZSA9IGBsYXlvdXQoc2V0ID0gJHtiaW5kR3JvdXB9LCBiaW5kaW5nID0gJHtiaW5kSW5kZXh9LCBzdGQxNDApIHVuaWZvcm0gdWJfJHtuYW1lfSB7XFxuYDtcblxuICAgICAgICB0aGlzLnVuaWZvcm1zLmZvckVhY2goKHVuaWZvcm0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVTdHJpbmcgPSB1bmlmb3JtVHlwZVRvTmFtZVt1bmlmb3JtLnR5cGVdO1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KHR5cGVTdHJpbmcubGVuZ3RoID4gMCwgYFVuaWZvcm0gdHlwZSAke3VuaWZvcm0udHlwZX0gaXMgbm90IGhhbmRsZWQuYCk7XG4gICAgICAgICAgICBjb2RlICs9IGAgICAgJHt0eXBlU3RyaW5nfSAke3VuaWZvcm0uc2hvcnROYW1lfSR7dW5pZm9ybS5jb3VudCAhPT0gMSA/IGBbJHt1bmlmb3JtLmNvdW50fV1gIDogJyd9O1xcbmA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBjb2RlICsgJ307XFxuJztcbiAgICB9XG59XG5cbmV4cG9ydCB7IFVuaWZvcm1Gb3JtYXQsIFVuaWZvcm1CdWZmZXJGb3JtYXQgfTtcbiJdLCJuYW1lcyI6WyJ1bmlmb3JtVHlwZVRvTnVtRWxlbWVudHMiLCJVTklGT1JNVFlQRV9GTE9BVCIsIlVOSUZPUk1UWVBFX1ZFQzIiLCJVTklGT1JNVFlQRV9WRUMzIiwiVU5JRk9STVRZUEVfVkVDNCIsIlVOSUZPUk1UWVBFX0lOVCIsIlVOSUZPUk1UWVBFX0lWRUMyIiwiVU5JRk9STVRZUEVfSVZFQzMiLCJVTklGT1JNVFlQRV9JVkVDNCIsIlVOSUZPUk1UWVBFX0JPT0wiLCJVTklGT1JNVFlQRV9CVkVDMiIsIlVOSUZPUk1UWVBFX0JWRUMzIiwiVU5JRk9STVRZUEVfQlZFQzQiLCJVTklGT1JNVFlQRV9NQVQyIiwiVU5JRk9STVRZUEVfTUFUMyIsIlVOSUZPUk1UWVBFX01BVDQiLCJVbmlmb3JtRm9ybWF0IiwiY29uc3RydWN0b3IiLCJuYW1lIiwidHlwZSIsImNvdW50IiwiYnl0ZVNpemUiLCJvZmZzZXQiLCJzY29wZUlkIiwic2hvcnROYW1lIiwidXBkYXRlVHlwZSIsIlVOSUZPUk1UWVBFX0ZMT0FUQVJSQVkiLCJVTklGT1JNVFlQRV9WRUMyQVJSQVkiLCJVTklGT1JNVFlQRV9WRUMzQVJSQVkiLCJVTklGT1JNVFlQRV9WRUM0QVJSQVkiLCJVTklGT1JNVFlQRV9NQVQ0QVJSQVkiLCJEZWJ1ZyIsImVycm9yIiwidW5pZm9ybVR5cGVUb05hbWUiLCJjYWxsIiwiaW52YWxpZCIsImFzc2VydCIsImlzTmFOIiwiZWxlbWVudFNpemUiLCJtYXRoIiwicm91bmRVcCIsImNhbGN1bGF0ZU9mZnNldCIsImFsaWdubWVudCIsIlVuaWZvcm1CdWZmZXJGb3JtYXQiLCJncmFwaGljc0RldmljZSIsInVuaWZvcm1zIiwibWFwIiwiTWFwIiwic2NvcGUiLCJpIiwibGVuZ3RoIiwidW5pZm9ybSIsInJlc29sdmUiLCJzZXQiLCJnZXQiLCJnZXRTaGFkZXJEZWNsYXJhdGlvbiIsImJpbmRHcm91cCIsImJpbmRJbmRleCIsImJpbmRHcm91cE5hbWVzIiwiY29kZSIsImZvckVhY2giLCJ0eXBlU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFXQTtBQUNBLE1BQU1BLHdCQUF3QixHQUFHLEVBQUUsQ0FBQTtBQUNuQ0Esd0JBQXdCLENBQUNDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQy9DRCx3QkFBd0IsQ0FBQ0UsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDOUNGLHdCQUF3QixDQUFDRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUM5Q0gsd0JBQXdCLENBQUNJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzlDSix3QkFBd0IsQ0FBQ0ssZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzdDTCx3QkFBd0IsQ0FBQ00saUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDL0NOLHdCQUF3QixDQUFDTyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUMvQ1Asd0JBQXdCLENBQUNRLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQy9DUix3QkFBd0IsQ0FBQ1MsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDOUNULHdCQUF3QixDQUFDVSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMs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
