var webgpuPS = /* glsl */`

// texelFetch support and others
#extension GL_EXT_samplerless_texture_functions : require

layout(location = 0) out highp vec4 pc_fragColor;
layout(location = 1) out highp vec4 pc_fragColor1;
layout(location = 2) out highp vec4 pc_fragColor2;
layout(location = 3) out highp vec4 pc_fragColor3;
layout(location = 4) out highp vec4 pc_fragColor4;
layout(location = 5) out highp vec4 pc_fragColor5;
layout(location = 6) out highp vec4 pc_fragColor6;
layout(location = 7) out highp vec4 pc_fragColor7;

#define gl_FragColor pc_fragColor

#define pcFragColor0 pc_fragColor
#define pcFragColor1 pc_fragColor1
#define pcFragColor2 pc_fragColor2
#define pcFragColor3 pc_fragColor3
#define pcFragColor4 pc_fragColor4
#define pcFragColor5 pc_fragColor5
#define pcFragColor6 pc_fragColor6
#define pcFragColor7 pc_fragColor7

#define texture2D(res, uv) texture(sampler2D(res, res ## _sampler), uv)
#define texture2DBias(res, uv, bias) texture(sampler2D(res, res ## _sampler), uv, bias)
#define texture2DLodEXT(res, uv, lod) textureLod(sampler2D(res, res ## _sampler), uv, lod)
#define textureCube(res, uv) texture(samplerCube(res, res ## _sampler), uv)
#define textureCubeLodEXT(res, uv, lod) textureLod(samplerCube(res, res ## _sampler), uv, lod)
#define textureShadow(res, uv) textureLod(sampler2DShadow(res, res ## _sampler), uv, 0.0)

// TODO: implement other texture sampling macros
// #define texture2DProj textureProj
// #define texture2DProjLodEXT textureProjLod
// #define texture2DGradEXT textureGrad
// #define texture2DProjGradEXT textureProjGrad
// #define textureCubeGradEXT textureGrad

// pass / accept shadow map as a function parameter, passes both the texture as well as sampler
// as the combined sampler can be only created at a point of use
#define SHADOWMAP_PASS(name) name, name ## _sampler
#define SHADOWMAP_ACCEPT(name) texture2D name, sampler name ## _sampler
#define TEXTURE_PASS(name) name, name ## _sampler
#define TEXTURE_ACCEPT(name) texture2D name, sampler name ## _sampler

#define GL2
#define WEBGPU
#define SUPPORTS_TEXLOD
#define SUPPORTS_MRT
`;

export { webgpuPS as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvcGxhdGZvcm0vZ3JhcGhpY3Mvc2hhZGVyLWNodW5rcy9mcmFnL3dlYmdwdS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAvKiBnbHNsICovYFxuXG4vLyB0ZXhlbEZldGNoIHN1cHBvcnQgYW5kIG90aGVyc1xuI2V4dGVuc2lvbiBHTF9FWFRfc2FtcGxlcmxlc3NfdGV4dHVyZV9mdW5jdGlvbnMgOiByZXF1aXJlXG5cbmxheW91dChsb2NhdGlvbiA9IDApIG91dCBoaWdocCB2ZWM0IHBjX2ZyYWdDb2xvcjtcbmxheW91dChsb2NhdGlvbiA9IDEpIG91dCBoaWdocCB2ZWM0IHBjX2ZyYWdDb2xvcjE7XG5sYXlvdXQobG9jYXRpb24gPSAyKSBvdXQgaGlnaHAgdmVjNCBwY19mcmFnQ29sb3IyO1xubGF5b3V0KGxvY2F0aW9uID0gMykgb3V0IGhpZ2hwIHZlYzQgcGNfZnJhZ0NvbG9yMztcbmxheW91dChsb2NhdGlvbiA9IDQpIG91dCBoaWdocCB2ZWM0IHBjX2ZyYWdDb2xvcjQ7XG5sYXlvdXQobG9jYXRpb24gPSA1KSBvdXQgaGlnaHAgdmVjNCBwY19mcmFnQ29sb3I1O1xubGF5b3V0KGxvY2F0aW9uID0gNikgb3V0IGhpZ2hwIHZlYzQgcGNfZnJhZ0NvbG9yNjtcbmxheW91dChsb2NhdGlvbiA9IDcpIG91dCBoaWdocCB2ZWM0IHBjX2ZyYWdDb2xvcjc7XG5cbiNkZWZpbmUgZ2xfRnJhZ0NvbG9yIHBjX2ZyYWdDb2xvclxuXG4jZGVmaW5lIHBjRnJhZ0NvbG9yMCBwY19mcmFnQ29sb3JcbiNkZWZpbmUgcGNGcmFnQ29sb3IxIHBjX2ZyYWdDb2xvcjFcbiNkZWZpbmUgcGNGcmFnQ29sb3IyIHBjX2ZyYWdDb2xvcjJcbiNkZWZpbmUgcGNGcmFnQ29sb3IzIHBjX2ZyYWdDb2xvcjNcbiNkZWZpbmUgcGNGcmFnQ29sb3I0IHBjX2ZyYWdDb2xvcjRcbiNkZWZpbmUgcGNGcmFnQ29sb3I1IHBjX2ZyYWdDb2xvcjVcbiNkZWZpbmUgcGNGcmFnQ29sb3I2IHBjX2ZyYWdDb2xvcjZcbiNkZWZpbmUgcGNGcmFnQ29sb3I3IHBjX2ZyYWdDb2xvcjdcblxuI2RlZmluZSB0ZXh0dXJlMkQocmVzLCB1dikgdGV4dHVyZShzYW1wbGVyMkQocmVzLCByZXMgIyMgX3NhbXBsZXIpLCB1dilcbiNkZWZpbmUgdGV4dHVyZTJEQmlhcyhyZXMsIHV2LCBiaWFzKSB0ZXh0dXJlKHNhbXBsZXIyRChyZXMsIHJlcyAjIyBfc2FtcGxlciksIHV2LCBiaWFzKVxuI2RlZmluZSB0ZXh0dXJlMkRMb2RFWFQocmVzLCB1diwgbG9kKSB0ZXh0dXJlTG9kKHNhbXBsZXIyRChyZXMsIHJlcyAjIyBfc2FtcGxlciksIHV2LCBsb2QpXG4jZGVmaW5lIHRleHR1cmVDdWJlKHJlcywgdXYpIHRleHR1cmUoc2FtcGxlckN1YmUocmVzLCByZXMgIyMgX3NhbXBsZXIpLCB1dilcbiNkZWZpbmUgdGV4dHVyZUN1YmVMb2RFWFQocmVzLCB1diwgbG9kKSB0ZXh0dXJlTG9kKHNhbXBsZXJDdWJlKHJlcywgcmVzICMjIF9zYW1wbGVyKSwgdXYsIGxvZClcbiNkZWZpbmUgdGV4dHVyZVNoYWRvdyhyZXMsIHV2KSB0ZXh0dXJlTG9kKHNhbXBsZXIyRFNoYWRvdyhyZXMsIHJlcyAjIyBfc2FtcGxlciksIHV2LCAwLjApXG5cbi8vIFRPRE86IGltcGxlbWVudCBvdGhlciB0ZXh0dXJlIHNhbXBsaW5nIG1hY3Jvc1xuLy8gI2RlZmluZSB0ZXh0dXJlMkRQcm9qIHRleHR1cmVQcm9qXG4vLyAjZGVmaW5lIHRleHR1cmUyRFByb2pMb2RFWFQgdGV4dHVyZVByb2pMb2Rcbi8vICNkZWZpbmUgdGV4dHVyZTJER3JhZEVYVCB0ZXh0dXJlR3JhZFxuLy8gI2RlZmluZSB0ZXh0dXJlMkRQcm9qR3JhZEVYVCB0ZXh0dXJlUHJvakdyYWRcbi8vICNkZWZpbmUgdGV4dHVyZUN1YmVHcmFkRVhUIHRleHR1cmVHcmFkXG5cbi8vIHBhc3MgLyBhY2NlcHQgc2hhZG93IG1hcCBhcyBhIGZ1bmN0aW9uIHBhcmFtZXRlciwgcGFzc2VzIGJvdGggdGhlIHRleHR1cmUgYXMgd2VsbCBhcyBzYW1wbGVyXG4vLyBhcyB0aGUgY29tYmluZWQgc2FtcGxlciBjYW4gYmUgb25seSBjcmVhdGVkIGF0IGEgcG9pbnQgb2YgdXNlXG4jZGVmaW5lIFNIQURPV01BUF9QQVNTKG5hbWUpIG5hbWUsIG5hbWUgIyMgX3NhbXBsZXJcbiNkZWZpbmUgU0hBRE9XTUFQX0FDQ0VQVChuYW1lKSB0ZXh0dXJlMkQgbmFtZSwgc2FtcGxlciBuYW1lICMjIF9zYW1wbGVyXG4jZGVmaW5lIFRFWFRVUkVfUEFTUyhuYW1lKSBuYW1lLCBuYW1lICMjIF9zYW1wbGVyXG4jZGVmaW5lIFRFWFRVUkVfQUNDRVBUKG5hbWUpIHRleHR1cmUyRCBuYW1lLCBzYW1wbGVyIG5hbWUgIyMgX3NhbXBsZXJcblxuI2RlZmluZSBHTDJcbiNkZWZpbmUgV0VCR1BVXG4jZGVmaW5lIFNVUFBPUlRTX1RFWExPRFxuI2RlZmluZSBTVVBQT1JUU19NUlRcbmA7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxVQUFXLENBQUE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OyJ9
