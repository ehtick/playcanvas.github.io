var gles3PS = /* glsl */`
layout(location = 0) out highp vec4 pc_fragColor;

#if COLOR_ATTACHMENT_1
layout(location = 1) out highp vec4 pc_fragColor1;
#endif

#if COLOR_ATTACHMENT_2
layout(location = 2) out highp vec4 pc_fragColor2;
#endif

#if COLOR_ATTACHMENT_3
layout(location = 3) out highp vec4 pc_fragColor3;
#endif

#if COLOR_ATTACHMENT_4
layout(location = 4) out highp vec4 pc_fragColor4;
#endif

#if COLOR_ATTACHMENT_5
layout(location = 5) out highp vec4 pc_fragColor5;
#endif

#if COLOR_ATTACHMENT_6
layout(location = 6) out highp vec4 pc_fragColor6;
#endif

#if COLOR_ATTACHMENT_7
layout(location = 7) out highp vec4 pc_fragColor7;
#endif

#define gl_FragColor pc_fragColor

#define pcFragColor0 pc_fragColor
#define pcFragColor1 pc_fragColor1
#define pcFragColor2 pc_fragColor2
#define pcFragColor3 pc_fragColor3
#define pcFragColor4 pc_fragColor4
#define pcFragColor5 pc_fragColor5
#define pcFragColor6 pc_fragColor6
#define pcFragColor7 pc_fragColor7

#define varying in

#define texture2D texture
#define texture2DBias texture
#define textureCube texture
#define texture2DProj textureProj
#define texture2DLodEXT textureLod
#define texture2DProjLodEXT textureProjLod
#define textureCubeLodEXT textureLod
#define texture2DGradEXT textureGrad
#define texture2DProjGradEXT textureProjGrad
#define textureCubeGradEXT textureGrad

// sample shadows using textureGrad to remove derivatives in the dynamic loops (which are used by
// clustered lighting) - as DirectX shader compiler tries to unroll the loops and takes long time
// to compile the shader. Using textureLod would be even better, but WebGl does not translate it to
// lod instruction for DirectX correctly and uses SampleCmp instead of SampleCmpLevelZero or similar.
#define textureShadow(res, uv) textureGrad(res, uv, vec2(1, 1), vec2(1, 1))

// pass / accept shadow map or texture as a function parameter, on webgl this is simply passed as is
// but this is needed for WebGPU
#define SHADOWMAP_PASS(name) name
#define SHADOWMAP_ACCEPT(name) sampler2DShadow name
#define TEXTURE_PASS(name) name
#define TEXTURE_ACCEPT(name) sampler2D name

#define GL2
#define SUPPORTS_TEXLOD
#define SUPPORTS_MRT
`;

export { gles3PS as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xlczMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9wbGF0Zm9ybS9ncmFwaGljcy9zaGFkZXItY2h1bmtzL2ZyYWcvZ2xlczMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbmxheW91dChsb2NhdGlvbiA9IDApIG91dCBoaWdocCB2ZWM0IHBjX2ZyYWdDb2xvcjtcblxuI2lmIENPTE9SX0FUVEFDSE1FTlRfMVxubGF5b3V0KGxvY2F0aW9uID0gMSkgb3V0IGhpZ2hwIHZlYzQgcGNfZnJhZ0NvbG9yMTtcbiNlbmRpZlxuXG4jaWYgQ09MT1JfQVRUQUNITUVOVF8yXG5sYXlvdXQobG9jYXRpb24gPSAyKSBvdXQgaGlnaHAgdmVjNCBwY19mcmFnQ29sb3IyO1xuI2VuZGlmXG5cbiNpZiBDT0xPUl9BVFRBQ0hNRU5UXzNcbmxheW91dChsb2NhdGlvbiA9IDMpIG91dCBoaWdocCB2ZWM0IHBjX2ZyYWdDb2xvcjM7XG4jZW5kaWZcblxuI2lmIENPTE9SX0FUVEFDSE1FTlRfNFxubGF5b3V0KGxvY2F0aW9uID0gNCkgb3V0IGhpZ2hwIHZlYzQgcGNfZnJhZ0NvbG9yNDtcbiNlbmRpZlxuXG4jaWYgQ09MT1JfQVRUQUNITUVOVF81XG5sYXlvdXQobG9jYXRpb24gPSA1KSBvdXQgaGlnaHAgdmVjNCBwY19mcmFnQ29sb3I1O1xuI2VuZGlmXG5cbiNpZiBDT0xPUl9BVFRBQ0hNRU5UXzZcbmxheW91dChsb2NhdGlvbiA9IDYpIG91dCBoaWdocCB2ZWM0IHBjX2ZyYWdDb2xvcjY7XG4jZW5kaWZcblxuI2lmIENPTE9SX0FUVEFDSE1FTlRfN1xubGF5b3V0KGxvY2F0aW9uID0gNykgb3V0IGhpZ2hwIHZlYzQgcGNfZnJhZ0NvbG9yNztcbiNlbmRpZlxuXG4jZGVmaW5lIGdsX0ZyYWdDb2xvciBwY19mcmFnQ29sb3JcblxuI2RlZmluZSBwY0ZyYWdDb2xvcjAgcGNfZnJhZ0NvbG9yXG4jZGVmaW5lIHBjRnJhZ0NvbG9yMSBwY19mcmFnQ29sb3IxXG4jZGVmaW5lIHBjRnJhZ0NvbG9yMiBwY19mcmFnQ29sb3IyXG4jZGVmaW5lIHBjRnJhZ0NvbG9yMyBwY19mcmFnQ29sb3IzXG4jZGVmaW5lIHBjRnJhZ0NvbG9yNCBwY19mcmFnQ29sb3I0XG4jZGVmaW5lIHBjRnJhZ0NvbG9yNSBwY19mcmFnQ29sb3I1XG4jZGVmaW5lIHBjRnJhZ0NvbG9yNiBwY19mcmFnQ29sb3I2XG4jZGVmaW5lIHBjRnJhZ0NvbG9yNyBwY19mcmFnQ29sb3I3XG5cbiNkZWZpbmUgdmFyeWluZyBpblxuXG4jZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlXG4jZGVmaW5lIHRleHR1cmUyREJpYXMgdGV4dHVyZVxuI2RlZmluZSB0ZXh0dXJlQ3ViZSB0ZXh0dXJlXG4jZGVmaW5lIHRleHR1cmUyRFByb2ogdGV4dHVyZVByb2pcbiNkZWZpbmUgdGV4dHVyZTJETG9kRVhUIHRleHR1cmVMb2RcbiNkZWZpbmUgdGV4dHVyZTJEUHJvakxvZEVYVCB0ZXh0dXJlUHJvakxvZFxuI2RlZmluZSB0ZXh0dXJlQ3ViZUxvZEVYVCB0ZXh0dXJlTG9kXG4jZGVmaW5lIHRleHR1cmUyREdyYWRFWFQgdGV4dHVyZUdyYWRcbiNkZWZpbmUgdGV4dHVyZTJEUHJvakdyYWRFWFQgdGV4dHVyZVByb2pHcmFkXG4jZGVmaW5lIHRleHR1cmVDdWJlR3JhZEVYVCB0ZXh0dXJlR3JhZFxuXG4vLyBzYW1wbGUgc2hhZG93cyB1c2luZyB0ZXh0dXJlR3JhZCB0byByZW1vdmUgZGVyaXZhdGl2ZXMgaW4gdGhlIGR5bmFtaWMgbG9vcHMgKHdoaWNoIGFyZSB1c2VkIGJ5XG4vLyBjbHVzdGVyZWQgbGlnaHRpbmcpIC0gYXMgRGlyZWN0WCBzaGFkZXIgY29tcGlsZXIgdHJpZXMgdG8gdW5yb2xsIHRoZSBsb29wcyBhbmQgdGFrZXMgbG9uZyB0aW1lXG4vLyB0byBjb21waWxlIHRoZSBzaGFkZXIuIFVzaW5nIHRleHR1cmVMb2Qgd291bGQgYmUgZXZlbiBiZXR0ZXIsIGJ1dCBXZWJHbCBkb2VzIG5vdCB0cmFuc2xhdGUgaXQgdG9cbi8vIGxvZCBpbnN0cnVjdGlvbiBmb3IgRGlyZWN0WCBjb3JyZWN0bHkgYW5kIHVzZXMgU2FtcGxlQ21wIGluc3RlYWQgb2YgU2FtcGxlQ21wTGV2ZWxaZXJvIG9yIHNpbWlsYXIuXG4jZGVmaW5lIHRleHR1cmVTaGFkb3cocmVzLCB1dikgdGV4dHVyZUdyYWQocmVzLCB1diwgdmVjMigxLCAxKSwgdmVjMigxLCAxKSlcblxuLy8gcGFzcyAvIGFjY2VwdCBzaGFkb3cgbWFwIG9yIHRleHR1cmUgYXMgYSBmdW5jdGlvbiBwYXJhbWV0ZXIsIG9uIHdlYmdsIHRoaXMgaXMgc2ltcGx5IHBhc3NlZCBhcyBpc1xuLy8gYnV0IHRoaXMgaXMgbmVlZGVkIGZvciBXZWJHUFVcbiNkZWZpbmUgU0hBRE9XTUFQX1BBU1MobmFtZSkgbmFtZVxuI2RlZmluZSBTSEFET1dNQVBfQUNDRVBUKG5hbWUpIHNhbXBsZXIyRFNoYWRvdyBuYW1lXG4jZGVmaW5lIFRFWFRVUkVfUEFTUyhuYW1lKSBuYW1lXG4jZGVmaW5lIFRFWFRVUkVfQUNDRVBUKG5hbWUpIHNhbXBsZXIyRCBuYW1lXG5cbiNkZWZpbmUgR0wyXG4jZGVmaW5lIFNVUFBPUlRTX1RFWExPRFxuI2RlZmluZSBTVVBQT1JUU19NUlRcbmA7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBZSxVQUFXLENBQUE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OyJ9
