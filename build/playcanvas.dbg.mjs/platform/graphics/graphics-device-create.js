/**
 * @license
 * PlayCanvas Engine v1.63.0-dev revision 9f3635a4e (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../../core/debug.js';
import { WebgpuGraphicsDevice } from './webgpu/webgpu-graphics-device.js';
import { DEVICETYPE_WEBGL2, DEVICETYPE_WEBGL1, DEVICETYPE_WEBGPU } from './constants.js';
import { WebglGraphicsDevice } from './webgl/webgl-graphics-device.js';

/**
 * Creates a graphics device.
 *
 * @param {HTMLCanvasElement} canvas - The canvas element.
 * @param {object} options - Graphics device options.
 * @param {string[]} [options.deviceTypes] - An array of DEVICETYPE_*** constants, defining the
 * order in which the devices are attempted to get created. Defaults to an empty array. If the
 * specified array does not contain [{@link DEVICETYPE_WEBGL2} or {@link DEVICETYPE_WEBGL1}], those
 * are internally added to its end in this order. Typically, you'd only specify
 * {@link DEVICETYPE_WEBGPU}, or leave it empty.
 * @param {boolean} [options.antialias] - Boolean that indicates whether or not to perform
 * anti-aliasing if possible. Defaults to true.
 * @param {string} [options.glslangUrl] - An url to glslang script, required if
 * {@link DEVICETYPE_WEBGPU} type is added to deviceTypes array. Not used for
 * {@link DEVICETYPE_WEBGL} device type creation.
 * @param {string} [options.twgslUrl] - An url to twgsl script, required if glslangUrl was specified.
 * @returns {Promise} - Promise object representing the created graphics device.
 */
function createGraphicsDevice(canvas, options = {}) {
  var _options$antialias, _options$deviceTypes;
  // defaults
  (_options$antialias = options.antialias) != null ? _options$antialias : options.antialias = true;
  const deviceTypes = (_options$deviceTypes = options.deviceTypes) != null ? _options$deviceTypes : [];

  // automatically added fallbacks
  if (!deviceTypes.includes(DEVICETYPE_WEBGL2)) {
    deviceTypes.push(DEVICETYPE_WEBGL2);
  }
  if (!deviceTypes.includes(DEVICETYPE_WEBGL1)) {
    deviceTypes.push(DEVICETYPE_WEBGL1);
  }
  let device;
  for (let i = 0; i < deviceTypes.length; i++) {
    var _window, _window$navigator;
    const deviceType = deviceTypes[i];
    if (deviceType === DEVICETYPE_WEBGPU && (_window = window) != null && (_window$navigator = _window.navigator) != null && _window$navigator.gpu) {
      device = new WebgpuGraphicsDevice(canvas, options);
      return device.initWebGpu(options.glslangUrl, options.twgslUrl);
    }
    if (deviceType !== DEVICETYPE_WEBGPU) {
      options.preferWebGl2 = deviceType === DEVICETYPE_WEBGL2;
      device = new WebglGraphicsDevice(canvas, options);
      return Promise.resolve(device);
    }
  }
  Debug.assert(device, 'Failed to allocate graphics device based on requested device types: ', options.deviceTypes);
  return Promise.reject(new Error("Failed to allocate graphics device"));
}

export { createGraphicsDevice };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhpY3MtZGV2aWNlLWNyZWF0ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BsYXRmb3JtL2dyYXBoaWNzL2dyYXBoaWNzLWRldmljZS1jcmVhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcgfSBmcm9tICcuLi8uLi9jb3JlL2RlYnVnLmpzJztcblxuaW1wb3J0IHsgV2ViZ3B1R3JhcGhpY3NEZXZpY2UgfSBmcm9tICcuL3dlYmdwdS93ZWJncHUtZ3JhcGhpY3MtZGV2aWNlLmpzJztcbmltcG9ydCB7IERFVklDRVRZUEVfV0VCR0wyLCBERVZJQ0VUWVBFX1dFQkdMMSwgREVWSUNFVFlQRV9XRUJHUFUgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBXZWJnbEdyYXBoaWNzRGV2aWNlIH0gZnJvbSAnLi93ZWJnbC93ZWJnbC1ncmFwaGljcy1kZXZpY2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBncmFwaGljcyBkZXZpY2UuXG4gKlxuICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gY2FudmFzIC0gVGhlIGNhbnZhcyBlbGVtZW50LlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBHcmFwaGljcyBkZXZpY2Ugb3B0aW9ucy5cbiAqIEBwYXJhbSB7c3RyaW5nW119IFtvcHRpb25zLmRldmljZVR5cGVzXSAtIEFuIGFycmF5IG9mIERFVklDRVRZUEVfKioqIGNvbnN0YW50cywgZGVmaW5pbmcgdGhlXG4gKiBvcmRlciBpbiB3aGljaCB0aGUgZGV2aWNlcyBhcmUgYXR0ZW1wdGVkIHRvIGdldCBjcmVhdGVkLiBEZWZhdWx0cyB0byBhbiBlbXB0eSBhcnJheS4gSWYgdGhlXG4gKiBzcGVjaWZpZWQgYXJyYXkgZG9lcyBub3QgY29udGFpbiBbe0BsaW5rIERFVklDRVRZUEVfV0VCR0wyfSBvciB7QGxpbmsgREVWSUNFVFlQRV9XRUJHTDF9XSwgdGhvc2VcbiAqIGFyZSBpbnRlcm5hbGx5IGFkZGVkIHRvIGl0cyBlbmQgaW4gdGhpcyBvcmRlci4gVHlwaWNhbGx5LCB5b3UnZCBvbmx5IHNwZWNpZnlcbiAqIHtAbGluayBERVZJQ0VUWVBFX1dFQkdQVX0sIG9yIGxlYXZlIGl0IGVtcHR5LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hbnRpYWxpYXNdIC0gQm9vbGVhbiB0aGF0IGluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0byBwZXJmb3JtXG4gKiBhbnRpLWFsaWFzaW5nIGlmIHBvc3NpYmxlLiBEZWZhdWx0cyB0byB0cnVlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmdsc2xhbmdVcmxdIC0gQW4gdXJsIHRvIGdsc2xhbmcgc2NyaXB0LCByZXF1aXJlZCBpZlxuICoge0BsaW5rIERFVklDRVRZUEVfV0VCR1BVfSB0eXBlIGlzIGFkZGVkIHRvIGRldmljZVR5cGVzIGFycmF5LiBOb3QgdXNlZCBmb3JcbiAqIHtAbGluayBERVZJQ0VUWVBFX1dFQkdMfSBkZXZpY2UgdHlwZSBjcmVhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50d2dzbFVybF0gLSBBbiB1cmwgdG8gdHdnc2wgc2NyaXB0LCByZXF1aXJlZCBpZiBnbHNsYW5nVXJsIHdhcyBzcGVjaWZpZWQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gLSBQcm9taXNlIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGNyZWF0ZWQgZ3JhcGhpY3MgZGV2aWNlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVHcmFwaGljc0RldmljZShjYW52YXMsIG9wdGlvbnMgPSB7fSkge1xuXG4gICAgLy8gZGVmYXVsdHNcbiAgICBvcHRpb25zLmFudGlhbGlhcyA/Pz0gdHJ1ZTtcblxuICAgIGNvbnN0IGRldmljZVR5cGVzID0gb3B0aW9ucy5kZXZpY2VUeXBlcyA/PyBbXTtcblxuICAgIC8vIGF1dG9tYXRpY2FsbHkgYWRkZWQgZmFsbGJhY2tzXG4gICAgaWYgKCFkZXZpY2VUeXBlcy5pbmNsdWRlcyhERVZJQ0VUWVBFX1dFQkdMMikpIHtcbiAgICAgICAgZGV2aWNlVHlwZXMucHVzaChERVZJQ0VUWVBFX1dFQkdMMik7XG4gICAgfVxuICAgIGlmICghZGV2aWNlVHlwZXMuaW5jbHVkZXMoREVWSUNFVFlQRV9XRUJHTDEpKSB7XG4gICAgICAgIGRldmljZVR5cGVzLnB1c2goREVWSUNFVFlQRV9XRUJHTDEpO1xuICAgIH1cblxuICAgIGxldCBkZXZpY2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXZpY2VUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkZXZpY2VUeXBlID0gZGV2aWNlVHlwZXNbaV07XG5cbiAgICAgICAgaWYgKGRldmljZVR5cGUgPT09IERFVklDRVRZUEVfV0VCR1BVICYmIHdpbmRvdz8ubmF2aWdhdG9yPy5ncHUpIHtcbiAgICAgICAgICAgIGRldmljZSA9IG5ldyBXZWJncHVHcmFwaGljc0RldmljZShjYW52YXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIGRldmljZS5pbml0V2ViR3B1KG9wdGlvbnMuZ2xzbGFuZ1VybCwgb3B0aW9ucy50d2dzbFVybCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGV2aWNlVHlwZSAhPT0gREVWSUNFVFlQRV9XRUJHUFUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHJlZmVyV2ViR2wyID0gZGV2aWNlVHlwZSA9PT0gREVWSUNFVFlQRV9XRUJHTDI7XG4gICAgICAgICAgICBkZXZpY2UgPSBuZXcgV2ViZ2xHcmFwaGljc0RldmljZShjYW52YXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkZXZpY2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgRGVidWcuYXNzZXJ0KGRldmljZSwgJ0ZhaWxlZCB0byBhbGxvY2F0ZSBncmFwaGljcyBkZXZpY2UgYmFzZWQgb24gcmVxdWVzdGVkIGRldmljZSB0eXBlczogJywgb3B0aW9ucy5kZXZpY2VUeXBlcyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBhbGxvY2F0ZSBncmFwaGljcyBkZXZpY2VcIikpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVHcmFwaGljc0RldmljZSB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUdyYXBoaWNzRGV2aWNlIiwiY2FudmFzIiwib3B0aW9ucyIsIl9vcHRpb25zJGFudGlhbGlhcyIsIl9vcHRpb25zJGRldmljZVR5cGVzIiwiYW50aWFsaWFzIiwiZGV2aWNlVHlwZXMiLCJpbmNsdWRlcyIsIkRFVklDRVRZUEVfV0VCR0wyIiwicHVzaCIsIkRFVklDRVRZUEVfV0VCR0wxIiwiZGV2aWNlIiwiaSIsImxlbmd0aCIsIl93aW5kb3ciLCJfd2luZG93JG5hdmlnYXRvciIsImRldmljZVR5cGUiLCJERVZJQ0VUWVBFX1dFQkdQVSIsIndpbmRvdyIsIm5hdmlnYXRvciIsImdwdSIsIldlYmdwdUdyYXBoaWNzRGV2aWNlIiwiaW5pdFdlYkdwdSIsImdsc2xhbmdVcmwiLCJ0d2dzbFVybCIsInByZWZlcldlYkdsMiIsIldlYmdsR3JhcGhpY3NEZXZpY2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsIkRlYnVnIiwiYXNzZXJ0IiwicmVqZWN0IiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxvQkFBb0JBLENBQUNDLE1BQU0sRUFBRUMsT0FBTyxHQUFHLEVBQUUsRUFBRTtFQUFBLElBQUFDLGtCQUFBLEVBQUFDLG9CQUFBLENBQUE7QUFFaEQ7QUFDQSxFQUFBLENBQUFELGtCQUFBLEdBQUFELE9BQU8sQ0FBQ0csU0FBUyxLQUFBLElBQUEsR0FBQUYsa0JBQUEsR0FBakJELE9BQU8sQ0FBQ0csU0FBUyxHQUFLLElBQUksQ0FBQTtFQUUxQixNQUFNQyxXQUFXLEdBQUFGLENBQUFBLG9CQUFBLEdBQUdGLE9BQU8sQ0FBQ0ksV0FBVyxLQUFBLElBQUEsR0FBQUYsb0JBQUEsR0FBSSxFQUFFLENBQUE7O0FBRTdDO0FBQ0EsRUFBQSxJQUFJLENBQUNFLFdBQVcsQ0FBQ0MsUUFBUSxDQUFDQyxpQkFBaUIsQ0FBQyxFQUFFO0FBQzFDRixJQUFBQSxXQUFXLENBQUNHLElBQUksQ0FBQ0QsaUJBQWlCLENBQUMsQ0FBQTtBQUN2QyxHQUFBO0FBQ0EsRUFBQSxJQUFJLENBQUNGLFdBQVcsQ0FBQ0MsUUFBUSxDQUFDRyxpQkFBaUIsQ0FBQyxFQUFFO0FBQzFDSixJQUFBQSxXQUFXLENBQUNHLElBQUksQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQTtBQUN2QyxHQUFBO0FBRUEsRUFBQSxJQUFJQyxNQUFNLENBQUE7QUFDVixFQUFBLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTixXQUFXLENBQUNPLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFBQSxJQUFBRSxPQUFBLEVBQUFDLGlCQUFBLENBQUE7QUFDekMsSUFBQSxNQUFNQyxVQUFVLEdBQUdWLFdBQVcsQ0FBQ00sQ0FBQyxDQUFDLENBQUE7QUFFakMsSUFBQSxJQUFJSSxVQUFVLEtBQUtDLGlCQUFpQixJQUFBSCxDQUFBQSxPQUFBLEdBQUlJLE1BQU0sS0FBQSxJQUFBLElBQUEsQ0FBQUgsaUJBQUEsR0FBTkQsT0FBQSxDQUFRSyxTQUFTLGFBQWpCSixpQkFBQSxDQUFtQkssR0FBRyxFQUFFO0FBQzVEVCxNQUFBQSxNQUFNLEdBQUcsSUFBSVUsb0JBQW9CLENBQUNwQixNQUFNLEVBQUVDLE9BQU8sQ0FBQyxDQUFBO01BQ2xELE9BQU9TLE1BQU0sQ0FBQ1csVUFBVSxDQUFDcEIsT0FBTyxDQUFDcUIsVUFBVSxFQUFFckIsT0FBTyxDQUFDc0IsUUFBUSxDQUFDLENBQUE7QUFDbEUsS0FBQTtJQUVBLElBQUlSLFVBQVUsS0FBS0MsaUJBQWlCLEVBQUU7QUFDbENmLE1BQUFBLE9BQU8sQ0FBQ3VCLFlBQVksR0FBR1QsVUFBVSxLQUFLUixpQkFBaUIsQ0FBQTtBQUN2REcsTUFBQUEsTUFBTSxHQUFHLElBQUllLG1CQUFtQixDQUFDekIsTUFBTSxFQUFFQyxPQUFPLENBQUMsQ0FBQTtBQUNqRCxNQUFBLE9BQU95QixPQUFPLENBQUNDLE9BQU8sQ0FBQ2pCLE1BQU0sQ0FBQyxDQUFBO0FBQ2xDLEtBQUE7QUFDSixHQUFBO0VBRUFrQixLQUFLLENBQUNDLE1BQU0sQ0FBQ25CLE1BQU0sRUFBRSxzRUFBc0UsRUFBRVQsT0FBTyxDQUFDSSxXQUFXLENBQUMsQ0FBQTtFQUNqSCxPQUFPcUIsT0FBTyxDQUFDSSxNQUFNLENBQUMsSUFBSUMsS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQTtBQUMxRTs7OzsifQ==
