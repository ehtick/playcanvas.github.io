import { Debug, DebugHelper } from '../../../core/debug.js';
import { SAMPLETYPE_FLOAT, SAMPLETYPE_UNFILTERABLE_FLOAT, SAMPLETYPE_DEPTH } from '../constants.js';
import { WebgpuUtils } from './webgpu-utils.js';

const samplerTypes = [];
samplerTypes[SAMPLETYPE_FLOAT] = 'filtering';
samplerTypes[SAMPLETYPE_UNFILTERABLE_FLOAT] = 'non-filtering';
samplerTypes[SAMPLETYPE_DEPTH] = 'comparison';
const sampleTypes = [];
sampleTypes[SAMPLETYPE_FLOAT] = 'float';
sampleTypes[SAMPLETYPE_UNFILTERABLE_FLOAT] = 'unfilterable-float';
sampleTypes[SAMPLETYPE_DEPTH] = 'depth';

/**
 * A WebGPU implementation of the BindGroupFormat, which is a wrapper over GPUBindGroupLayout.
 *
 * @ignore
 */
class WebgpuBindGroupFormat {
  /**
   * @param {import('../bind-group-format.js').BindGroupFormat} bindGroupFormat - Bind group format.
   */
  constructor(bindGroupFormat) {
    /** @type {import('./webgpu-graphics-device.js').WebgpuGraphicsDevice} */
    const device = bindGroupFormat.device;
    const {
      key,
      descr
    } = this.createDescriptor(bindGroupFormat);

    /**
     * Unique key, used for caching
     *
     * @type {string}
     */
    this.key = key;

    // keep descr in debug mode
    Debug.call(() => {
      this.descr = descr;
    });

    /**
     * @type {GPUBindGroupLayout}
     * @private
     */
    this.bindGroupLayout = device.wgpu.createBindGroupLayout(descr);
    DebugHelper.setLabel(this.bindGroupLayout, bindGroupFormat.name);
  }
  destroy() {
    this.bindGroupLayout = null;
  }
  loseContext() {
    // this.bindGroupLayout = null;
  }

  /**
   * Returns texture binding slot.
   *
   * @param {import('../bind-group-format.js').BindGroupFormat} bindGroupFormat - Bind group format.
   * @param {number} index - The index of the texture.
   * @returns {number} - The slot index.
   */
  getTextureSlot(bindGroupFormat, index) {
    // each texture takes 2 slots (texture, sampler) and those are added after uniform buffers
    return bindGroupFormat.bufferFormats.length + index * 2;
  }

  /**
   * @param {any} bindGroupFormat - The format of the bind group.
   * @returns {any} Returns the bind group descriptor.
   */
  createDescriptor(bindGroupFormat) {
    // all WebGPU bindings:
    // - buffer: GPUBufferBindingLayout, resource type is GPUBufferBinding
    // - sampler: GPUSamplerBindingLayout, resource type is GPUSampler
    // - texture: GPUTextureBindingLayout, resource type is GPUTextureView
    // - storageTexture: GPUStorageTextureBindingLayout, resource type is GPUTextureView
    // - externalTexture: GPUExternalTextureBindingLayout, resource type is GPUExternalTexture
    const entries = [];

    // generate unique key
    let key = '';
    let index = 0;
    bindGroupFormat.bufferFormats.forEach(bufferFormat => {
      const visibility = WebgpuUtils.shaderStage(bufferFormat.visibility);
      key += `#${index}U:${visibility}`;
      entries.push({
        binding: index++,
        visibility: visibility,
        buffer: {
          type: 'uniform',
          // "uniform", "storage", "read-only-storage"

          // whether this binding requires a dynamic offset
          // currently all UBs are dynamic and need the offset
          hasDynamicOffset: true

          // defaults to 0 meaning no validation, can do early size validation using it
          // minBindingSize
        }
      });
    });

    bindGroupFormat.textureFormats.forEach(textureFormat => {
      const visibility = WebgpuUtils.shaderStage(textureFormat.visibility);

      // texture
      const sampleType = textureFormat.sampleType;
      const viewDimension = textureFormat.textureDimension;
      const multisampled = false;
      const gpuSampleType = sampleTypes[sampleType];
      Debug.assert(gpuSampleType);
      key += `#${index}T:${visibility}-${gpuSampleType}-${viewDimension}-${multisampled}`;
      entries.push({
        binding: index++,
        visibility: visibility,
        texture: {
          // Indicates the type required for texture views bound to this binding.
          // "float", "unfilterable-float", "depth", "sint", "uint",
          sampleType: gpuSampleType,
          // Indicates the required dimension for texture views bound to this binding.
          // "1d", "2d", "2d-array", "cube", "cube-array", "3d"
          viewDimension: viewDimension,
          // Indicates whether or not texture views bound to this binding must be multisampled
          multisampled: multisampled
        }
      });

      // sampler
      const gpuSamplerType = samplerTypes[sampleType];
      Debug.assert(gpuSamplerType);
      key += `#${index}S:${visibility}-${gpuSamplerType}`;
      entries.push({
        binding: index++,
        visibility: visibility,
        sampler: {
          // Indicates the required type of a sampler bound to this bindings
          // 'filtering', 'non-filtering', 'comparison'
          type: gpuSamplerType
        }
      });
    });

    /** @type {GPUBindGroupLayoutDescriptor} */
    const descr = {
      entries: entries
    };
    return {
      key,
      descr
    };
  }
}

export { WebgpuBindGroupFormat };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LWJpbmQtZ3JvdXAtZm9ybWF0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcGxhdGZvcm0vZ3JhcGhpY3Mvd2ViZ3B1L3dlYmdwdS1iaW5kLWdyb3VwLWZvcm1hdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWJ1ZywgRGVidWdIZWxwZXIgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2RlYnVnLmpzJztcbmltcG9ydCB7IFNBTVBMRVRZUEVfRkxPQVQsIFNBTVBMRVRZUEVfVU5GSUxURVJBQkxFX0ZMT0FULCBTQU1QTEVUWVBFX0RFUFRIIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHsgV2ViZ3B1VXRpbHMgfSBmcm9tICcuL3dlYmdwdS11dGlscy5qcyc7XG5cbmNvbnN0IHNhbXBsZXJUeXBlcyA9IFtdO1xuc2FtcGxlclR5cGVzW1NBTVBMRVRZUEVfRkxPQVRdID0gJ2ZpbHRlcmluZyc7XG5zYW1wbGVyVHlwZXNbU0FNUExFVFlQRV9VTkZJTFRFUkFCTEVfRkxPQVRdID0gJ25vbi1maWx0ZXJpbmcnO1xuc2FtcGxlclR5cGVzW1NBTVBMRVRZUEVfREVQVEhdID0gJ2NvbXBhcmlzb24nO1xuXG5jb25zdCBzYW1wbGVUeXBlcyA9IFtdO1xuc2FtcGxlVHlwZXNbU0FNUExFVFlQRV9GTE9BVF0gPSAnZmxvYXQnO1xuc2FtcGxlVHlwZXNbU0FNUExFVFlQRV9VTkZJTFRFUkFCTEVfRkxPQVRdID0gJ3VuZmlsdGVyYWJsZS1mbG9hdCc7XG5zYW1wbGVUeXBlc1tTQU1QTEVUWVBFX0RFUFRIXSA9ICdkZXB0aCc7XG5cbi8qKlxuICogQSBXZWJHUFUgaW1wbGVtZW50YXRpb24gb2YgdGhlIEJpbmRHcm91cEZvcm1hdCwgd2hpY2ggaXMgYSB3cmFwcGVyIG92ZXIgR1BVQmluZEdyb3VwTGF5b3V0LlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgV2ViZ3B1QmluZEdyb3VwRm9ybWF0IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vYmluZC1ncm91cC1mb3JtYXQuanMnKS5CaW5kR3JvdXBGb3JtYXR9IGJpbmRHcm91cEZvcm1hdCAtIEJpbmQgZ3JvdXAgZm9ybWF0LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGJpbmRHcm91cEZvcm1hdCkge1xuXG4gICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuL3dlYmdwdS1ncmFwaGljcy1kZXZpY2UuanMnKS5XZWJncHVHcmFwaGljc0RldmljZX0gKi9cbiAgICAgICAgY29uc3QgZGV2aWNlID0gYmluZEdyb3VwRm9ybWF0LmRldmljZTtcblxuICAgICAgICBjb25zdCB7IGtleSwgZGVzY3IgfSA9IHRoaXMuY3JlYXRlRGVzY3JpcHRvcihiaW5kR3JvdXBGb3JtYXQpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbmlxdWUga2V5LCB1c2VkIGZvciBjYWNoaW5nXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcblxuICAgICAgICAvLyBrZWVwIGRlc2NyIGluIGRlYnVnIG1vZGVcbiAgICAgICAgRGVidWcuY2FsbCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRlc2NyID0gZGVzY3I7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7R1BVQmluZEdyb3VwTGF5b3V0fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5iaW5kR3JvdXBMYXlvdXQgPSBkZXZpY2Uud2dwdS5jcmVhdGVCaW5kR3JvdXBMYXlvdXQoZGVzY3IpO1xuICAgICAgICBEZWJ1Z0hlbHBlci5zZXRMYWJlbCh0aGlzLmJpbmRHcm91cExheW91dCwgYmluZEdyb3VwRm9ybWF0Lm5hbWUpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmluZEdyb3VwTGF5b3V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBsb3NlQ29udGV4dCgpIHtcbiAgICAgICAgLy8gdGhpcy5iaW5kR3JvdXBMYXlvdXQgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGV4dHVyZSBiaW5kaW5nIHNsb3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vYmluZC1ncm91cC1mb3JtYXQuanMnKS5CaW5kR3JvdXBGb3JtYXR9IGJpbmRHcm91cEZvcm1hdCAtIEJpbmQgZ3JvdXAgZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgdGV4dHVyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtIFRoZSBzbG90IGluZGV4LlxuICAgICAqL1xuICAgIGdldFRleHR1cmVTbG90KGJpbmRHcm91cEZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgLy8gZWFjaCB0ZXh0dXJlIHRha2VzIDIgc2xvdHMgKHRleHR1cmUsIHNhbXBsZXIpIGFuZCB0aG9zZSBhcmUgYWRkZWQgYWZ0ZXIgdW5pZm9ybSBidWZmZXJzXG4gICAgICAgIHJldHVybiBiaW5kR3JvdXBGb3JtYXQuYnVmZmVyRm9ybWF0cy5sZW5ndGggKyBpbmRleCAqIDI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHthbnl9IGJpbmRHcm91cEZvcm1hdCAtIFRoZSBmb3JtYXQgb2YgdGhlIGJpbmQgZ3JvdXAuXG4gICAgICogQHJldHVybnMge2FueX0gUmV0dXJucyB0aGUgYmluZCBncm91cCBkZXNjcmlwdG9yLlxuICAgICAqL1xuICAgIGNyZWF0ZURlc2NyaXB0b3IoYmluZEdyb3VwRm9ybWF0KSB7XG4gICAgICAgIC8vIGFsbCBXZWJHUFUgYmluZGluZ3M6XG4gICAgICAgIC8vIC0gYnVmZmVyOiBHUFVCdWZmZXJCaW5kaW5nTGF5b3V0LCByZXNvdXJjZSB0eXBlIGlzIEdQVUJ1ZmZlckJpbmRpbmdcbiAgICAgICAgLy8gLSBzYW1wbGVyOiBHUFVTYW1wbGVyQmluZGluZ0xheW91dCwgcmVzb3VyY2UgdHlwZSBpcyBHUFVTYW1wbGVyXG4gICAgICAgIC8vIC0gdGV4dHVyZTogR1BVVGV4dHVyZUJpbmRpbmdMYXlvdXQsIHJlc291cmNlIHR5cGUgaXMgR1BVVGV4dHVyZVZpZXdcbiAgICAgICAgLy8gLSBzdG9yYWdlVGV4dHVyZTogR1BVU3RvcmFnZVRleHR1cmVCaW5kaW5nTGF5b3V0LCByZXNvdXJjZSB0eXBlIGlzIEdQVVRleHR1cmVWaWV3XG4gICAgICAgIC8vIC0gZXh0ZXJuYWxUZXh0dXJlOiBHUFVFeHRlcm5hbFRleHR1cmVCaW5kaW5nTGF5b3V0LCByZXNvdXJjZSB0eXBlIGlzIEdQVUV4dGVybmFsVGV4dHVyZVxuICAgICAgICBjb25zdCBlbnRyaWVzID0gW107XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgdW5pcXVlIGtleVxuICAgICAgICBsZXQga2V5ID0gJyc7XG5cbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgYmluZEdyb3VwRm9ybWF0LmJ1ZmZlckZvcm1hdHMuZm9yRWFjaCgoYnVmZmVyRm9ybWF0KSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IHZpc2liaWxpdHkgPSBXZWJncHVVdGlscy5zaGFkZXJTdGFnZShidWZmZXJGb3JtYXQudmlzaWJpbGl0eSk7XG4gICAgICAgICAgICBrZXkgKz0gYCMke2luZGV4fVU6JHt2aXNpYmlsaXR5fWA7XG5cbiAgICAgICAgICAgIGVudHJpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgYmluZGluZzogaW5kZXgrKyxcbiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmlsaXR5LFxuXG4gICAgICAgICAgICAgICAgYnVmZmVyOiB7XG5cbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3VuaWZvcm0nLCAvLyBcInVuaWZvcm1cIiwgXCJzdG9yYWdlXCIsIFwicmVhZC1vbmx5LXN0b3JhZ2VcIlxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZXRoZXIgdGhpcyBiaW5kaW5nIHJlcXVpcmVzIGEgZHluYW1pYyBvZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudGx5IGFsbCBVQnMgYXJlIGR5bmFtaWMgYW5kIG5lZWQgdGhlIG9mZnNldFxuICAgICAgICAgICAgICAgICAgICBoYXNEeW5hbWljT2Zmc2V0OiB0cnVlXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZGVmYXVsdHMgdG8gMCBtZWFuaW5nIG5vIHZhbGlkYXRpb24sIGNhbiBkbyBlYXJseSBzaXplIHZhbGlkYXRpb24gdXNpbmcgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gbWluQmluZGluZ1NpemVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYmluZEdyb3VwRm9ybWF0LnRleHR1cmVGb3JtYXRzLmZvckVhY2goKHRleHR1cmVGb3JtYXQpID0+IHtcblxuICAgICAgICAgICAgY29uc3QgdmlzaWJpbGl0eSA9IFdlYmdwdVV0aWxzLnNoYWRlclN0YWdlKHRleHR1cmVGb3JtYXQudmlzaWJpbGl0eSk7XG5cbiAgICAgICAgICAgIC8vIHRleHR1cmVcbiAgICAgICAgICAgIGNvbnN0IHNhbXBsZVR5cGUgPSB0ZXh0dXJlRm9ybWF0LnNhbXBsZVR5cGU7XG4gICAgICAgICAgICBjb25zdCB2aWV3RGltZW5zaW9uID0gdGV4dHVyZUZvcm1hdC50ZXh0dXJlRGltZW5zaW9uO1xuICAgICAgICAgICAgY29uc3QgbXVsdGlzYW1wbGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNvbnN0IGdwdVNhbXBsZVR5cGUgPSBzYW1wbGVUeXBlc1tzYW1wbGVUeXBlXTtcbiAgICAgICAgICAgIERlYnVnLmFzc2VydChncHVTYW1wbGVUeXBlKTtcblxuICAgICAgICAgICAga2V5ICs9IGAjJHtpbmRleH1UOiR7dmlzaWJpbGl0eX0tJHtncHVTYW1wbGVUeXBlfS0ke3ZpZXdEaW1lbnNpb259LSR7bXVsdGlzYW1wbGVkfWA7XG5cbiAgICAgICAgICAgIGVudHJpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgYmluZGluZzogaW5kZXgrKyxcbiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmlsaXR5LFxuICAgICAgICAgICAgICAgIHRleHR1cmU6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW5kaWNhdGVzIHRoZSB0eXBlIHJlcXVpcmVkIGZvciB0ZXh0dXJlIHZpZXdzIGJvdW5kIHRvIHRoaXMgYmluZGluZy5cbiAgICAgICAgICAgICAgICAgICAgLy8gXCJmbG9hdFwiLCBcInVuZmlsdGVyYWJsZS1mbG9hdFwiLCBcImRlcHRoXCIsIFwic2ludFwiLCBcInVpbnRcIixcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlVHlwZTogZ3B1U2FtcGxlVHlwZSxcblxuICAgICAgICAgICAgICAgICAgICAvLyBJbmRpY2F0ZXMgdGhlIHJlcXVpcmVkIGRpbWVuc2lvbiBmb3IgdGV4dHVyZSB2aWV3cyBib3VuZCB0byB0aGlzIGJpbmRpbmcuXG4gICAgICAgICAgICAgICAgICAgIC8vIFwiMWRcIiwgXCIyZFwiLCBcIjJkLWFycmF5XCIsIFwiY3ViZVwiLCBcImN1YmUtYXJyYXlcIiwgXCIzZFwiXG4gICAgICAgICAgICAgICAgICAgIHZpZXdEaW1lbnNpb246IHZpZXdEaW1lbnNpb24sXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRleHR1cmUgdmlld3MgYm91bmQgdG8gdGhpcyBiaW5kaW5nIG11c3QgYmUgbXVsdGlzYW1wbGVkXG4gICAgICAgICAgICAgICAgICAgIG11bHRpc2FtcGxlZDogbXVsdGlzYW1wbGVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHNhbXBsZXJcbiAgICAgICAgICAgIGNvbnN0IGdwdVNhbXBsZXJUeXBlID0gc2FtcGxlclR5cGVzW3NhbXBsZVR5cGVdO1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KGdwdVNhbXBsZXJUeXBlKTtcblxuICAgICAgICAgICAga2V5ICs9IGAjJHtpbmRleH1TOiR7dmlzaWJpbGl0eX0tJHtncHVTYW1wbGVyVHlwZX1gO1xuXG4gICAgICAgICAgICBlbnRyaWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGJpbmRpbmc6IGluZGV4KyssXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJpbGl0eSxcbiAgICAgICAgICAgICAgICBzYW1wbGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluZGljYXRlcyB0aGUgcmVxdWlyZWQgdHlwZSBvZiBhIHNhbXBsZXIgYm91bmQgdG8gdGhpcyBiaW5kaW5nc1xuICAgICAgICAgICAgICAgICAgICAvLyAnZmlsdGVyaW5nJywgJ25vbi1maWx0ZXJpbmcnLCAnY29tcGFyaXNvbidcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZ3B1U2FtcGxlclR5cGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHtHUFVCaW5kR3JvdXBMYXlvdXREZXNjcmlwdG9yfSAqL1xuICAgICAgICBjb25zdCBkZXNjciA9IHtcbiAgICAgICAgICAgIGVudHJpZXM6IGVudHJpZXNcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgZGVzY3JcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFdlYmdwdUJpbmRHcm91cEZvcm1hdCB9O1xuIl0sIm5hbWVzIjpbInNhbXBsZXJUeXBlcyIsIlNBTVBMRVRZUEVfRkxPQVQiLCJTQU1QTEVUWVBFX1VORklMVEVSQUJMRV9GTE9BVCIsIlNBTVBMRVRZUEVfREVQVEgiLCJzYW1wbGVUeXBlcyIsIldlYmdwdUJpbmRHcm91cEZvcm1hdCIsImNvbnN0cnVjdG9yIiwiYmluZEdyb3VwRm9ybWF0IiwiZGV2aWNlIiwia2V5IiwiZGVzY3IiLCJjcmVhdGVEZXNjcmlwdG9yIiwiRGVidWciLCJjYWxsIiwiYmluZEdyb3VwTGF5b3V0Iiwid2dwdSIsImNyZWF0ZUJpbmRHcm91cExheW91dCIsIkRlYnVnSGVscGVyIiwic2V0TGFiZWwiLCJuYW1lIiwiZGVzdHJveSIsImxvc2VDb250ZXh0IiwiZ2V0VGV4dHVyZVNsb3QiLCJpbmRleCIsImJ1ZmZlckZvcm1hdHMiLCJsZW5ndGgiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImJ1ZmZlckZvcm1hdCIsInZpc2liaWxpdHkiLCJXZWJncHVVdGlscyIsInNoYWRlclN0YWdlIiwicHVzaCIsImJpbmRpbmciLCJidWZmZXIiLCJ0eXBlIiwiaGFzRHluYW1pY09mZnNldCIsInRleHR1cmVGb3JtYXRzIiwidGV4dHVyZUZvcm1hdCIsInNhbXBsZVR5cGUiLCJ2aWV3RGltZW5zaW9uIiwidGV4dHVyZURpbWVuc2lvbiIsIm11bHRpc2FtcGxlZCIsImdwdVNhbXBsZVR5cGUiLCJhc3NlcnQiLCJ0ZXh0dXJlIiwiZ3B1U2FtcGxlclR5cGUiLCJzYW1wbGVyIl0sIm1hcHBpbmdzIjoiOzs7O0FBS0EsTUFBTUEsWUFBWSxHQUFHLEVBQUUsQ0FBQTtBQUN2QkEsWUFBWSxDQUFDQyxnQkFBZ0IsQ0FBQyxHQUFHLFdBQVcsQ0FBQTtBQUM1Q0QsWUFBWSxDQUFDRSw2QkFBNkIsQ0FBQyxHQUFHLGVBQWUsQ0FBQTtBQUM3REYsWUFBWSxDQUFDRyxnQkFBZ0IsQ0FBQyxHQUFHLFlBQVksQ0FBQTtBQUU3QyxNQUFNQyxXQUFXLEdBQUcsRUFBRSxDQUFBO0FBQ3RCQSxXQUFXLENBQUNILGdCQUFnQixDQUFDLEdBQUcsT0FBTyxDQUFBO0FBQ3ZDRyxXQUFXLENBQUNGLDZCQUE2QixDQUFDLEdBQUcsb0JBQW9CLENBQUE7QUFDakVFLFdBQVcsQ0FBQ0QsZ0JBQWdCLENBQUMsR0FBRyxPQUFPLENBQUE7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNRSxxQkFBcUIsQ0FBQztBQUN4QjtBQUNKO0FBQ0E7RUFDSUMsV0FBV0Es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
