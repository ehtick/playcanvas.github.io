/**
 * @license
 * PlayCanvas Engine v1.59.0-preview revision 797466563 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../../../core/debug.js';
import { ShaderProcessor } from '../shader-processor.js';

class WebgpuShader {

  constructor(shader) {
    this._vertexCode = void 0;
    this._fragmentCode = void 0;
    this.shader = shader;
    const definition = shader.definition;
    Debug.assert(definition);
    if (definition.processingOptions) {
      this.process();
    }
  }

  destroy(shader) {
    this._vertexCode = null;
    this._fragmentCode = null;
  }
  process() {
    const shader = this.shader;

    const processed = ShaderProcessor.run(shader.device, shader.definition, shader);

    Debug.call(() => {
      this.processed = processed;
    });
    this._vertexCode = this.transpile(processed.vshader, 'vertex', shader.definition.vshader);
    this._fragmentCode = this.transpile(processed.fshader, 'fragment', shader.definition.fshader);
    if (!(this._vertexCode && this._fragmentCode)) {
      shader.failed = true;
    } else {
      shader.ready = true;
    }
    shader.meshUniformBufferFormat = processed.meshUniformBufferFormat;
    shader.meshBindGroupFormat = processed.meshBindGroupFormat;
  }
  transpile(src, shaderType, originalSrc) {
    try {
      return this.shader.device.glslang.compileGLSL(src, shaderType);
    } catch (err) {
      console.error(`Failed to transpile webgl ${shaderType} shader with id ${this.shader.id} to WebGPU: [${err.message}]`, {
        processed: src,
        original: originalSrc,
        shader: this.shader
      });
    }
  }
  get vertexCode() {
    Debug.assert(this._vertexCode);
    return this._vertexCode;
  }
  get fragmentCode() {
    Debug.assert(this._fragmentCode);
    return this._fragmentCode;
  }

  loseContext() {}

  restoreContext(device, shader) {}
}

export { WebgpuShader };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LXNoYWRlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BsYXRmb3JtL2dyYXBoaWNzL3dlYmdwdS93ZWJncHUtc2hhZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbmltcG9ydCB7IFNoYWRlclByb2Nlc3NvciB9IGZyb20gJy4uL3NoYWRlci1wcm9jZXNzb3IuanMnO1xuXG4vKipcbiAqIEEgV2ViR1BVIGltcGxlbWVudGF0aW9uIG9mIHRoZSBTaGFkZXIuXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBXZWJncHVTaGFkZXIge1xuICAgIC8qKlxuICAgICAqIFRyYW5zcGlsZWQgdmVydGV4IHNoYWRlciBjb2RlLlxuICAgICAqXG4gICAgICogQHR5cGUge1VpbnQzMkFycmF5fVxuICAgICAqL1xuICAgIF92ZXJ0ZXhDb2RlO1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNwaWxlZCBmcmFnbWVudCBzaGFkZXIgY29kZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtVaW50MzJBcnJheX1cbiAgICAgKi9cbiAgICBfZnJhZ21lbnRDb2RlO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uL3NoYWRlci5qcycpLlNoYWRlcn0gc2hhZGVyIC0gVGhlIHNoYWRlci5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzaGFkZXIpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtpbXBvcnQoJy4uL3NoYWRlci5qcycpLlNoYWRlcn0gKi9cbiAgICAgICAgdGhpcy5zaGFkZXIgPSBzaGFkZXI7XG5cbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHNoYWRlci5kZWZpbml0aW9uO1xuICAgICAgICBEZWJ1Zy5hc3NlcnQoZGVmaW5pdGlvbik7XG5cbiAgICAgICAgaWYgKGRlZmluaXRpb24ucHJvY2Vzc2luZ09wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2VzcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRnJlZSB0aGUgV2ViR1BVIHJlc291cmNlcyBhc3NvY2lhdGVkIHdpdGggYSBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vc2hhZGVyLmpzJykuU2hhZGVyfSBzaGFkZXIgLSBUaGUgc2hhZGVyIHRvIGZyZWUuXG4gICAgICovXG4gICAgZGVzdHJveShzaGFkZXIpIHtcbiAgICAgICAgdGhpcy5fdmVydGV4Q29kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZyYWdtZW50Q29kZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcHJvY2VzcygpIHtcbiAgICAgICAgY29uc3Qgc2hhZGVyID0gdGhpcy5zaGFkZXI7XG5cbiAgICAgICAgLy8gcHJvY2VzcyB0aGUgc2hhZGVyIHNvdXJjZSB0byBhbGxvdyBmb3IgdW5pZm9ybXNcbiAgICAgICAgY29uc3QgcHJvY2Vzc2VkID0gU2hhZGVyUHJvY2Vzc29yLnJ1bihzaGFkZXIuZGV2aWNlLCBzaGFkZXIuZGVmaW5pdGlvbiwgc2hhZGVyKTtcblxuICAgICAgICAvLyBrZWVwIHJlZmVyZW5jZSB0byBwcm9jZXNzZWQgc2hhZGVycyBpbiBkZWJ1ZyBtb2RlXG4gICAgICAgIERlYnVnLmNhbGwoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzZWQgPSBwcm9jZXNzZWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3ZlcnRleENvZGUgPSB0aGlzLnRyYW5zcGlsZShwcm9jZXNzZWQudnNoYWRlciwgJ3ZlcnRleCcsIHNoYWRlci5kZWZpbml0aW9uLnZzaGFkZXIpO1xuICAgICAgICB0aGlzLl9mcmFnbWVudENvZGUgPSB0aGlzLnRyYW5zcGlsZShwcm9jZXNzZWQuZnNoYWRlciwgJ2ZyYWdtZW50Jywgc2hhZGVyLmRlZmluaXRpb24uZnNoYWRlcik7XG5cbiAgICAgICAgaWYgKCEodGhpcy5fdmVydGV4Q29kZSAmJiB0aGlzLl9mcmFnbWVudENvZGUpKSB7XG4gICAgICAgICAgICBzaGFkZXIuZmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoYWRlci5yZWFkeSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBzaGFkZXIubWVzaFVuaWZvcm1CdWZmZXJGb3JtYXQgPSBwcm9jZXNzZWQubWVzaFVuaWZvcm1CdWZmZXJGb3JtYXQ7XG4gICAgICAgIHNoYWRlci5tZXNoQmluZEdyb3VwRm9ybWF0ID0gcHJvY2Vzc2VkLm1lc2hCaW5kR3JvdXBGb3JtYXQ7XG4gICAgfVxuXG4gICAgdHJhbnNwaWxlKHNyYywgc2hhZGVyVHlwZSwgb3JpZ2luYWxTcmMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNoYWRlci5kZXZpY2UuZ2xzbGFuZy5jb21waWxlR0xTTChzcmMsIHNoYWRlclR5cGUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byB0cmFuc3BpbGUgd2ViZ2wgJHtzaGFkZXJUeXBlfSBzaGFkZXIgd2l0aCBpZCAke3RoaXMuc2hhZGVyLmlkfSB0byBXZWJHUFU6IFske2Vyci5tZXNzYWdlfV1gLCB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkOiBzcmMsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWw6IG9yaWdpbmFsU3JjLFxuICAgICAgICAgICAgICAgIHNoYWRlcjogdGhpcy5zaGFkZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHZlcnRleENvZGUoKSB7XG4gICAgICAgIERlYnVnLmFzc2VydCh0aGlzLl92ZXJ0ZXhDb2RlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZlcnRleENvZGU7XG4gICAgfVxuXG4gICAgZ2V0IGZyYWdtZW50Q29kZSgpIHtcbiAgICAgICAgRGVidWcuYXNzZXJ0KHRoaXMuX2ZyYWdtZW50Q29kZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9mcmFnbWVudENvZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzcG9zZSB0aGUgc2hhZGVyIHdoZW4gdGhlIGNvbnRleHQgaGFzIGJlZW4gbG9zdC5cbiAgICAgKi9cbiAgICBsb3NlQ29udGV4dCgpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXN0b3JlIHNoYWRlciBhZnRlciB0aGUgY29udGV4dCBoYXMgYmVlbiBvYnRhaW5lZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9ncmFwaGljcy1kZXZpY2UuanMnKS5HcmFwaGljc0RldmljZX0gZGV2aWNlIC0gVGhlIGdyYXBoaWNzIGRldmljZS5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vc2hhZGVyLmpzJykuU2hhZGVyfSBzaGFkZXIgLSBUaGUgc2hhZGVyIHRvIHJlc3RvcmUuXG4gICAgICovXG4gICAgcmVzdG9yZUNvbnRleHQoZGV2aWNlLCBzaGFkZXIpIHtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFdlYmdwdVNoYWRlciB9O1xuIl0sIm5hbWVzIjpbIldlYmdwdVNoYWRlciIsImNvbnN0cnVjdG9yIiwic2hhZGVyIiwiX3ZlcnRleENvZGUiLCJfZnJhZ21lbnRDb2RlIiwiZGVmaW5pdGlvbiIsIkRlYnVnIiwiYXNzZXJ0IiwicHJvY2Vzc2luZ09wdGlvbnMiLCJwcm9jZXNzIiwiZGVzdHJveSIsInByb2Nlc3NlZCIsIlNoYWRlclByb2Nlc3NvciIsInJ1biIsImRldmljZSIsImNhbGwiLCJ0cmFuc3BpbGUiLCJ2c2hhZGVyIiwiZnNoYWRlciIsImZhaWxlZCIsInJlYWR5IiwibWVzaFVuaWZvcm1CdWZmZXJGb3JtYXQiLCJtZXNoQmluZEdyb3VwRm9ybWF0Iiwic3JjIiwic2hhZGVyVHlwZSIsIm9yaWdpbmFsU3JjIiwiZ2xzbGFuZyIsImNvbXBpbGVHTFNMIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiaWQiLCJtZXNzYWdlIiwib3JpZ2luYWwiLCJ2ZXJ0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
