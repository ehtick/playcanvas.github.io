/**
 * @license
 * PlayCanvas Engine v1.59.0-preview revision 797466563 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug, DebugHelper } from '../../../core/debug.js';
import { TRACEID_PIPELINELAYOUT_ALLOC, TRACEID_RENDERPIPELINE_ALLOC } from '../../../core/constants.js';
import { WebgpuVertexBufferLayout } from './webgpu-vertex-buffer-layout.js';

let _pipelineId = 0;
let _layoutId = 0;
const _primitiveTopology = ['point-list',
'line-list',
undefined,
'line-strip',
'triangle-list',
'triangle-strip',
undefined];

const _blendOperation = ['add',
'subtract',
'reverse-subtract',
'min',
'max'];

const _blendFactor = ['zero',
'one',
'src',
'one-minus-src',
'dst',
'one-minus-dst',
'src-alpha',
'src-alpha-saturated',
'one-minus-src-alpha',
'dst-alpha',
'one-minus-dst-alpha',
'constant',
'one-minus-constant',
undefined,
undefined];

const _bindGroupLayouts = [];

class WebgpuRenderPipeline {
  constructor(device) {
    this.device = device;

    this.vertexBufferLayout = new WebgpuVertexBufferLayout();

    this.cache = new Map();
  }
  get(primitive, vertexFormat0, vertexFormat1, shader, renderTarget, bindGroupFormats, renderState) {
    const key = this.getKey(primitive, vertexFormat0, vertexFormat1, shader, renderTarget, bindGroupFormats, renderState);

    let pipeline = this.cache.get(key);
    if (!pipeline) {
      const primitiveTopology = _primitiveTopology[primitive.type];
      Debug.assert(primitiveTopology, `Unsupported primitive topology ${primitive}`);

      const pipelineLayout = this.getPipelineLayout(bindGroupFormats);

      const vertexBufferLayout = this.vertexBufferLayout.get(vertexFormat0, vertexFormat1);

      pipeline = this.create(primitiveTopology, shader.impl, renderTarget, pipelineLayout, renderState, vertexBufferLayout);
      this.cache.set(key, pipeline);
    }
    return pipeline;
  }

  getKey(primitive, vertexFormat0, vertexFormat1, shader, renderTarget, bindGroupFormats, renderState) {
    let bindGroupKey = '';
    for (let i = 0; i < bindGroupFormats.length; i++) {
      bindGroupKey += bindGroupFormats[i].key;
    }
    const vertexBufferLayoutKey = this.vertexBufferLayout.getKey(vertexFormat0, vertexFormat1);
    const renderTargetKey = renderTarget.impl.key;
    const renderStateKey = renderState.blendKey;
    return vertexBufferLayoutKey + shader.impl.vertexCode + shader.impl.fragmentCode + renderTargetKey + renderStateKey + primitive.type + bindGroupKey;
  }

  getPipelineLayout(bindGroupFormats) {
    bindGroupFormats.forEach(format => {
      _bindGroupLayouts.push(format.bindGroupLayout);
    });
    const descr = {
      bindGroupLayouts: _bindGroupLayouts
    };
    _layoutId++;
    DebugHelper.setLabel(descr, `PipelineLayoutDescr-${_layoutId}`);

    const pipelineLayout = this.device.wgpu.createPipelineLayout(descr);
    DebugHelper.setLabel(pipelineLayout, `PipelineLayout-${_layoutId}`);
    Debug.trace(TRACEID_PIPELINELAYOUT_ALLOC, `Alloc: Id ${_layoutId}`, descr);
    _bindGroupLayouts.length = 0;
    return pipelineLayout;
  }
  getBlend(renderState) {
    const blend = {
      color: {
        operation: _blendOperation[renderState.blendEquationColor],
        srcFactor: _blendFactor[renderState.blendSrcColor],
        dstFactor: _blendFactor[renderState.blendDstColor]
      },
      alpha: {
        operation: _blendOperation[renderState.blendEquationAlpha],
        srcFactor: _blendFactor[renderState.blendSrcAlpha],
        dstFactor: _blendFactor[renderState.blendDstAlpha]
      }
    };

    Debug.assert(blend.color.srcFactor !== undefined);
    Debug.assert(blend.color.dstFactor !== undefined);
    Debug.assert(blend.alpha.srcFactor !== undefined);
    Debug.assert(blend.alpha.dstFactor !== undefined);
    return blend;
  }
  create(primitiveTopology, webgpuShader, renderTarget, pipelineLayout, renderState, vertexBufferLayout) {
    const wgpu = this.device.wgpu;

    const depthStencil = renderTarget.depth ? {
      depthWriteEnabled: true,
      depthCompare: 'less',
      format: renderTarget.impl.depthFormat
    } : undefined;

    const descr = {
      vertex: {
        module: wgpu.createShaderModule({
          code: webgpuShader.vertexCode
        }),
        entryPoint: 'main',
        buffers: vertexBufferLayout
      },
      fragment: {
        module: wgpu.createShaderModule({
          code: webgpuShader.fragmentCode
        }),
        entryPoint: 'main',
        targets: [{
          format: renderTarget.impl.colorFormat,
          writeMask: GPUColorWrite.ALL,
          blend: this.getBlend(renderState)
        }]
      },
      primitive: {
        topology: primitiveTopology,
        cullMode: "none"
      },
      depthStencil,
      multisample: {
        count: renderTarget.samples
      },
      layout: pipelineLayout
    };
    _pipelineId++;
    DebugHelper.setLabel(descr, `RenderPipelineDescr-${_pipelineId}`);
    const pipeline = wgpu.createRenderPipeline(descr);
    DebugHelper.setLabel(pipeline, `RenderPipeline-${_pipelineId}`);
    Debug.trace(TRACEID_RENDERPIPELINE_ALLOC, `Alloc: Id ${_pipelineId}`, descr);
    return pipeline;
  }
}

export { WebgpuRenderPipeline };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
