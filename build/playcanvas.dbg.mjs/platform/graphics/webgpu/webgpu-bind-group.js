/**
 * @license
 * PlayCanvas Engine v1.62.0-dev revision 7d088032c (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { DebugHelper, Debug } from '../../../core/debug.js';

/**
 * A WebGPU implementation of the BindGroup, which is a wrapper over GPUBindGroup.
 *
 * @ignore
 */
class WebgpuBindGroup {
  constructor() {
    this.bindGroup = void 0;
  }
  update(bindGroup) {
    this.destroy();
    const device = bindGroup.device;

    /** @type {GPUBindGroupDescriptor} */
    const descr = this.createDescriptor(device, bindGroup);
    DebugHelper.setLabel(descr, bindGroup.name);
    this.bindGroup = device.wgpu.createBindGroup(descr);
  }
  destroy() {
    // this.bindGroup?.destroy();
    this.bindGroup = null;
  }

  /**
   * Creates a bind group descriptor in WebGPU format
   *
   * @param {import('./webgpu-graphics-device.js').WebgpuGraphicsDevice} device - Graphics device.
   * @param {import('../bind-group.js').BindGroup} bindGroup - Bind group to create the
   * descriptor for.
   * @returns {object} - Returns the generated descriptor of type
   * GPUBindGroupDescriptor, which can be used to create a GPUBindGroup
   */
  createDescriptor(device, bindGroup) {
    // Note: This needs to match WebgpuBindGroupFormat.createDescriptor
    const entries = [];

    // uniform buffers
    let index = 0;
    bindGroup.uniformBuffers.forEach(ub => {
      const buffer = ub.impl.buffer;
      Debug.assert(buffer, 'NULL uniform buffer cannot be used by the bind group');
      entries.push({
        binding: index++,
        resource: {
          buffer: buffer
        }
      });
    });

    // textures
    bindGroup.textures.forEach(tex => {
      /** @type {import('./webgpu-texture.js').WebgpuTexture} */
      const wgpuTexture = tex.impl;

      // texture
      const view = wgpuTexture.getView(device);
      Debug.assert(view, 'NULL texture view cannot be used by the bind group');
      entries.push({
        binding: index++,
        resource: view
      });

      // sampler
      const sampler = wgpuTexture.getSampler(device);
      Debug.assert(sampler, 'NULL sampler cannot be used by the bind group');
      entries.push({
        binding: index++,
        resource: sampler
      });
    });
    return {
      layout: bindGroup.format.impl.bindGroupLayout,
      entries: entries
    };
  }
}

export { WebgpuBindGroup };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LWJpbmQtZ3JvdXAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wbGF0Zm9ybS9ncmFwaGljcy93ZWJncHUvd2ViZ3B1LWJpbmQtZ3JvdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcsIERlYnVnSGVscGVyIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbi8qKlxuICogQSBXZWJHUFUgaW1wbGVtZW50YXRpb24gb2YgdGhlIEJpbmRHcm91cCwgd2hpY2ggaXMgYSB3cmFwcGVyIG92ZXIgR1BVQmluZEdyb3VwLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgV2ViZ3B1QmluZEdyb3VwIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7R1BVQmluZEdyb3VwfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYmluZEdyb3VwO1xuXG4gICAgdXBkYXRlKGJpbmRHcm91cCkge1xuXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBjb25zdCBkZXZpY2UgPSBiaW5kR3JvdXAuZGV2aWNlO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7R1BVQmluZEdyb3VwRGVzY3JpcHRvcn0gKi9cbiAgICAgICAgY29uc3QgZGVzY3IgPSB0aGlzLmNyZWF0ZURlc2NyaXB0b3IoZGV2aWNlLCBiaW5kR3JvdXApO1xuICAgICAgICBEZWJ1Z0hlbHBlci5zZXRMYWJlbChkZXNjciwgYmluZEdyb3VwLm5hbWUpO1xuXG4gICAgICAgIHRoaXMuYmluZEdyb3VwID0gZGV2aWNlLndncHUuY3JlYXRlQmluZEdyb3VwKGRlc2NyKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICAvLyB0aGlzLmJpbmRHcm91cD8uZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmJpbmRHcm91cCA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJpbmQgZ3JvdXAgZGVzY3JpcHRvciBpbiBXZWJHUFUgZm9ybWF0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi93ZWJncHUtZ3JhcGhpY3MtZGV2aWNlLmpzJykuV2ViZ3B1R3JhcGhpY3NEZXZpY2V9IGRldmljZSAtIEdyYXBoaWNzIGRldmljZS5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vYmluZC1ncm91cC5qcycpLkJpbmRHcm91cH0gYmluZEdyb3VwIC0gQmluZCBncm91cCB0byBjcmVhdGUgdGhlXG4gICAgICogZGVzY3JpcHRvciBmb3IuXG4gICAgICogQHJldHVybnMge29iamVjdH0gLSBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgZGVzY3JpcHRvciBvZiB0eXBlXG4gICAgICogR1BVQmluZEdyb3VwRGVzY3JpcHRvciwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gY3JlYXRlIGEgR1BVQmluZEdyb3VwXG4gICAgICovXG4gICAgY3JlYXRlRGVzY3JpcHRvcihkZXZpY2UsIGJpbmRHcm91cCkge1xuXG4gICAgICAgIC8vIE5vdGU6IFRoaXMgbmVlZHMgdG8gbWF0Y2ggV2ViZ3B1QmluZEdyb3VwRm9ybWF0LmNyZWF0ZURlc2NyaXB0b3JcbiAgICAgICAgY29uc3QgZW50cmllcyA9IFtdO1xuXG4gICAgICAgIC8vIHVuaWZvcm0gYnVmZmVyc1xuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICBiaW5kR3JvdXAudW5pZm9ybUJ1ZmZlcnMuZm9yRWFjaCgodWIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IHViLmltcGwuYnVmZmVyO1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KGJ1ZmZlciwgJ05VTEwgdW5pZm9ybSBidWZmZXIgY2Fubm90IGJlIHVzZWQgYnkgdGhlIGJpbmQgZ3JvdXAnKTtcbiAgICAgICAgICAgIGVudHJpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgYmluZGluZzogaW5kZXgrKyxcbiAgICAgICAgICAgICAgICByZXNvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IGJ1ZmZlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0ZXh0dXJlc1xuICAgICAgICBiaW5kR3JvdXAudGV4dHVyZXMuZm9yRWFjaCgodGV4KSA9PiB7XG5cbiAgICAgICAgICAgIC8qKiBAdHlwZSB7aW1wb3J0KCcuL3dlYmdwdS10ZXh0dXJlLmpzJykuV2ViZ3B1VGV4dHVyZX0gKi9cbiAgICAgICAgICAgIGNvbnN0IHdncHVUZXh0dXJlID0gdGV4LmltcGw7XG5cbiAgICAgICAgICAgIC8vIHRleHR1cmVcbiAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB3Z3B1VGV4dHVyZS5nZXRWaWV3KGRldmljZSk7XG4gICAgICAgICAgICBEZWJ1Zy5hc3NlcnQodmlldywgJ05VTEwgdGV4dHVyZSB2aWV3IGNhbm5vdCBiZSB1c2VkIGJ5IHRoZSBiaW5kIGdyb3VwJyk7XG4gICAgICAgICAgICBlbnRyaWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGJpbmRpbmc6IGluZGV4KyssXG4gICAgICAgICAgICAgICAgcmVzb3VyY2U6IHZpZXdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBzYW1wbGVyXG4gICAgICAgICAgICBjb25zdCBzYW1wbGVyID0gd2dwdVRleHR1cmUuZ2V0U2FtcGxlcihkZXZpY2UpO1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KHNhbXBsZXIsICdOVUxMIHNhbXBsZXIgY2Fubm90IGJlIHVzZWQgYnkgdGhlIGJpbmQgZ3JvdXAnKTtcbiAgICAgICAgICAgIGVudHJpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgYmluZGluZzogaW5kZXgrKyxcbiAgICAgICAgICAgICAgICByZXNvdXJjZTogc2FtcGxlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYXlvdXQ6IGJpbmRHcm91cC5mb3JtYXQuaW1wbC5iaW5kR3JvdXBMYXlvdXQsXG4gICAgICAgICAgICBlbnRyaWVzOiBlbnRyaWVzXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBXZWJncHVCaW5kR3JvdXAgfTtcbiJdLCJuYW1lcyI6WyJXZWJncHVCaW5kR3JvdXAiLCJiaW5kR3JvdXAiLCJ1cGRhdGUiLCJkZXN0cm95IiwiZGV2aWNlIiwiZGVzY3IiLCJjcmVhdGVEZXNjcmlwdG9yIiwiRGVidWdIZWxwZXIiLCJzZXRMYWJlbCIsIm5hbWUiLCJ3Z3B1IiwiY3JlYXRlQmluZEdyb3VwIiwiZW50cmllcyIsImluZGV4IiwidW5pZm9ybUJ1ZmZlcnMiLCJmb3JFYWNoIiwidWIiLCJidWZmZXIiLCJpbXBsIiwiRGVidWciLCJhc3NlcnQiLCJwdXNoIiwiYmluZGluZyIsInJlc291cmNlIiwidGV4dHVyZXMiLCJ0ZXgiLCJ3Z3B1VGV4dHVyZSIsInZpZXciLCJnZXRWaWV3Iiwic2FtcGxlciIsImdldFNhbXBsZXIiLCJsYXlvdXQiLCJmb3JtYXQiLCJiaW5kR3JvdXBMYXlvdXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsZUFBZSxDQUFDO0FBQUEsRUFBQSxXQUFBLEdBQUE7QUFBQSxJQUFBLElBQUEsQ0FLbEJDLFNBQVMsR0FBQSxLQUFBLENBQUEsQ0FBQTtBQUFBLEdBQUE7RUFFVEMsTUFBTSxDQUFDRCxTQUFTLEVBQUU7SUFFZCxJQUFJLENBQUNFLE9BQU8sRUFBRSxDQUFBO0FBQ2QsSUFBQSxNQUFNQyxNQUFNLEdBQUdILFNBQVMsQ0FBQ0csTUFBTSxDQUFBOztBQUUvQjtJQUNBLE1BQU1DLEtBQUssR0FBRyxJQUFJLENBQUNDLGdCQUFnQixDQUFDRixNQUFNLEVBQUVILFNBQVMsQ0FBQyxDQUFBO0lBQ3RETSxXQUFXLENBQUNDLFFBQVEsQ0FBQ0gsS0FBSyxFQUFFSixTQUFTLENBQUNRLElBQUksQ0FBQyxDQUFBO0lBRTNDLElBQUksQ0FBQ1IsU0FBUyxHQUFHRyxNQUFNLENBQUNNLElBQUksQ0FBQ0MsZUFBZSxDQUFDTixLQUFLLENBQUMsQ0FBQTtBQUN2RCxHQUFBO0FBRUFGLEVBQUFBLE9BQU8sR0FBRztBQUNOO0lBQ0EsSUFBSSxDQUFDRixTQUFTLEdBQUcsSUFBSSxDQUFBO0FBQ3pCLEdBQUE7O0FBRUE7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lLLEVBQUFBLGdCQUFnQixDQUFDRixNQUFNLEVBQUVILFNBQVMsRUFBRTtBQUVoQztJQUNBLE1BQU1XLE9BQU8sR0FBRyxFQUFFLENBQUE7O0FBRWxCO0lBQ0EsSUFBSUMsS0FBSyxHQUFHLENBQUMsQ0FBQTtBQUNiWixJQUFBQSxTQUFTLENBQUNhLGNBQWMsQ0FBQ0MsT0FBTyxDQUFFQyxFQUFFLElBQUs7QUFDckMsTUFBQSxNQUFNQyxNQUFNLEdBQUdELEVBQUUsQ0FBQ0UsSUFBSSxDQUFDRCxNQUFNLENBQUE7QUFDN0JFLE1BQUFBLEtBQUssQ0FBQ0MsTUFBTSxDQUFDSCxNQUFNLEVBQUUsc0RBQXNELENBQUMsQ0FBQTtNQUM1RUwsT0FBTyxDQUFDUyxJQUFJLENBQUM7UUFDVEMsT0FBTyxFQUFFVCxLQUFLLEVBQUU7QUFDaEJVLFFBQUFBLFFBQVEsRUFBRTtBQUNOTixVQUFBQSxNQUFNLEVBQUVBLE1BQUFBO0FBQ1osU0FBQTtBQUNKLE9BQUMsQ0FBQyxDQUFBO0FBQ04sS0FBQyxDQUFDLENBQUE7O0FBRUY7QUFDQWhCLElBQUFBLFNBQVMsQ0FBQ3VCLFFBQVEsQ0FBQ1QsT0FBTyxDQUFFVSxHQUFHLElBQUs7QUFFaEM7QUFDQSxNQUFBLE1BQU1DLFdBQVcsR0FBR0QsR0FBRyxDQUFDUCxJQUFJLENBQUE7O0FBRTVCO0FBQ0EsTUFBQSxNQUFNUyxJQUFJLEdBQUdELFdBQVcsQ0FBQ0UsT0FBTyxDQUFDeEIsTUFBTSxDQUFDLENBQUE7QUFDeENlLE1BQUFBLEtBQUssQ0FBQ0MsTUFBTSxDQUFDTyxJQUFJLEVBQUUsb0RBQW9ELENBQUMsQ0FBQTtNQUN4RWYsT0FBTyxDQUFDUyxJQUFJLENBQUM7UUFDVEMsT0FBTyxFQUFFVCxLQUFLLEVBQUU7QUFDaEJVLFFBQUFBLFFBQVEsRUFBRUksSUFBQUE7QUFDZCxPQUFDLENBQUMsQ0FBQTs7QUFFRjtBQUNBLE1BQUEsTUFBTUUsT0FBTyxHQUFHSCxXQUFXLENBQUNJLFVBQVUsQ0FBQzFCLE1BQU0sQ0FBQyxDQUFBO0FBQzlDZSxNQUFBQSxLQUFLLENBQUNDLE1BQU0sQ0FBQ1MsT0FBTyxFQUFFLCtDQUErQyxDQUFDLENBQUE7TUFDdEVqQixPQUFPLENBQUNTLElBQUksQ0FBQztRQUNUQyxPQUFPLEVBQUVULEtBQUssRUFBRTtBQUNoQlUsUUFBQUEsUUFBUSxFQUFFTSxPQUFBQTtBQUNkLE9BQUMsQ0FBQyxDQUFBO0FBQ04sS0FBQyxDQUFDLENBQUE7SUFFRixPQUFPO0FBQ0hFLE1BQUFBLE1BQU0sRUFBRTlCLFNBQVMsQ0FBQytCLE1BQU0sQ0FBQ2QsSUFBSSxDQUFDZSxlQUFlO0FBQzdDckIsTUFBQUEsT0FBTyxFQUFFQSxPQUFBQTtLQUNaLENBQUE7QUFDTCxHQUFBO0FBQ0o7Ozs7In0=
