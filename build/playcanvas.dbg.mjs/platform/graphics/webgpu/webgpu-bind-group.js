/**
 * @license
 * PlayCanvas Engine v1.59.0-preview revision 797466563 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { DebugHelper, Debug } from '../../../core/debug.js';

class WebgpuBindGroup {
  constructor() {
    this.bindGroup = void 0;
  }
  update(bindGroup) {
    this.destroy();
    const device = bindGroup.device;

    const descr = this.createDescriptor(device, bindGroup);
    DebugHelper.setLabel(descr, bindGroup.name);
    this.bindGroup = device.wgpu.createBindGroup(descr);
  }
  destroy() {
    this.bindGroup = null;
  }

  createDescriptor(device, bindGroup) {
    const entries = [];

    let index = 0;
    bindGroup.uniformBuffers.forEach(ub => {
      const buffer = ub.impl.buffer;
      Debug.assert(buffer, 'NULL uniform buffer cannot be used by the bind group');
      entries.push({
        binding: index++,
        resource: {
          buffer: buffer
        }
      });
    });

    bindGroup.textures.forEach(tex => {
      const wgpuTexture = tex.impl;

      const view = wgpuTexture.getView(device);
      Debug.assert(view, 'NULL texture view cannot be used by the bind group');
      entries.push({
        binding: index++,
        resource: view
      });

      const sampler = wgpuTexture.getSampler(device);
      Debug.assert(sampler, 'NULL sampler cannot be used by the bind group');
      entries.push({
        binding: index++,
        resource: sampler
      });
    });
    return {
      layout: bindGroup.format.impl.bindGroupLayout,
      entries: entries
    };
  }
}

export { WebgpuBindGroup };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViZ3B1LWJpbmQtZ3JvdXAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wbGF0Zm9ybS9ncmFwaGljcy93ZWJncHUvd2ViZ3B1LWJpbmQtZ3JvdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcsIERlYnVnSGVscGVyIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbi8qKlxuICogQSBXZWJHUFUgaW1wbGVtZW50YXRpb24gb2YgdGhlIEJpbmRHcm91cCwgd2hpY2ggaXMgYSB3cmFwcGVyIG92ZXIgR1BVQmluZEdyb3VwLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgV2ViZ3B1QmluZEdyb3VwIHtcbiAgICAvLyB0eXBlIHtHUFVCaW5kR3JvdXB9XG4gICAgYmluZEdyb3VwO1xuXG4gICAgdXBkYXRlKGJpbmRHcm91cCkge1xuXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBjb25zdCBkZXZpY2UgPSBiaW5kR3JvdXAuZGV2aWNlO1xuXG4gICAgICAgIC8vIHR5cGUge0dQVUJpbmRHcm91cERlc2NyaXB0b3J9XG4gICAgICAgIGNvbnN0IGRlc2NyID0gdGhpcy5jcmVhdGVEZXNjcmlwdG9yKGRldmljZSwgYmluZEdyb3VwKTtcbiAgICAgICAgRGVidWdIZWxwZXIuc2V0TGFiZWwoZGVzY3IsIGJpbmRHcm91cC5uYW1lKTtcblxuICAgICAgICB0aGlzLmJpbmRHcm91cCA9IGRldmljZS53Z3B1LmNyZWF0ZUJpbmRHcm91cChkZXNjcik7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgLy8gdGhpcy5iaW5kR3JvdXA/LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5iaW5kR3JvdXAgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiaW5kIGdyb3VwIGRlc2NyaXB0b3IgaW4gV2ViR1BVIGZvcm1hdFxuICAgICAqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4vd2ViZ3B1LWdyYXBoaWNzLWRldmljZS5qcycpLldlYmdwdUdyYXBoaWNzRGV2aWNlfSBkZXZpY2UgLSBHcmFwaGljcyBkZXZpY2UuXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2JpbmQtZ3JvdXAuanMnKS5CaW5kR3JvdXB9IGJpbmRHcm91cCAtIEJpbmQgZ3JvdXAgdG8gY3JlYXRlIHRoZVxuICAgICAqIGRlc2NyaXB0b3IgZm9yLlxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9IC0gUmV0dXJucyB0aGUgZ2VuZXJhdGVkIGRlc2NyaXB0b3Igb2YgdHlwZVxuICAgICAqIEdQVUJpbmRHcm91cERlc2NyaXB0b3IsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBhIEdQVUJpbmRHcm91cFxuICAgICAqL1xuICAgIGNyZWF0ZURlc2NyaXB0b3IoZGV2aWNlLCBiaW5kR3JvdXApIHtcblxuICAgICAgICAvLyBOb3RlOiBUaGlzIG5lZWRzIHRvIG1hdGNoIFdlYmdwdUJpbmRHcm91cEZvcm1hdC5jcmVhdGVEZXNjcmlwdG9yXG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBbXTtcblxuICAgICAgICAvLyB1bmlmb3JtIGJ1ZmZlcnNcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgYmluZEdyb3VwLnVuaWZvcm1CdWZmZXJzLmZvckVhY2goKHViKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSB1Yi5pbXBsLmJ1ZmZlcjtcbiAgICAgICAgICAgIERlYnVnLmFzc2VydChidWZmZXIsICdOVUxMIHVuaWZvcm0gYnVmZmVyIGNhbm5vdCBiZSB1c2VkIGJ5IHRoZSBiaW5kIGdyb3VwJyk7XG4gICAgICAgICAgICBlbnRyaWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGJpbmRpbmc6IGluZGV4KyssXG4gICAgICAgICAgICAgICAgcmVzb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBidWZmZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdGV4dHVyZXNcbiAgICAgICAgYmluZEdyb3VwLnRleHR1cmVzLmZvckVhY2goKHRleCkgPT4ge1xuXG4gICAgICAgICAgICAvKiogQHR5cGUge2ltcG9ydCgnLi93ZWJncHUtdGV4dHVyZS5qcycpLldlYmdwdVRleHR1cmV9ICovXG4gICAgICAgICAgICBjb25zdCB3Z3B1VGV4dHVyZSA9IHRleC5pbXBsO1xuXG4gICAgICAgICAgICAvLyB0ZXh0dXJlXG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gd2dwdVRleHR1cmUuZ2V0VmlldyhkZXZpY2UpO1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KHZpZXcsICdOVUxMIHRleHR1cmUgdmlldyBjYW5ub3QgYmUgdXNlZCBieSB0aGUgYmluZCBncm91cCcpO1xuICAgICAgICAgICAgZW50cmllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBiaW5kaW5nOiBpbmRleCsrLFxuICAgICAgICAgICAgICAgIHJlc291cmNlOiB2aWV3XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gc2FtcGxlclxuICAgICAgICAgICAgY29uc3Qgc2FtcGxlciA9IHdncHVUZXh0dXJlLmdldFNhbXBsZXIoZGV2aWNlKTtcbiAgICAgICAgICAgIERlYnVnLmFzc2VydChzYW1wbGVyLCAnTlVMTCBzYW1wbGVyIGNhbm5vdCBiZSB1c2VkIGJ5IHRoZSBiaW5kIGdyb3VwJyk7XG4gICAgICAgICAgICBlbnRyaWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGJpbmRpbmc6IGluZGV4KyssXG4gICAgICAgICAgICAgICAgcmVzb3VyY2U6IHNhbXBsZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGF5b3V0OiBiaW5kR3JvdXAuZm9ybWF0LmltcGwuYmluZEdyb3VwTGF5b3V0LFxuICAgICAgICAgICAgZW50cmllczogZW50cmllc1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgV2ViZ3B1QmluZEdyb3VwIH07XG4iXSwibmFtZXMiOlsiV2ViZ3B1QmluZEdyb3VwIiwiYmluZEdyb3VwIiwidXBkYXRlIiwiZGVzdHJveSIsImRldmljZSIsImRlc2NyIiwiY3JlYXRlRGVzY3JpcHRvciIsIkRlYnVnSGVscGVyIiwic2V0TGFiZWwiLCJuYW1lIiwid2dwdSIsImNyZWF0ZUJpbmRHcm91cCIsImVudHJpZXMiLCJpbmRleCIsInVuaWZvcm1CdWZmZXJzIiwiZm9yRWFjaCIsInViIiwiYnVmZmVyIiwiaW1wbCIsIkRlYnVnIiwiYXNzZXJ0IiwicHVzaCIsImJpbmRpbmciLCJyZXNvdXJjZSIsInRleHR1cmVzIiwidGV4Iiwid2dwdVRleHR1cmUiLCJ2aWV3IiwiZ2V0VmlldyIsInNhbXBsZXIiLCJnZXRTYW1wbGVyIiwibGF5b3V0IiwiZm9ybWF0IiwiYmluZEdyb3VwTGF5b3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0EsTUFBTUEsZUFBZSxDQUFDO0FBQUEsRUFBQSxXQUFBLEdBQUE7QUFBQSxJQUFBLElBQUEsQ0FFbEJDLFNBQVMsR0FBQSxLQUFBLENBQUEsQ0FBQTtBQUFBLEdBQUE7RUFFVEMsTUFBTSxDQUFDRCxTQUFTLEVBQUU7SUFFZCxJQUFJLENBQUNFLE9BQU8sRUFBRSxDQUFBO0FBQ2QsSUFBQSxNQUFNQyxNQUFNLEdBQUdILFNBQVMsQ0FBQ0csTUFBTSxDQUFBOztJQUcvQixNQUFNQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0YsTUFBTSxFQUFFSCxTQUFTLENBQUMsQ0FBQTtJQUN0RE0sV0FBVyxDQUFDQyxRQUFRLENBQUNILEtBQUssRUFBRUosU0FBUyxDQUFDUSxJQUFJLENBQUMsQ0FBQTtJQUUzQyxJQUFJLENBQUNSLFNBQVMsR0FBR0csTUFBTSxDQUFDTSxJQUFJLENBQUNDLGVBQWUsQ0FBQ04sS0FBSyxDQUFDLENBQUE7QUFDdkQsR0FBQTtBQUVBRixFQUFBQSxPQUFPLEdBQUc7SUFFTixJQUFJLENBQUNGLFNBQVMsR0FBRyxJQUFJLENBQUE7QUFDekIsR0FBQTs7QUFXQUssRUFBQUEsZ0JBQWdCLENBQUNGLE1BQU0sRUFBRUgsU0FBUyxFQUFFO0lBR2hDLE1BQU1XLE9BQU8sR0FBRyxFQUFFLENBQUE7O0lBR2xCLElBQUlDLEtBQUssR0FBRyxDQUFDLENBQUE7QUFDYlosSUFBQUEsU0FBUyxDQUFDYSxjQUFjLENBQUNDLE9BQU8sQ0FBRUMsRUFBRSxJQUFLO0FBQ3JDLE1BQUEsTUFBTUMsTUFBTSxHQUFHRCxFQUFFLENBQUNFLElBQUksQ0FBQ0QsTUFBTSxDQUFBO0FBQzdCRSxNQUFBQSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0gsTUFBTSxFQUFFLHNEQUFzRCxDQUFDLENBQUE7TUFDNUVMLE9BQU8sQ0FBQ1MsSUFBSSxDQUFDO1FBQ1RDLE9BQU8sRUFBRVQsS0FBSyxFQUFFO0FBQ2hCVSxRQUFBQSxRQUFRLEVBQUU7QUFDTk4sVUFBQUEsTUFBTSxFQUFFQSxNQUFBQTtBQUNaLFNBQUE7QUFDSixPQUFDLENBQUMsQ0FBQTtBQUNOLEtBQUMsQ0FBQyxDQUFBOztBQUdGaEIsSUFBQUEsU0FBUyxDQUFDdUIsUUFBUSxDQUFDVCxPQUFPLENBQUVVLEdBQUcsSUFBSztBQUdoQyxNQUFBLE1BQU1DLFdBQVcsR0FBR0QsR0FBRyxDQUFDUCxJQUFJLENBQUE7O0FBRzVCLE1BQUEsTUFBTVMsSUFBSSxHQUFHRCxXQUFXLENBQUNFLE9BQU8sQ0FBQ3hCLE1BQU0sQ0FBQyxDQUFBO0FBQ3hDZSxNQUFBQSxLQUFLLENBQUNDLE1BQU0sQ0FBQ08sSUFBSSxFQUFFLG9EQUFvRCxDQUFDLENBQUE7TUFDeEVmLE9BQU8sQ0FBQ1MsSUFBSSxDQUFDO1FBQ1RDLE9BQU8sRUFBRVQsS0FBSyxFQUFFO0FBQ2hCVSxRQUFBQSxRQUFRLEVBQUVJLElBQUFBO0FBQ2QsT0FBQyxDQUFDLENBQUE7O0FBR0YsTUFBQSxNQUFNRSxPQUFPLEdBQUdILFdBQVcsQ0FBQ0ksVUFBVSxDQUFDMUIsTUFBTSxDQUFDLENBQUE7QUFDOUNlLE1BQUFBLEtBQUssQ0FBQ0MsTUFBTSxDQUFDUyxPQUFPLEVBQUUsK0NBQStDLENBQUMsQ0FBQTtNQUN0RWpCLE9BQU8sQ0FBQ1MsSUFBSSxDQUFDO1FBQ1RDLE9BQU8sRUFBRVQsS0FBSyxFQUFFO0FBQ2hCVSxRQUFBQSxRQUFRLEVBQUVNLE9BQUFBO0FBQ2QsT0FBQyxDQUFDLENBQUE7QUFDTixLQUFDLENBQUMsQ0FBQTtJQUVGLE9BQU87QUFDSEUsTUFBQUEsTUFBTSxFQUFFOUIsU0FBUyxDQUFDK0IsTUFBTSxDQUFDZCxJQUFJLENBQUNlLGVBQWU7QUFDN0NyQixNQUFBQSxPQUFPLEVBQUVBLE9BQUFBO0tBQ1osQ0FBQTtBQUNMLEdBQUE7QUFDSjs7OzsifQ==
