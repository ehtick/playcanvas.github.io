import { DebugHelper } from '../../../core/debug.js';

/**
 * @ignore
 */
class WebgpuQuerySet {
  constructor(device, isTimestamp, capacity) {
    this.activeStagingBuffer = null;
    this.device = device;
    this.capacity = capacity;

    // give those buffers labels, and also buffers in dynamic buffers

    const wgpu = device.wgpu;
    this.querySet = wgpu.createQuerySet({
      type: isTimestamp ? 'timestamp' : 'occlusion',
      count: capacity
    });
    const bufferSise = 8 * capacity;
    this.queryBuffer = wgpu.createBuffer({
      size: bufferSise,
      usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST
    });
    this.stagingBuffers = [];
  }
  destroy() {
    var _this$querySet, _this$queryBuffer;
    (_this$querySet = this.querySet) == null ? void 0 : _this$querySet.destroy();
    this.querySet = null;
    (_this$queryBuffer = this.queryBuffer) == null ? void 0 : _this$queryBuffer.destroy();
    this.queryBuffer = null;
    this.activeStagingBuffer = null;

    // this.stagingBuffer?.destroy();
    // this.stagingBuffer = null;
  }

  getStagingBuffer() {
    let stagingBuffer = this.stagingBuffers.pop();
    if (!stagingBuffer) {
      console.log("allocating staging buffer");
      stagingBuffer = this.device.wgpu.createBuffer({
        size: this.queryBuffer.size,
        usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
      });
    }
    return stagingBuffer;
  }
  resolve() {
    const device = this.device;
    const commandEncoder = device.wgpu.createCommandEncoder();
    DebugHelper.setLabel(commandEncoder, 'ResolveQuerySet-Encoder');

    // copy times to the gpu buffer
    commandEncoder.resolveQuerySet(this.querySet, 0, this.capacity, this.queryBuffer, 0);

    // copy the gpu buffer to the staging buffer
    const activeStagingBuffer = this.getStagingBuffer();
    this.activeStagingBuffer = activeStagingBuffer;
    commandEncoder.copyBufferToBuffer(this.queryBuffer, 0, activeStagingBuffer, 0, this.queryBuffer.size);
    const cb = commandEncoder.finish();
    DebugHelper.setLabel(cb, 'ResolveQuerySet');
    device.addCommandBuffer(cb);
  }
  request(count, renderVersion) {
    const stagingBuffer = this.activeStagingBuffer;
    this.activeStagingBuffer = null;
    return stagingBuffer.mapAsync(GPUMapMode.READ).then(() => {
      // timestamps in nanoseconds. Note that this array is valid only till we unmap the staging buffer.
      const srcTimings = new BigInt64Array(stagingBuffer.getMappedRange());

      // convert to ms per sample pair
      const timings = [];
      for (let i = 0; i < count; i++) {
        timings.push(Number(srcTimings[i * 2 + 1] - srcTimings[i * 2]) * 0.000001);
      }
      stagingBuffer.unmap();
      this.stagingBuffers.push(stagingBuffer);
      return {
        renderVersion,
        timings
      };
    });
  }
}

export { WebgpuQuerySet };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
