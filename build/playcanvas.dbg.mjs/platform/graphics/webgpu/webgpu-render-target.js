/**
 * @license
 * PlayCanvas Engine v1.59.0-preview revision 797466563 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug, DebugHelper } from '../../../core/debug.js';

class WebgpuRenderTarget {

  constructor(renderTarget) {
    this.initialized = false;
    this.colorFormat = 'bgra8unorm';
    this.key = void 0;
    this.depthFormat = 'depth24plus-stencil8';
    this.multisampledColorBuffer = void 0;
    this.depthTexture = null;
    this.assignedColorTexture = null;
    this.renderPassDescriptor = {};
    this.renderTarget = renderTarget;

    if (renderTarget.colorBuffer) {
      this.colorFormat = renderTarget.colorBuffer.impl.format;
    }

    this.updateKey();
  }

  destroy(device) {
    var _this$depthTexture, _this$multisampledCol;
    this.initialized = false;
    this.renderPassDescriptor = null;
    (_this$depthTexture = this.depthTexture) == null ? void 0 : _this$depthTexture.destroy();
    this.depthTexture = null;
    this.assignedColorTexture = null;
    (_this$multisampledCol = this.multisampledColorBuffer) == null ? void 0 : _this$multisampledCol.destroy();
    this.multisampledColorBuffer = null;
  }
  updateKey() {
    const rt = this.renderTarget;
    this.key = `${this.colorFormat}-${rt.depth ? this.depthFormat : ''}-${rt.samples}`;
  }

  assignColorTexture(gpuTexture) {
    Debug.assert(gpuTexture);
    this.assignedColorTexture = gpuTexture;
    const view = gpuTexture.createView();

    const colorAttachment = this.renderPassDescriptor.colorAttachments[0];
    const samples = this.renderTarget.samples;
    if (samples > 1) {
      colorAttachment.resolveTarget = view;
    } else {
      colorAttachment.view = view;
    }

    this.colorFormat = gpuTexture.format;
    this.updateKey();
  }

  init(device, renderTarget) {
    Debug.assert(!this.initialized);
    Debug.assert(!renderTarget._depthBuffer, 'WebgpuRenderTarget does not yet support options.depthBuffer');
    const wgpu = device.wgpu;
    const {
      samples,
      width,
      height,
      depth
    } = renderTarget;

    if (depth) {
      const depthTextureDesc = {
        size: [width, height, 1],
        dimension: '2d',
        sampleCount: samples,
        format: this.depthFormat,
        usage: GPUTextureUsage.RENDER_ATTACHMENT
      };

      if (samples <= 1) {
        depthTextureDesc.usage |= GPUTextureUsage.COPY_SRC;
      }

      this.depthTexture = wgpu.createTexture(depthTextureDesc);
      DebugHelper.setLabel(this.depthTexture, `${renderTarget.name}.depthTexture`);

      this.renderPassDescriptor.depthStencilAttachment = {
        view: this.depthTexture.createView()
      };
    }

    const colorAttachment = {};
    this.renderPassDescriptor.colorAttachments = [colorAttachment];
    const colorBuffer = renderTarget.colorBuffer;
    let colorView = null;
    if (colorBuffer) {
      colorView = colorBuffer.impl.getView(device);

      if (colorBuffer.cubemap) {
        colorView = colorBuffer.impl.createView({
          dimension: '2d',
          baseArrayLayer: renderTarget.face,
          arrayLayerCount: 1
        });
      }
    }

    if (samples > 1) {
      const multisampledTextureDesc = {
        size: [width, height, 1],
        dimension: '2d',
        sampleCount: samples,
        format: this.colorFormat,
        usage: GPUTextureUsage.RENDER_ATTACHMENT
      };

      this.multisampledColorBuffer = wgpu.createTexture(multisampledTextureDesc);
      colorAttachment.view = this.multisampledColorBuffer.createView();
      colorAttachment.resolveTarget = colorView;
    } else {
      colorAttachment.view = colorView;
    }
    this.initialized = true;
  }

  setupForRenderPass(renderPass) {
    Debug.assert(this.renderPassDescriptor);
    const colorAttachment = this.renderPassDescriptor.colorAttachments[0];
    if (colorAttachment) {
      colorAttachment.clearValue = renderPass.colorOps.clearValue;
      colorAttachment.loadOp = renderPass.colorOps.clear ? 'clear' : 'load';
      colorAttachment.storeOp = renderPass.colorOps.store ? 'store' : 'discard';
    }
    const depthAttachment = this.renderPassDescriptor.depthStencilAttachment;
    if (depthAttachment) {
      depthAttachment.depthClearValue = renderPass.depthStencilOps.clearDepthValue;
      depthAttachment.depthLoadOp = renderPass.depthStencilOps.clearDepth ? 'clear' : 'load';
      depthAttachment.depthStoreOp = renderPass.depthStencilOps.storeDepth ? 'store' : 'discard';
      depthAttachment.depthReadOnly = false;
      depthAttachment.stencilClearValue = renderPass.depthStencilOps.clearStencilValue;
      depthAttachment.stencilLoadOp = renderPass.depthStencilOps.clearStencil ? 'clear' : 'load';
      depthAttachment.stencilStoreOp = renderPass.depthStencilOps.storeStencil ? 'store' : 'discard';
      depthAttachment.stencilReadOnly = false;
    }
  }
  loseContext() {
    this.initialized = false;
  }
  resolve(device, target, color, depth) {}
}

export { WebgpuRenderTarget };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
