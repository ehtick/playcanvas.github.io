/**
 * @license
 * PlayCanvas Engine v1.58.0-dev revision e102f2b2a (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
const math = {
  DEG_TO_RAD: Math.PI / 180,
  RAD_TO_DEG: 180 / Math.PI,
  clamp: function (value, min, max) {
    if (value >= max) return max;
    if (value <= min) return min;
    return value;
  },
  intToBytes24: function (i) {
    const r = i >> 16 & 0xff;
    const g = i >> 8 & 0xff;
    const b = i & 0xff;
    return [r, g, b];
  },
  intToBytes32: function (i) {
    const r = i >> 24 & 0xff;
    const g = i >> 16 & 0xff;
    const b = i >> 8 & 0xff;
    const a = i & 0xff;
    return [r, g, b, a];
  },
  bytesToInt24: function (r, g, b) {
    if (r.length) {
      b = r[2];
      g = r[1];
      r = r[0];
    }

    return r << 16 | g << 8 | b;
  },
  bytesToInt32: function (r, g, b, a) {
    if (r.length) {
      a = r[3];
      b = r[2];
      g = r[1];
      r = r[0];
    }

    return (r << 24 | g << 16 | b << 8 | a) >>> 0;
  },
  lerp: function (a, b, alpha) {
    return a + (b - a) * math.clamp(alpha, 0, 1);
  },
  lerpAngle: function (a, b, alpha) {
    if (b - a > 180) {
      b -= 360;
    }

    if (b - a < -180) {
      b += 360;
    }

    return math.lerp(a, b, math.clamp(alpha, 0, 1));
  },
  powerOfTwo: function (x) {
    return x !== 0 && !(x & x - 1);
  },
  nextPowerOfTwo: function (val) {
    val--;
    val |= val >> 1;
    val |= val >> 2;
    val |= val >> 4;
    val |= val >> 8;
    val |= val >> 16;
    val++;
    return val;
  },
  nearestPowerOfTwo: function (val) {
    return Math.pow(2, Math.round(Math.log(val) / Math.log(2)));
  },
  random: function (min, max) {
    const diff = max - min;
    return Math.random() * diff + min;
  },
  smoothstep: function (min, max, x) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
  },
  smootherstep: function (min, max, x) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
  },
  roundUp: function (numToRound, multiple) {
    if (multiple === 0) return numToRound;
    return Math.ceil(numToRound / multiple) * multiple;
  },
  between: function (num, a, b, inclusive) {
    const min = Math.min(a, b);
    const max = Math.max(a, b);
    return inclusive ? num >= min && num <= max : num > min && num < max;
  }
};

export { math };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21hdGgvbWF0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1hdGggQVBJLlxuICpcbiAqIEBuYW1lc3BhY2VcbiAqL1xuY29uc3QgbWF0aCA9IHtcbiAgICAvKipcbiAgICAgKiBDb252ZXJzaW9uIGZhY3RvciBiZXR3ZWVuIGRlZ3JlZXMgYW5kIHJhZGlhbnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIERFR19UT19SQUQ6IE1hdGguUEkgLyAxODAsXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJzaW9uIGZhY3RvciBiZXR3ZWVuIGRlZ3JlZXMgYW5kIHJhZGlhbnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIFJBRF9UT19ERUc6IDE4MCAvIE1hdGguUEksXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcCBhIG51bWJlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IGluY2x1c2l2ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIE51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluIC0gTWluIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXggLSBNYXggdmFsdWUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gVGhlIGNsYW1wZWQgdmFsdWUuXG4gICAgICovXG4gICAgY2xhbXA6IGZ1bmN0aW9uICh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICAgICAgaWYgKHZhbHVlID49IG1heCkgcmV0dXJuIG1heDtcbiAgICAgICAgaWYgKHZhbHVlIDw9IG1pbikgcmV0dXJuIG1pbjtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGFuIDI0IGJpdCBpbnRlZ2VyIGludG8gYW4gYXJyYXkgb2YgMyBieXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpIC0gTnVtYmVyIGhvbGRpbmcgYW4gaW50ZWdlciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyW119IEFuIGFycmF5IG9mIDMgYnl0ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBTZXQgYnl0ZXMgdG8gWzB4MTEsIDB4MjIsIDB4MzNdXG4gICAgICogdmFyIGJ5dGVzID0gcGMubWF0aC5pbnRUb0J5dGVzMjQoMHgxMTIyMzMpO1xuICAgICAqL1xuICAgIGludFRvQnl0ZXMyNDogZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgY29uc3QgciA9IChpID4+IDE2KSAmIDB4ZmY7XG4gICAgICAgIGNvbnN0IGcgPSAoaSA+PiA4KSAmIDB4ZmY7XG4gICAgICAgIGNvbnN0IGIgPSAoaSkgJiAweGZmO1xuXG4gICAgICAgIHJldHVybiBbciwgZywgYl07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYW4gMzIgYml0IGludGVnZXIgaW50byBhbiBhcnJheSBvZiA0IGJ5dGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGkgLSBOdW1iZXIgaG9sZGluZyBhbiBpbnRlZ2VyIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJbXX0gQW4gYXJyYXkgb2YgNCBieXRlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIFNldCBieXRlcyB0byBbMHgxMSwgMHgyMiwgMHgzMywgMHg0NF1cbiAgICAgKiB2YXIgYnl0ZXMgPSBwYy5tYXRoLmludFRvQnl0ZXMzMigweDExMjIzMzQ0KTtcbiAgICAgKi9cbiAgICBpbnRUb0J5dGVzMzI6IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIGNvbnN0IHIgPSAoaSA+PiAyNCkgJiAweGZmO1xuICAgICAgICBjb25zdCBnID0gKGkgPj4gMTYpICYgMHhmZjtcbiAgICAgICAgY29uc3QgYiA9IChpID4+IDgpICYgMHhmZjtcbiAgICAgICAgY29uc3QgYSA9IChpKSAmIDB4ZmY7XG5cbiAgICAgICAgcmV0dXJuIFtyLCBnLCBiLCBhXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCAzIDggYml0IE51bWJlcnMgaW50byBhIHNpbmdsZSB1bnNpZ25lZCAyNCBiaXQgTnVtYmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHIgLSBBIHNpbmdsZSBieXRlICgwLTI1NSkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGcgLSBBIHNpbmdsZSBieXRlICgwLTI1NSkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGIgLSBBIHNpbmdsZSBieXRlICgwLTI1NSkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gQSBzaW5nbGUgdW5zaWduZWQgMjQgYml0IE51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIFNldCByZXN1bHQxIHRvIDB4MTEyMjMzIGZyb20gYW4gYXJyYXkgb2YgMyB2YWx1ZXNcbiAgICAgKiB2YXIgcmVzdWx0MSA9IHBjLm1hdGguYnl0ZXNUb0ludDI0KFsweDExLCAweDIyLCAweDMzXSk7XG4gICAgICpcbiAgICAgKiAvLyBTZXQgcmVzdWx0MiB0byAweDExMjIzMyBmcm9tIDMgZGlzY3JldGUgdmFsdWVzXG4gICAgICogdmFyIHJlc3VsdDIgPSBwYy5tYXRoLmJ5dGVzVG9JbnQyNCgweDExLCAweDIyLCAweDMzKTtcbiAgICAgKi9cbiAgICBieXRlc1RvSW50MjQ6IGZ1bmN0aW9uIChyLCBnLCBiKSB7XG4gICAgICAgIGlmIChyLmxlbmd0aCkge1xuICAgICAgICAgICAgYiA9IHJbMl07XG4gICAgICAgICAgICBnID0gclsxXTtcbiAgICAgICAgICAgIHIgPSByWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKHIgPDwgMTYpIHwgKGcgPDwgOCkgfCBiKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCA0IDEtYnl0ZSBOdW1iZXJzIGludG8gYSBzaW5nbGUgdW5zaWduZWQgMzJiaXQgTnVtYmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHIgLSBBIHNpbmdsZSBieXRlICgwLTI1NSkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGcgLSBBIHNpbmdsZSBieXRlICgwLTI1NSkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGIgLSBBIHNpbmdsZSBieXRlICgwLTI1NSkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGEgLSBBIHNpbmdsZSBieXRlICgwLTI1NSkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gQSBzaW5nbGUgdW5zaWduZWQgMzJiaXQgTnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gU2V0IHJlc3VsdDEgdG8gMHgxMTIyMzM0NCBmcm9tIGFuIGFycmF5IG9mIDQgdmFsdWVzXG4gICAgICogdmFyIHJlc3VsdDEgPSBwYy5tYXRoLmJ5dGVzVG9JbnQzMihbMHgxMSwgMHgyMiwgMHgzMywgMHg0NF0pO1xuICAgICAqXG4gICAgICogLy8gU2V0IHJlc3VsdDIgdG8gMHgxMTIyMzM0NCBmcm9tIDQgZGlzY3JldGUgdmFsdWVzXG4gICAgICogdmFyIHJlc3VsdDIgPSBwYy5tYXRoLmJ5dGVzVG9JbnQzMigweDExLCAweDIyLCAweDMzLCAweDQ0KTtcbiAgICAgKi9cbiAgICBieXRlc1RvSW50MzI6IGZ1bmN0aW9uIChyLCBnLCBiLCBhKSB7XG4gICAgICAgIGlmIChyLmxlbmd0aCkge1xuICAgICAgICAgICAgYSA9IHJbM107XG4gICAgICAgICAgICBiID0gclsyXTtcbiAgICAgICAgICAgIGcgPSByWzFdO1xuICAgICAgICAgICAgciA9IHJbMF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaHkgKChyIDw8IDI0KT4+PjApP1xuICAgICAgICAvLyA8PCBvcGVyYXRvciB1c2VzIHNpZ25lZCAzMiBiaXQgbnVtYmVycywgc28gMTI4PDwyNCBpcyBuZWdhdGl2ZS5cbiAgICAgICAgLy8gPj4+IHVzZWQgdW5zaWduZWQgc28gPj4+MCBjb252ZXJ0cyBiYWNrIHRvIGFuIHVuc2lnbmVkLlxuICAgICAgICAvLyBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xOTA4NDkyL3Vuc2lnbmVkLWludGVnZXItaW4tamF2YXNjcmlwdFxuICAgICAgICByZXR1cm4gKChyIDw8IDI0KSB8IChnIDw8IDE2KSB8IChiIDw8IDgpIHwgYSkgPj4+IDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGxpbmVhciBpbnRlcnBvbGF0aW9uIG9mIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGEgLSBOdW1iZXIgdG8gbGluZWFybHkgaW50ZXJwb2xhdGUgZnJvbS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYiAtIE51bWJlciB0byBsaW5lYXJseSBpbnRlcnBvbGF0ZSB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgdmFsdWUgY29udHJvbGxpbmcgdGhlIHJlc3VsdCBvZiBpbnRlcnBvbGF0aW9uLiBXaGVuIGFscGhhIGlzIDAsXG4gICAgICogYSBpcyByZXR1cm5lZC4gV2hlbiBhbHBoYSBpcyAxLCBiIGlzIHJldHVybmVkLiBCZXR3ZWVuIDAgYW5kIDEsIGEgbGluZWFyIGludGVycG9sYXRpb25cbiAgICAgKiBiZXR3ZWVuIGEgYW5kIGIgaXMgcmV0dXJuZWQuIGFscGhhIGlzIGNsYW1wZWQgYmV0d2VlbiAwIGFuZCAxLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBvZiB0d28gbnVtYmVycy5cbiAgICAgKi9cbiAgICBsZXJwOiBmdW5jdGlvbiAoYSwgYiwgYWxwaGEpIHtcbiAgICAgICAgcmV0dXJuIGEgKyAoYiAtIGEpICogbWF0aC5jbGFtcChhbHBoYSwgMCwgMSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGxpbmVhciBpbnRlcnBvbGF0aW9uIG9mIHR3byBhbmdsZXMgZW5zdXJpbmcgdGhhdCBpbnRlcnBvbGF0aW9uIGlzIGNvcnJlY3RseVxuICAgICAqIHBlcmZvcm1lZCBhY3Jvc3MgdGhlIDM2MCB0byAwIGRlZ3JlZSBib3VuZGFyeS4gQW5nbGVzIGFyZSBzdXBwbGllZCBpbiBkZWdyZWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGEgLSBBbmdsZSAoaW4gZGVncmVlcykgdG8gbGluZWFybHkgaW50ZXJwb2xhdGUgZnJvbS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYiAtIEFuZ2xlIChpbiBkZWdyZWVzKSB0byBsaW5lYXJseSBpbnRlcnBvbGF0ZSB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgdmFsdWUgY29udHJvbGxpbmcgdGhlIHJlc3VsdCBvZiBpbnRlcnBvbGF0aW9uLiBXaGVuIGFscGhhIGlzIDAsXG4gICAgICogYSBpcyByZXR1cm5lZC4gV2hlbiBhbHBoYSBpcyAxLCBiIGlzIHJldHVybmVkLiBCZXR3ZWVuIDAgYW5kIDEsIGEgbGluZWFyIGludGVycG9sYXRpb25cbiAgICAgKiBiZXR3ZWVuIGEgYW5kIGIgaXMgcmV0dXJuZWQuIGFscGhhIGlzIGNsYW1wZWQgYmV0d2VlbiAwIGFuZCAxLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBvZiB0d28gYW5nbGVzLlxuICAgICAqL1xuICAgIGxlcnBBbmdsZTogZnVuY3Rpb24gKGEsIGIsIGFscGhhKSB7XG4gICAgICAgIGlmIChiIC0gYSA+IDE4MCkge1xuICAgICAgICAgICAgYiAtPSAzNjA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgLSBhIDwgLTE4MCkge1xuICAgICAgICAgICAgYiArPSAzNjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hdGgubGVycChhLCBiLCBtYXRoLmNsYW1wKGFscGhhLCAwLCAxKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhcmd1bWVudCBpcyBhIHBvd2VyLW9mLXR3byBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBOdW1iZXIgdG8gY2hlY2sgZm9yIHBvd2VyLW9mLXR3byBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBwb3dlci1vZi10d28gYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBwb3dlck9mVHdvOiBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gKCh4ICE9PSAwKSAmJiAhKHggJiAoeCAtIDEpKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5leHQgcG93ZXIgb2YgMiBmb3IgdGhlIHNwZWNpZmllZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsdWUgZm9yIHdoaWNoIHRvIGNhbGN1bGF0ZSB0aGUgbmV4dCBwb3dlciBvZiAyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBuZXh0IHBvd2VyIG9mIDIuXG4gICAgICovXG4gICAgbmV4dFBvd2VyT2ZUd286IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFsLS07XG4gICAgICAgIHZhbCB8PSAodmFsID4+IDEpO1xuICAgICAgICB2YWwgfD0gKHZhbCA+PiAyKTtcbiAgICAgICAgdmFsIHw9ICh2YWwgPj4gNCk7XG4gICAgICAgIHZhbCB8PSAodmFsID4+IDgpO1xuICAgICAgICB2YWwgfD0gKHZhbCA+PiAxNik7XG4gICAgICAgIHZhbCsrO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuZWFyZXN0IChzbWFsbGVyIG9yIGxhcmdlcikgcG93ZXIgb2YgMiBmb3IgdGhlIHNwZWNpZmllZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSBUaGUgdmFsdWUgZm9yIHdoaWNoIHRvIGNhbGN1bGF0ZSB0aGUgbmVhcmVzdCBwb3dlciBvZiAyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBuZWFyZXN0IHBvd2VyIG9mIDIuXG4gICAgICovXG4gICAgbmVhcmVzdFBvd2VyT2ZUd286IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDIsIE1hdGgucm91bmQoTWF0aC5sb2codmFsKSAvIE1hdGgubG9nKDIpKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhIHBzZXVkby1yYW5kb20gbnVtYmVyIGJldHdlZW4gbWluIGFuZCBtYXguIFRoZSBudW1iZXIgZ2VuZXJhdGVkIGlzIGluIHRoZSByYW5nZVxuICAgICAqIFttaW4sIG1heCksIHRoYXQgaXMgaW5jbHVzaXZlIG9mIHRoZSBtaW5pbXVtIGJ1dCBleGNsdXNpdmUgb2YgdGhlIG1heGltdW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluIC0gTG93ZXIgYm91bmQgZm9yIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXggLSBVcHBlciBib3VuZCBmb3IgcmFuZ2UuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUHNldWRvLXJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgc3VwcGxpZWQgcmFuZ2UuXG4gICAgICovXG4gICAgcmFuZG9tOiBmdW5jdGlvbiAobWluLCBtYXgpIHtcbiAgICAgICAgY29uc3QgZGlmZiA9IG1heCAtIG1pbjtcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiBkaWZmICsgbWluO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gaW50ZXJwb2xhdGVzIHNtb290aGx5IGJldHdlZW4gdHdvIGlucHV0IHZhbHVlcyBiYXNlZCBvbiBhIHRoaXJkIG9uZSB0aGF0IHNob3VsZFxuICAgICAqIGJlIGJldHdlZW4gdGhlIGZpcnN0IHR3by4gVGhlIHJldHVybmVkIHZhbHVlIGlzIGNsYW1wZWQgYmV0d2VlbiAwIGFuZCAxLlxuICAgICAqXG4gICAgICogVGhlIHNsb3BlIChpLmUuIGRlcml2YXRpdmUpIG9mIHRoZSBzbW9vdGhzdGVwIGZ1bmN0aW9uIHN0YXJ0cyBhdCAwIGFuZCBlbmRzIGF0IDAuIFRoaXMgbWFrZXNcbiAgICAgKiBpdCBlYXN5IHRvIGNyZWF0ZSBhIHNlcXVlbmNlIG9mIHRyYW5zaXRpb25zIHVzaW5nIHNtb290aHN0ZXAgdG8gaW50ZXJwb2xhdGUgZWFjaCBzZWdtZW50XG4gICAgICogcmF0aGVyIHRoYW4gdXNpbmcgYSBtb3JlIHNvcGhpc3RpY2F0ZWQgb3IgZXhwZW5zaXZlIGludGVycG9sYXRpb24gdGVjaG5pcXVlLlxuICAgICAqXG4gICAgICogU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU21vb3Roc3RlcCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbiAtIFRoZSBsb3dlciBib3VuZCBvZiB0aGUgaW50ZXJwb2xhdGlvbiByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4IC0gVGhlIHVwcGVyIGJvdW5kIG9mIHRoZSBpbnRlcnBvbGF0aW9uIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIHRvIGludGVycG9sYXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBzbW9vdGhseSBpbnRlcnBvbGF0ZWQgdmFsdWUgY2xhbXBlZCBiZXR3ZWVuIHplcm8gYW5kIG9uZS5cbiAgICAgKi9cbiAgICBzbW9vdGhzdGVwOiBmdW5jdGlvbiAobWluLCBtYXgsIHgpIHtcbiAgICAgICAgaWYgKHggPD0gbWluKSByZXR1cm4gMDtcbiAgICAgICAgaWYgKHggPj0gbWF4KSByZXR1cm4gMTtcblxuICAgICAgICB4ID0gKHggLSBtaW4pIC8gKG1heCAtIG1pbik7XG5cbiAgICAgICAgcmV0dXJuIHggKiB4ICogKDMgLSAyICogeCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFuIGltcHJvdmVkIHZlcnNpb24gb2YgdGhlIHtAbGluayBtYXRoLnNtb290aHN0ZXB9IGZ1bmN0aW9uIHdoaWNoIGhhcyB6ZXJvIDFzdCBhbmQgMm5kIG9yZGVyXG4gICAgICogZGVyaXZhdGl2ZXMgYXQgdD0wIGFuZCB0PTEuXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbW9vdGhzdGVwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluIC0gVGhlIGxvd2VyIGJvdW5kIG9mIHRoZSBpbnRlcnBvbGF0aW9uIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXggLSBUaGUgdXBwZXIgYm91bmQgb2YgdGhlIGludGVycG9sYXRpb24gcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgdmFsdWUgdG8gaW50ZXJwb2xhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gVGhlIHNtb290aGx5IGludGVycG9sYXRlZCB2YWx1ZSBjbGFtcGVkIGJldHdlZW4gemVybyBhbmQgb25lLlxuICAgICAqL1xuICAgIHNtb290aGVyc3RlcDogZnVuY3Rpb24gKG1pbiwgbWF4LCB4KSB7XG4gICAgICAgIGlmICh4IDw9IG1pbikgcmV0dXJuIDA7XG4gICAgICAgIGlmICh4ID49IG1heCkgcmV0dXJuIDE7XG5cbiAgICAgICAgeCA9ICh4IC0gbWluKSAvIChtYXggLSBtaW4pO1xuXG4gICAgICAgIHJldHVybiB4ICogeCAqIHggKiAoeCAqICh4ICogNiAtIDE1KSArIDEwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUm91bmRzIGEgbnVtYmVyIHVwIHRvIG5lYXJlc3QgbXVsdGlwbGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtVG9Sb3VuZCAtIFRoZSBudW1iZXIgdG8gcm91bmQgdXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxlIC0gVGhlIG11bHRpcGxlIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIHJvdW5kZWQgdXAgdG8gbmVhcmVzdCBtdWx0aXBsZS5cbiAgICAgKi9cbiAgICByb3VuZFVwOiBmdW5jdGlvbiAobnVtVG9Sb3VuZCwgbXVsdGlwbGUpIHtcbiAgICAgICAgaWYgKG11bHRpcGxlID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIG51bVRvUm91bmQ7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtVG9Sb3VuZCAvIG11bHRpcGxlKSAqIG11bHRpcGxlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBhIGdpdmVuIG51bWJlciByZXNpZGVzIGJldHdlZW4gdHdvIG90aGVyIGdpdmVuIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtIC0gVGhlIG51bWJlciB0byBjaGVjayB0aGUgcG9zaXRpb24gb2YuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGEgLSBUaGUgZmlyc3QgdXBwZXIgb3IgbG93ZXIgdGhyZXNob2xkIHRvIGNoZWNrIGJldHdlZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGIgLSBUaGUgc2Vjb25kIHVwcGVyIG9yIGxvd2VyIHRocmVzaG9sZCB0byBjaGVjayBiZXR3ZWVuLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVzaXZlIC0gSWYgdHJ1ZSwgYSBudW0gcGFyYW0gd2hpY2ggaXMgZXF1YWwgdG8gYSBvciBiIHdpbGwgcmV0dXJuIHRydWUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgYmV0d2VlbiBvciBmYWxzZSBvdGhlcndpc2UuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGJldHdlZW46IGZ1bmN0aW9uIChudW0sIGEsIGIsIGluY2x1c2l2ZSkge1xuICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihhLCBiKTtcbiAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoYSwgYik7XG4gICAgICAgIHJldHVybiBpbmNsdXNpdmUgPyBudW0gPj0gbWluICYmIG51bSA8PSBtYXggOiBudW0gPiBtaW4gJiYgbnVtIDwgbWF4O1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IG1hdGggfTtcbiJdLCJuYW1lcyI6WyJtYXRoIiwiREVHX1RPX1JBRCIsIk1hdGgiLCJQSSIsIlJBRF9UT19ERUciLCJjbGFtcCIsInZhbHVlIiwibWluIiwibWF4IiwiaW50VG9CeXRlczI0IiwiaSIsInIiLCJnIiwiYiIsImludFRvQnl0ZXMzMiIsImEiLCJieXRlc1RvSW50MjQiLCJsZW5ndGgiLCJieXRlc1RvSW50MzIiLCJsZXJwIiwiYWxwaGEiLCJsZXJwQW5nbGUiLCJwb3dlck9mVHdvIiwieCIsIm5leHRQb3dlck9mVHdvIiwidmFsIiwibmVhcmVzdFBvd2VyT2ZUd28iLCJwb3ciLCJyb3VuZCIsImxvZyIsInJhbmRvbSIsImRpZmYiLCJzbW9vdGhzdGVwIiwic21vb3RoZXJzdGVwIiwicm91bmRVcCIsIm51bVRvUm91bmQiLCJtdWx0aXBsZSIsImNlaWwiLCJiZXR3ZWVuIiwibnVtIiwiaW5jbHVzaXZlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUtBLE1BQU1BLElBQUksR0FBRztBQU1UQyxFQUFBQSxVQUFVLEVBQUVDLElBQUksQ0FBQ0MsRUFBTCxHQUFVLEdBTmI7QUFhVEMsRUFBQUEsVUFBVSxFQUFFLEdBQUEsR0FBTUYsSUFBSSxDQUFDQyxFQWJkO0FBdUJURSxFQUFBQSxLQUFLLEVBQUUsVUFBVUMsS0FBVixFQUFpQkMsR0FBakIsRUFBc0JDLEdBQXRCLEVBQTJCO0FBQzlCLElBQUEsSUFBSUYsS0FBSyxJQUFJRSxHQUFiLEVBQWtCLE9BQU9BLEdBQVAsQ0FBQTtBQUNsQixJQUFBLElBQUlGLEtBQUssSUFBSUMsR0FBYixFQUFrQixPQUFPQSxHQUFQLENBQUE7QUFDbEIsSUFBQSxPQUFPRCxLQUFQLENBQUE7R0ExQks7RUFzQ1RHLFlBQVksRUFBRSxVQUFVQyxDQUFWLEVBQWE7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
