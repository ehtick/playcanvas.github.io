/**
 * @license
 * PlayCanvas Engine v1.57.0 revision f1998a31e (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Tracing } from './tracing.js';

class Debug {
  static deprecated(message) {
    if (!Debug._loggedMessages.has(message)) {
      Debug._loggedMessages.add(message);

      console.warn('DEPRECATED: ' + message);
    }
  }

  static assert(assertion, ...args) {
    if (!assertion) {
      console.error('ASSERT FAILED: ', ...args);
    }
  }

  static call(func) {
    func();
  }

  static log(...args) {
    console.log(...args);
  }

  static logOnce(message) {
    if (!Debug._loggedMessages.has(message)) {
      Debug._loggedMessages.add(message);

      console.log(message);
    }
  }

  static warn(...args) {
    console.warn(...args);
  }

  static warnOnce(message) {
    if (!Debug._loggedMessages.has(message)) {
      Debug._loggedMessages.add(message);

      console.warn(message);
    }
  }

  static error(...args) {
    console.error(...args);
  }

  static errorOnce(message) {
    if (!Debug._loggedMessages.has(message)) {
      Debug._loggedMessages.add(message);

      console.error(message);
    }
  }

  static trace(channel, ...args) {
    if (Tracing.get(channel)) {
      console.log(`${channel.padEnd(20, ' ')}|`, ...args);
    }
  }

}

Debug._loggedMessages = new Set();

class DebugHelper {
  static setName(object, name) {
    if (object) {
      object.name = name;
    }
  }

  static setLabel(object, label) {
    if (object) {
      object.label = label;
    }
  }

}

export { Debug, DebugHelper };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
