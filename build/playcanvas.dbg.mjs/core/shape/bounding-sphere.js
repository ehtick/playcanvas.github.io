/**
 * @license
 * PlayCanvas Engine v1.59.0-preview revision 797466563 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../debug.js';
import { Vec3 } from '../math/vec3.js';

const tmpVecA = new Vec3();
const tmpVecB = new Vec3();

class BoundingSphere {
  constructor(center = new Vec3(), radius = 0.5) {
    Debug.assert(!Object.isFrozen(center), 'The constructor of \'BoundingSphere\' does not accept a constant (frozen) object as a \'center\' parameter');

    this.center = center;
    this.radius = radius;
  }
  containsPoint(point) {
    const lenSq = tmpVecA.sub2(point, this.center).lengthSq();
    const r = this.radius;
    return lenSq < r * r;
  }

  intersectsRay(ray, point) {
    const m = tmpVecA.copy(ray.origin).sub(this.center);
    const b = m.dot(tmpVecB.copy(ray.direction).normalize());
    const c = m.dot(m) - this.radius * this.radius;

    if (c > 0 && b > 0) return false;
    const discr = b * b - c;
    if (discr < 0) return false;

    const t = Math.abs(-b - Math.sqrt(discr));

    if (point) point.copy(ray.direction).mulScalar(t).add(ray.origin);
    return true;
  }

  intersectsBoundingSphere(sphere) {
    tmpVecA.sub2(sphere.center, this.center);
    const totalRadius = sphere.radius + this.radius;
    if (tmpVecA.lengthSq() <= totalRadius * totalRadius) {
      return true;
    }
    return false;
  }
}

export { BoundingSphere };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRpbmctc3BoZXJlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9zaGFwZS9ib3VuZGluZy1zcGhlcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcgfSBmcm9tICcuLi9kZWJ1Zy5qcyc7XG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC92ZWMzLmpzJztcblxuY29uc3QgdG1wVmVjQSA9IG5ldyBWZWMzKCk7XG5jb25zdCB0bXBWZWNCID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBBIGJvdW5kaW5nIHNwaGVyZSBpcyBhIHZvbHVtZSBmb3IgZmFjaWxpdGF0aW5nIGZhc3QgaW50ZXJzZWN0aW9uIHRlc3RpbmcuXG4gKi9cbmNsYXNzIEJvdW5kaW5nU3BoZXJlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEJvdW5kaW5nU3BoZXJlIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWZWMzfSBbY2VudGVyXSAtIFRoZSB3b3JsZCBzcGFjZSBjb29yZGluYXRlIG1hcmtpbmcgdGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlLiBUaGVcbiAgICAgKiBjb25zdHJ1Y3RvciB0YWtlcyBhIHJlZmVyZW5jZSBvZiB0aGlzIHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1c10gLSBUaGUgcmFkaXVzIG9mIHRoZSBib3VuZGluZyBzcGhlcmUuIERlZmF1bHRzIHRvIDAuNS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIENyZWF0ZSBhIG5ldyBib3VuZGluZyBzcGhlcmUgY2VudGVyZWQgb24gdGhlIG9yaWdpbiB3aXRoIGEgcmFkaXVzIG9mIDAuNVxuICAgICAqIHZhciBzcGhlcmUgPSBuZXcgcGMuQm91bmRpbmdTcGhlcmUoKTtcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjZW50ZXIgPSBuZXcgVmVjMygpLCByYWRpdXMgPSAwLjUpIHtcbiAgICAgICAgRGVidWcuYXNzZXJ0KCFPYmplY3QuaXNGcm96ZW4oY2VudGVyKSwgJ1RoZSBjb25zdHJ1Y3RvciBvZiBcXCdCb3VuZGluZ1NwaGVyZVxcJyBkb2VzIG5vdCBhY2NlcHQgYSBjb25zdGFudCAoZnJvemVuKSBvYmplY3QgYXMgYSBcXCdjZW50ZXJcXCcgcGFyYW1ldGVyJyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENlbnRlciBvZiBzcGhlcmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtWZWMzfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jZW50ZXIgPSBjZW50ZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmFkaXVzIG9mIHRoZSBib3VuZGluZyBzcGhlcmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcbiAgICB9XG5cbiAgICBjb250YWluc1BvaW50KHBvaW50KSB7XG4gICAgICAgIGNvbnN0IGxlblNxID0gdG1wVmVjQS5zdWIyKHBvaW50LCB0aGlzLmNlbnRlcikubGVuZ3RoU3EoKTtcbiAgICAgICAgY29uc3QgciA9IHRoaXMucmFkaXVzO1xuICAgICAgICByZXR1cm4gbGVuU3EgPCByICogcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGEgcmF5IGludGVyc2VjdHMgd2l0aCB0aGUgc3BoZXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4vcmF5LmpzJykuUmF5fSByYXkgLSBSYXkgdG8gdGVzdCBhZ2FpbnN0IChkaXJlY3Rpb24gbXVzdCBiZSBub3JtYWxpemVkKS5cbiAgICAgKiBAcGFyYW0ge1ZlYzN9IFtwb2ludF0gLSBJZiB0aGVyZSBpcyBhbiBpbnRlcnNlY3Rpb24sIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnQgd2lsbCBiZSBjb3BpZWRcbiAgICAgKiBpbnRvIGhlcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlcmUgaXMgYW4gaW50ZXJzZWN0aW9uLlxuICAgICAqL1xuICAgIGludGVyc2VjdHNSYXkocmF5LCBwb2ludCkge1xuICAgICAgICBjb25zdCBtID0gdG1wVmVjQS5jb3B5KHJheS5vcmlnaW4pLnN1Yih0aGlzLmNlbnRlcik7XG4gICAgICAgIGNvbnN0IGIgPSBtLmRvdCh0bXBWZWNCLmNvcHkocmF5LmRpcmVjdGlvbikubm9ybWFsaXplKCkpO1xuICAgICAgICBjb25zdCBjID0gbS5kb3QobSkgLSB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzO1xuXG4gICAgICAgIC8vIGV4aXQgaWYgcmF5J3Mgb3JpZ2luIG91dHNpZGUgb2Ygc3BoZXJlIChjID4gMCkgYW5kIHJheSBwb2ludGluZyBhd2F5IGZyb20gcyAoYiA+IDApXG4gICAgICAgIGlmIChjID4gMCAmJiBiID4gMClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICBjb25zdCBkaXNjciA9IGIgKiBiIC0gYztcbiAgICAgICAgLy8gYSBuZWdhdGl2ZSBkaXNjcmltaW5hbnQgY29ycmVzcG9uZHMgdG8gcmF5IG1pc3Npbmcgc3BoZXJlXG4gICAgICAgIGlmIChkaXNjciA8IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgLy8gcmF5IGludGVyc2VjdHMgc3BoZXJlLCBjb21wdXRlIHNtYWxsZXN0IHQgdmFsdWUgb2YgaW50ZXJzZWN0aW9uXG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLmFicygtYiAtIE1hdGguc3FydChkaXNjcikpO1xuXG4gICAgICAgIC8vIGlmIHQgaXMgbmVnYXRpdmUsIHJheSBzdGFydGVkIGluc2lkZSBzcGhlcmUgc28gY2xhbXAgdCB0byB6ZXJvXG4gICAgICAgIGlmIChwb2ludClcbiAgICAgICAgICAgIHBvaW50LmNvcHkocmF5LmRpcmVjdGlvbikubXVsU2NhbGFyKHQpLmFkZChyYXkub3JpZ2luKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGEgQm91bmRpbmcgU3BoZXJlIGlzIG92ZXJsYXBwaW5nLCBlbnZlbG9waW5nLCBvciBpbnNpZGUgdGhpcyBCb3VuZGluZyBTcGhlcmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0JvdW5kaW5nU3BoZXJlfSBzcGhlcmUgLSBCb3VuZGluZyBTcGhlcmUgdG8gdGVzdC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgQm91bmRpbmcgU3BoZXJlIGlzIG92ZXJsYXBwaW5nLCBlbnZlbG9waW5nLCBvciBpbnNpZGUgdGhpcyBCb3VuZGluZyBTcGhlcmUgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBpbnRlcnNlY3RzQm91bmRpbmdTcGhlcmUoc3BoZXJlKSB7XG4gICAgICAgIHRtcFZlY0Euc3ViMihzcGhlcmUuY2VudGVyLCB0aGlzLmNlbnRlcik7XG4gICAgICAgIGNvbnN0IHRvdGFsUmFkaXVzID0gc3BoZXJlLnJhZGl1cyArIHRoaXMucmFkaXVzO1xuICAgICAgICBpZiAodG1wVmVjQS5sZW5ndGhTcSgpIDw9IHRvdGFsUmFkaXVzICogdG90YWxSYWRpdXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQm91bmRpbmdTcGhlcmUgfTtcbiJdLCJuYW1lcyI6WyJ0bXBWZWNBIiwiVmVjMyIsInRtcFZlY0IiLCJCb3VuZGluZ1NwaGVyZSIsImNvbnN0cnVjdG9yIiwiY2VudGVyIiwicmFkaXVzIiwiRGVidWciLCJhc3NlcnQiLCJPYmplY3QiLCJpc0Zyb3plbiIsImNvbnRhaW5zUG9pbnQiLCJwb2ludCIsImxlblNxIiwic3ViMiIsImxlbmd0aFNxIiwiciIsImludGVyc2VjdHNSYXkiLCJyYXkiLCJtIiwiY29weSIsIm9yaWdpbiIsInN1YiIsImIiLCJkb3QiLCJkaXJlY3Rpb24iLCJub3JtYWxpemUiLCJjIiwiZGlzY3IiLCJ0IiwiTWF0aCIsImFicyIsInNxcnQiLCJtdWxTY2FsYXIiLCJhZGQiLCJpbnRlcnNlY3RzQm91bmRpbmdTcGhlcmUiLCJzcGhlcmUiLCJ0b3RhbFJhZGl1cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxNQUFNQSxPQUFPLEdBQUcsSUFBSUMsSUFBSSxFQUFFLENBQUE7QUFDMUIsTUFBTUMsT0FBTyxHQUFHLElBQUlELElBQUksRUFBRSxDQUFBOztBQUsxQixNQUFNRSxjQUFjLENBQUM7RUFXakJDLFdBQVcsQ0FBQ0MsTUFBTSxHQUFHLElBQUlKLElBQUksRUFBRSxFQUFFSyxNQUFNLEdBQUcsR0FBRyxFQUFFO0FBQzNDQyxJQUFBQSxLQUFLLENBQUNDLE1BQU0sQ0FBQyxDQUFDQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0wsTUFBTSxDQUFDLEVBQUUsNEdBQTRHLENBQUMsQ0FBQTs7SUFPcEosSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQTtJQU1wQixJQUFJLENBQUNDLE1BQU0sR0FBR0EsTUFBTSxDQUFBO0FBQ3hCLEdBQUE7RUFFQUssYUFBYSxDQUFDQyxLQUFLLEVBQUU7QUFDakIsSUFBQSxNQUFNQyxLQUFLLEdBQUdiLE9BQU8sQ0FBQ2MsSUFBSSxDQUFDRixLQUFLLEVBQUUsSUFBSSxDQUFDUCxNQUFNLENBQUMsQ0FBQ1UsUUFBUSxFQUFFLENBQUE7QUFDekQsSUFBQSxNQUFNQyxDQUFDLEdBQUcsSUFBSSxDQUFDVixNQUFNLENBQUE7QUFDckIsSUFBQSxPQUFPTyxLQUFLLEdBQUdHLENBQUMsR0FBR0EsQ0FBQyxDQUFBO0FBQ3hCLEdBQUE7O0FBVUFDLEVBQUFBLGFBQWEsQ0FBQ0MsR0FBRyxFQUFFTixLQUFLLEVBQUU7QUFDdEIsSUFBQSxNQUFNTyxDQUFDLEdBQUduQixPQUFPLENBQUNvQixJQUFJLENBQUNGLEdBQUcsQ0FBQ0csTUFBTSxDQUFDLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNqQixNQUFNLENBQUMsQ0FBQTtBQUNuRCxJQUFBLE1BQU1rQixDQUFDLEdBQUdKLENBQUMsQ0FBQ0ssR0FBRyxDQUFDdEIsT0FBTyxDQUFDa0IsSUFBSSxDQUFDRixHQUFHLENBQUNPLFNBQVMsQ0FBQyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxDQUFBO0FBQ3hELElBQUEsTUFBTUMsQ0FBQyxHQUFHUixDQUFDLENBQUNLLEdBQUcsQ0FBQ0wsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDYixNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNLENBQUE7O0lBRzlDLElBQUlxQixDQUFDLEdBQUcsQ0FBQyxJQUFJSixDQUFDLEdBQUcsQ0FBQyxFQUNkLE9BQU8sS0FBSyxDQUFBO0FBRWhCLElBQUEsTUFBTUssS0FBSyxHQUFHTCxDQUFDLEdBQUdBLENBQUMsR0FBR0ksQ0FBQyxDQUFBO0FBRXZCLElBQUEsSUFBSUMsS0FBSyxHQUFHLENBQUMsRUFDVCxPQUFPLEtBQUssQ0FBQTs7QUFHaEIsSUFBQSxNQUFNQyxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUNSLENBQUMsR0FBR08sSUFBSSxDQUFDRSxJQUFJLENBQUNKLEtBQUssQ0FBQyxDQUFDLENBQUE7O0lBR3pDLElBQUloQixLQUFLLEVBQ0xBLEtBQUssQ0FBQ1EsSUFBSSxDQUFDRixHQUFHLENBQUNPLFNBQVMsQ0FBQyxDQUFDUSxTQUFTLENBQUNKLENBQUMsQ0FBQyxDQUFDSyxHQUFHLENBQUNoQixHQUFHLENBQUNHLE1BQU0sQ0FBQyxDQUFBO0FBRTFELElBQUEsT0FBTyxJQUFJLENBQUE7QUFDZixHQUFBOztFQVFBYyx3QkFBd0IsQ0FBQ0MsTUFBTSxFQUFFO0lBQzdCcEMsT0FBTyxDQUFDYyxJQUFJLENBQUNzQixNQUFNLENBQUMvQixNQUFNLEVBQUUsSUFBSSxDQUFDQSxNQUFNLENBQUMsQ0FBQTtJQUN4QyxNQUFNZ0MsV0FBVyxHQUFHRCxNQUFNLENBQUM5QixNQUFNLEdBQUcsSUFBSSxDQUFDQSxNQUFNLENBQUE7SUFDL0MsSUFBSU4sT0FBTyxDQUFDZSxRQUFRLEVBQUUsSUFBSXNCLFdBQVcsR0FBR0EsV0FBVyxFQUFFO0FBQ2pELE1BQUEsT0FBTyxJQUFJLENBQUE7QUFDZixLQUFBO0FBRUEsSUFBQSxPQUFPLEtBQUssQ0FBQTtBQUNoQixHQUFBO0FBQ0o7Ozs7In0=
