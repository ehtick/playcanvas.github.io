/**
 * @license
 * PlayCanvas Engine v1.59.0-preview revision 797466563 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { path } from '../../core/path.js';
import { Tags } from '../../core/tags.js';
import { EventHandler } from '../../core/event-handler.js';
import { findAvailableLocale } from '../i18n/utils.js';
import { ABSOLUTE_URL } from './constants.js';
import { AssetFile } from './asset-file.js';
import { getApplication } from '../globals.js';
import { http } from '../../platform/net/http.js';

let assetIdCounter = -1;
const VARIANT_SUPPORT = {
  pvr: 'extCompressedTexturePVRTC',
  dxt: 'extCompressedTextureS3TC',
  etc2: 'extCompressedTextureETC',
  etc1: 'extCompressedTextureETC1',
  basis: 'canvas'
};

const VARIANT_DEFAULT_PRIORITY = ['pvr', 'dxt', 'etc2', 'etc1', 'basis'];

class Asset extends EventHandler {
  constructor(name, type, file, data, options) {
    super();
    this._id = assetIdCounter--;

    this.name = name || '';

    this.type = type;

    this.tags = new Tags(this);
    this._preload = false;
    this._file = null;
    this._data = data || {};

    this.options = options || {};

    this._resources = [];

    this._i18n = {};

    this.loaded = false;

    this.loading = false;

    this.registry = null;
    if (file) this.file = file;
  }

  set id(value) {
    this._id = value;
  }
  get id() {
    return this._id;
  }

  set file(value) {
    if (value && value.variants && ['texture', 'textureatlas', 'bundle'].indexOf(this.type) !== -1) {
      var _this$registry, _this$registry$_loade;
      const app = ((_this$registry = this.registry) == null ? void 0 : (_this$registry$_loade = _this$registry._loader) == null ? void 0 : _this$registry$_loade._app) || getApplication();
      const device = app == null ? void 0 : app.graphicsDevice;
      if (device) {
        for (let i = 0, len = VARIANT_DEFAULT_PRIORITY.length; i < len; i++) {
          const variant = VARIANT_DEFAULT_PRIORITY[i];
          if (value.variants[variant] && device[VARIANT_SUPPORT[variant]]) {
            value = value.variants[variant];
            break;
          }

          if (app.enableBundles) {
            const bundles = app.bundles.listBundlesForAsset(this);
            if (bundles && bundles.find(b => {
              var _b$file;
              return b == null ? void 0 : (_b$file = b.file) == null ? void 0 : _b$file.variants[variant];
            })) {
              break;
            }
          }
        }
      }
    }
    const oldFile = this._file;
    const newFile = value ? new AssetFile(value.url, value.filename, value.hash, value.size, value.opt, value.contents) : null;
    if (!!newFile !== !!oldFile || newFile && !newFile.equals(oldFile)) {
      this._file = newFile;
      this.fire('change', this, 'file', newFile, oldFile);
      this.reload();
    }
  }
  get file() {
    return this._file;
  }

  set data(value) {
    const old = this._data;
    this._data = value;
    if (value !== old) {
      this.fire('change', this, 'data', value, old);
      if (this.loaded) this.registry._loader.patch(this, this.registry);
    }
  }
  get data() {
    return this._data;
  }

  set resource(value) {
    const _old = this._resources[0];
    this._resources[0] = value;
    this.fire('change', this, 'resource', value, _old);
  }
  get resource() {
    return this._resources[0];
  }

  set resources(value) {
    const _old = this._resources;
    this._resources = value;
    this.fire('change', this, 'resources', value, _old);
  }
  get resources() {
    return this._resources;
  }

  set preload(value) {
    value = !!value;
    if (this._preload === value) return;
    this._preload = value;
    if (this._preload && !this.loaded && !this.loading && this.registry) this.registry.load(this);
  }
  get preload() {
    return this._preload;
  }
  set loadFaces(value) {
    value = !!value;
    if (!this.hasOwnProperty('_loadFaces') || value !== this._loadFaces) {
      this._loadFaces = value;

      if (this.loaded) this.registry._loader.patch(this, this.registry);
    }
  }
  get loadFaces() {
    return this._loadFaces;
  }

  getFileUrl() {
    const file = this.file;
    if (!file || !file.url) return null;
    let url = file.url;
    if (this.registry && this.registry.prefix && !ABSOLUTE_URL.test(url)) url = this.registry.prefix + url;

    if (this.type !== 'script' && file.hash) {
      const separator = url.indexOf('?') !== -1 ? '&' : '?';
      url += separator + 't=' + file.hash;
    }
    return url;
  }

  getAbsoluteUrl(relativePath) {
    if (relativePath.startsWith('blob:') || relativePath.startsWith('data:')) {
      return relativePath;
    }
    const base = path.getDirectory(this.file.url);
    return path.join(base, relativePath);
  }

  getLocalizedAssetId(locale) {
    locale = findAvailableLocale(locale, this._i18n);
    return this._i18n[locale] || null;
  }

  addLocalizedAssetId(locale, assetId) {
    this._i18n[locale] = assetId;
    this.fire('add:localized', locale, assetId);
  }

  removeLocalizedAssetId(locale) {
    const assetId = this._i18n[locale];
    if (assetId) {
      delete this._i18n[locale];
      this.fire('remove:localized', locale, assetId);
    }
  }

  ready(callback, scope) {
    scope = scope || this;
    if (this.loaded) {
      callback.call(scope, this);
    } else {
      this.once('load', function (asset) {
        callback.call(scope, asset);
      });
    }
  }
  reload() {
    if (this.loaded) {
      this.loaded = false;
      this.registry.load(this);
    }
  }

  unload() {
    if (!this.loaded && this._resources.length === 0) return;
    this.fire('unload', this);
    this.registry.fire('unload:' + this.id, this);
    const old = this._resources;

    this.resources = [];
    this.loaded = false;

    if (this.file) {
      this.registry._loader.clearCache(this.getFileUrl(), this.type);
    }

    for (let i = 0; i < old.length; ++i) {
      const resource = old[i];
      if (resource && resource.destroy) {
        resource.destroy();
      }
    }
  }

  static fetchArrayBuffer(loadUrl, callback, asset, maxRetries = 0) {
    var _asset$file;
    if (asset != null && (_asset$file = asset.file) != null && _asset$file.contents) {
      setTimeout(() => {
        callback(null, asset.file.contents);
      });
    } else {
      http.get(loadUrl, {
        cache: true,
        responseType: 'arraybuffer',
        retry: maxRetries > 0,
        maxRetries: maxRetries
      }, callback);
    }
  }
}

export { Asset };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvYXNzZXQvYXNzZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGF0aCB9IGZyb20gJy4uLy4uL2NvcmUvcGF0aC5qcyc7XG5pbXBvcnQgeyBUYWdzIH0gZnJvbSAnLi4vLi4vY29yZS90YWdzLmpzJztcblxuaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vY29yZS9ldmVudC1oYW5kbGVyLmpzJztcblxuaW1wb3J0IHsgZmluZEF2YWlsYWJsZUxvY2FsZSB9IGZyb20gJy4uL2kxOG4vdXRpbHMuanMnO1xuXG5pbXBvcnQgeyBBQlNPTFVURV9VUkwgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBBc3NldEZpbGUgfSBmcm9tICcuL2Fzc2V0LWZpbGUuanMnO1xuaW1wb3J0IHsgZ2V0QXBwbGljYXRpb24gfSBmcm9tICcuLi9nbG9iYWxzLmpzJztcbmltcG9ydCB7IGh0dHAgfSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9uZXQvaHR0cC5qcyc7XG5cbi8vIGF1dG8gaW5jcmVtZW50aW5nIG51bWJlciBmb3IgYXNzZXQgaWRzXG5sZXQgYXNzZXRJZENvdW50ZXIgPSAtMTtcblxuY29uc3QgVkFSSUFOVF9TVVBQT1JUID0ge1xuICAgIHB2cjogJ2V4dENvbXByZXNzZWRUZXh0dXJlUFZSVEMnLFxuICAgIGR4dDogJ2V4dENvbXByZXNzZWRUZXh0dXJlUzNUQycsXG4gICAgZXRjMjogJ2V4dENvbXByZXNzZWRUZXh0dXJlRVRDJyxcbiAgICBldGMxOiAnZXh0Q29tcHJlc3NlZFRleHR1cmVFVEMxJyxcbiAgICBiYXNpczogJ2NhbnZhcycgLy8gZHVtbXksIGJhc2lzIGlzIGFsd2F5cyBzdXBwb3J0ZWRcbn07XG5cbmNvbnN0IFZBUklBTlRfREVGQVVMVF9QUklPUklUWSA9IFsncHZyJywgJ2R4dCcsICdldGMyJywgJ2V0YzEnLCAnYmFzaXMnXTtcblxuLyoqXG4gKiBDYWxsYmFjayB1c2VkIGJ5IHtAbGluayBBc3NldCNyZWFkeX0gYW5kIGNhbGxlZCB3aGVuIGFuIGFzc2V0IGlzIHJlYWR5LlxuICpcbiAqIEBjYWxsYmFjayBBc3NldFJlYWR5Q2FsbGJhY2tcbiAqIEBwYXJhbSB7QXNzZXR9IGFzc2V0IC0gVGhlIHJlYWR5IGFzc2V0LlxuICovXG5cbi8qKlxuICogQW4gYXNzZXQgcmVjb3JkIG9mIGEgZmlsZSBvciBkYXRhIHJlc291cmNlIHRoYXQgY2FuIGJlIGxvYWRlZCBieSB0aGUgZW5naW5lLiBUaGUgYXNzZXQgY29udGFpbnNcbiAqIGZvdXIgaW1wb3J0YW50IGZpZWxkczpcbiAqXG4gKiAtIGBmaWxlYDogY29udGFpbnMgdGhlIGRldGFpbHMgb2YgYSBmaWxlIChmaWxlbmFtZSwgdXJsKSB3aGljaCBjb250YWlucyB0aGUgcmVzb3VyY2UgZGF0YSwgZS5nLlxuICogYW4gaW1hZ2UgZmlsZSBmb3IgYSB0ZXh0dXJlIGFzc2V0LlxuICogLSBgZGF0YWA6IGNvbnRhaW5zIGEgSlNPTiBibG9iIHdoaWNoIGNvbnRhaW5zIGVpdGhlciB0aGUgcmVzb3VyY2UgZGF0YSBmb3IgdGhlIGFzc2V0IChlLmcuXG4gKiBtYXRlcmlhbCBkYXRhKSBvciBhZGRpdGlvbmFsIGRhdGEgZm9yIHRoZSBmaWxlIChlLmcuIG1hdGVyaWFsIG1hcHBpbmdzIGZvciBhIG1vZGVsKS5cbiAqIC0gYG9wdGlvbnNgOiBjb250YWlucyBhIEpTT04gYmxvYiB3aXRoIGhhbmRsZXItc3BlY2lmaWMgbG9hZCBvcHRpb25zLlxuICogLSBgcmVzb3VyY2VgOiBjb250YWlucyB0aGUgZmluYWwgcmVzb3VyY2Ugd2hlbiBpdCBpcyBsb2FkZWQuIChlLmcuIGEge0BsaW5rIFN0YW5kYXJkTWF0ZXJpYWx9IG9yXG4gKiBhIHtAbGluayBUZXh0dXJlfSkuXG4gKlxuICogU2VlIHRoZSB7QGxpbmsgQXNzZXRSZWdpc3RyeX0gZm9yIGRldGFpbHMgb24gbG9hZGluZyByZXNvdXJjZXMgZnJvbSBhc3NldHMuXG4gKlxuICogQGF1Z21lbnRzIEV2ZW50SGFuZGxlclxuICovXG5jbGFzcyBBc3NldCBleHRlbmRzIEV2ZW50SGFuZGxlciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEFzc2V0IHJlY29yZC4gR2VuZXJhbGx5LCBBc3NldHMgYXJlIGNyZWF0ZWQgaW4gdGhlIGxvYWRpbmcgcHJvY2VzcyBhbmQgeW91XG4gICAgICogd29uJ3QgbmVlZCB0byBjcmVhdGUgdGhlbSBieSBoYW5kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBBIG5vbi11bmlxdWUgYnV0IGh1bWFuLXJlYWRhYmxlIG5hbWUgd2hpY2ggY2FuIGJlIGxhdGVyIHVzZWQgdG9cbiAgICAgKiByZXRyaWV2ZSB0aGUgYXNzZXQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUeXBlIG9mIGFzc2V0LiBPbmUgb2YgW1wiYW5pbWF0aW9uXCIsIFwiYXVkaW9cIiwgXCJiaW5hcnlcIiwgXCJjb250YWluZXJcIixcbiAgICAgKiBcImN1YmVtYXBcIiwgXCJjc3NcIiwgXCJmb250XCIsIFwianNvblwiLCBcImh0bWxcIiwgXCJtYXRlcmlhbFwiLCBcIm1vZGVsXCIsIFwic2NyaXB0XCIsIFwic2hhZGVyXCIsIFwic3ByaXRlXCIsXG4gICAgICogXCJ0ZW1wbGF0ZVwiLCB0ZXh0XCIsIFwidGV4dHVyZVwiLCBcInRleHR1cmVhdGxhc1wiXVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbZmlsZV0gLSBEZXRhaWxzIGFib3V0IHRoZSBmaWxlIHRoZSBhc3NldCBpcyBtYWRlIGZyb20uIEF0IHRoZSBsZWFzdCBtdXN0XG4gICAgICogY29udGFpbiB0aGUgJ3VybCcgZmllbGQuIEZvciBhc3NldHMgdGhhdCBkb24ndCBjb250YWluIGZpbGUgZGF0YSB1c2UgbnVsbC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZpbGUudXJsXSAtIFRoZSBVUkwgb2YgdGhlIHJlc291cmNlIGZpbGUgdGhhdCBjb250YWlucyB0aGUgYXNzZXQgZGF0YS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZpbGUuZmlsZW5hbWVdIC0gVGhlIGZpbGVuYW1lIG9mIHRoZSByZXNvdXJjZSBmaWxlIG9yIG51bGwgaWYgbm8gZmlsZW5hbWVcbiAgICAgKiB3YXMgc2V0IChlLmcgZnJvbSB1c2luZyB7QGxpbmsgQXNzZXRSZWdpc3RyeSNsb2FkRnJvbVVybH0pLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZmlsZS5zaXplXSAtIFRoZSBzaXplIG9mIHRoZSByZXNvdXJjZSBmaWxlIG9yIG51bGwgaWYgbm8gc2l6ZSB3YXMgc2V0XG4gICAgICogKGUuZy4gZnJvbSB1c2luZyB7QGxpbmsgQXNzZXRSZWdpc3RyeSNsb2FkRnJvbVVybH0pLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbZmlsZS5oYXNoXSAtIFRoZSBNRDUgaGFzaCBvZiB0aGUgcmVzb3VyY2UgZmlsZSBkYXRhIGFuZCB0aGUgQXNzZXQgZGF0YVxuICAgICAqIGZpZWxkIG9yIG51bGwgaWYgaGFzaCB3YXMgc2V0IChlLmcgZnJvbSB1c2luZyB7QGxpbmsgQXNzZXRSZWdpc3RyeSNsb2FkRnJvbVVybH0pLlxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IFtmaWxlLmNvbnRlbnRzXSAtIE9wdGlvbmFsIGZpbGUgY29udGVudHMuIFRoaXMgaXMgZmFzdGVyIHRoYW4gd3JhcHBpbmdcbiAgICAgKiB0aGUgZGF0YSBpbiBhIChiYXNlNjQgZW5jb2RlZCkgYmxvYi4gQ3VycmVudGx5IG9ubHkgdXNlZCBieSBjb250YWluZXIgYXNzZXRzLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fHN0cmluZ30gW2RhdGFdIC0gSlNPTiBvYmplY3Qgb3Igc3RyaW5nIHdpdGggYWRkaXRpb25hbCBkYXRhIGFib3V0IHRoZSBhc3NldC5cbiAgICAgKiAoZS5nLiBmb3IgdGV4dHVyZSBhbmQgbW9kZWwgYXNzZXRzKSBvciBjb250YWlucyB0aGUgYXNzZXQgZGF0YSBpdHNlbGYgKGUuZy4gaW4gdGhlIGNhc2Ugb2ZcbiAgICAgKiBtYXRlcmlhbHMpLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBUaGUgYXNzZXQgaGFuZGxlciBvcHRpb25zLiBGb3IgY29udGFpbmVyIG9wdGlvbnMgc2VlXG4gICAgICoge0BsaW5rIENvbnRhaW5lckhhbmRsZXJ9LlxuICAgICAqIEBwYXJhbSB7J2Fub255bW91cyd8J3VzZS1jcmVkZW50aWFscyd8bnVsbH0gW29wdGlvbnMuY3Jvc3NPcmlnaW5dIC0gRm9yIHVzZSB3aXRoIHRleHR1cmUgYXNzZXRzXG4gICAgICogdGhhdCBhcmUgbG9hZGVkIHVzaW5nIHRoZSBicm93c2VyLiBUaGlzIHNldHRpbmcgb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IGNyb3NzT3JpZ2luIHNwZWNpZmllci5cbiAgICAgKiBGb3IgbW9yZSBkZXRhaWxzIG9uIGNyb3NzT3JpZ2luIGFuZCBpdHMgdXNlLCBzZWVcbiAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEltYWdlRWxlbWVudC9jcm9zc09yaWdpbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBhc3NldCA9IG5ldyBwYy5Bc3NldChcImEgdGV4dHVyZVwiLCBcInRleHR1cmVcIiwge1xuICAgICAqICAgICB1cmw6IFwiaHR0cDovL2V4YW1wbGUuY29tL215L2Fzc2V0cy9oZXJlL3RleHR1cmUucG5nXCJcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCB0eXBlLCBmaWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5faWQgPSBhc3NldElkQ291bnRlci0tO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgYXNzZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lIHx8ICcnO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgYXNzZXQuIE9uZSBvZiBbXCJhbmltYXRpb25cIiwgXCJhdWRpb1wiLCBcImJpbmFyeVwiLCBcImNvbnRhaW5lclwiLCBcImN1YmVtYXBcIixcbiAgICAgICAgICogXCJjc3NcIiwgXCJmb250XCIsIFwianNvblwiLCBcImh0bWxcIiwgXCJtYXRlcmlhbFwiLCBcIm1vZGVsXCIsIFwicmVuZGVyXCIsIFwic2NyaXB0XCIsIFwic2hhZGVyXCIsIFwic3ByaXRlXCIsXG4gICAgICAgICAqIFwidGVtcGxhdGVcIiwgXCJ0ZXh0XCIsIFwidGV4dHVyZVwiLCBcInRleHR1cmVhdGxhc1wiXVxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7KFwiYW5pbWF0aW9uXCJ8XCJhdWRpb1wifFwiYmluYXJ5XCJ8XCJjb250YWluZXJcInxcImN1YmVtYXBcInxcImNzc1wifFwiZm9udFwifFwianNvblwifFwiaHRtbFwifFwibWF0ZXJpYWxcInxcIm1vZGVsXCJ8XCJyZW5kZXJcInxcInNjcmlwdFwifFwic2hhZGVyXCJ8XCJzcHJpdGVcInxcInRlbXBsYXRlXCJ8XCJ0ZXh0XCJ8XCJ0ZXh0dXJlXCJ8XCJ0ZXh0dXJlYXRsYXNcIil9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBc3NldCB0YWdzLiBFbmFibGVzIGZpbmRpbmcgb2YgYXNzZXRzIGJ5IHRhZ3MgdXNpbmcgdGhlIHtAbGluayBBc3NldFJlZ2lzdHJ5I2ZpbmRCeVRhZ30gbWV0aG9kLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7VGFnc31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGFncyA9IG5ldyBUYWdzKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX3ByZWxvYWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZmlsZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhIHx8IHsgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogT3B0aW9uYWwgSlNPTiBkYXRhIHRoYXQgY29udGFpbnMgdGhlIGFzc2V0IGhhbmRsZXIgb3B0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgeyB9O1xuXG4gICAgICAgIC8vIFRoaXMgaXMgd2hlcmUgdGhlIGxvYWRlZCByZXNvdXJjZShzKSB3aWxsIGJlXG4gICAgICAgIHRoaXMuX3Jlc291cmNlcyA9IFtdO1xuXG4gICAgICAgIC8vIGEgc3RyaW5nLWFzc2V0SWQgZGljdGlvbmFyeSB0aGF0IG1hcHNcbiAgICAgICAgLy8gbG9jYWxlIHRvIGFzc2V0IGlkXG4gICAgICAgIHRoaXMuX2kxOG4gPSB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJ1ZSBpZiB0aGUgYXNzZXQgaGFzIGZpbmlzaGVkIGF0dGVtcHRpbmcgdG8gbG9hZCB0aGUgcmVzb3VyY2UuIEl0IGlzIG5vdCBndWFyYW50ZWVkXG4gICAgICAgICAqIHRoYXQgdGhlIHJlc291cmNlcyBhcmUgYXZhaWxhYmxlIGFzIHRoZXJlIGNvdWxkIGhhdmUgYmVlbiBhIG5ldHdvcmsgZXJyb3IuXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJ1ZSBpZiB0aGUgcmVzb3VyY2UgaXMgY3VycmVudGx5IGJlaW5nIGxvYWRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGFzc2V0IHJlZ2lzdHJ5IHRoYXQgdGhpcyBBc3NldCBiZWxvbmdzIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7aW1wb3J0KCcuL2Fzc2V0LXJlZ2lzdHJ5LmpzJykuQXNzZXRSZWdpc3RyeX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVnaXN0cnkgPSBudWxsO1xuXG4gICAgICAgIGlmIChmaWxlKSB0aGlzLmZpbGUgPSBmaWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIGFzc2V0IGhhcyBjb21wbGV0ZWQgbG9hZGluZy5cbiAgICAgKlxuICAgICAqIEBldmVudCBBc3NldCNsb2FkXG4gICAgICogQHBhcmFtIHtBc3NldH0gYXNzZXQgLSBUaGUgYXNzZXQgdGhhdCB3YXMgbG9hZGVkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQganVzdCBiZWZvcmUgdGhlIGFzc2V0IHVubG9hZHMgdGhlIHJlc291cmNlLiBUaGlzIGFsbG93cyBmb3IgdGhlIG9wcG9ydHVuaXR5IHRvIHByZXBhcmVcbiAgICAgKiBmb3IgYW4gYXNzZXQgdGhhdCB3aWxsIGJlIHVubG9hZGVkLiBFLmcuIENoYW5naW5nIHRoZSB0ZXh0dXJlIG9mIGEgbW9kZWwgdG8gYSBkZWZhdWx0IGJlZm9yZVxuICAgICAqIHRoZSBvbmUgaXQgd2FzIHVzaW5nIGlzIHVubG9hZGVkLlxuICAgICAqXG4gICAgICogQGV2ZW50IEFzc2V0I3VubG9hZFxuICAgICAqIEBwYXJhbSB7QXNzZXR9IGFzc2V0IC0gVGhlIGFzc2V0IHRoYXQgaXMgZHVlIHRvIGJlIHVubG9hZGVkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB0aGUgYXNzZXQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBhc3NldCByZWdpc3RyeS5cbiAgICAgKlxuICAgICAqIEBldmVudCBBc3NldCNyZW1vdmVcbiAgICAgKiBAcGFyYW0ge0Fzc2V0fSBhc3NldCAtIFRoZSBhc3NldCB0aGF0IHdhcyByZW1vdmVkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgaWYgdGhlIGFzc2V0IGVuY291bnRlcnMgYW4gZXJyb3Igd2hpbGUgbG9hZGluZy5cbiAgICAgKlxuICAgICAqIEBldmVudCBBc3NldCNlcnJvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlcnIgLSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0ge0Fzc2V0fSBhc3NldCAtIFRoZSBhc3NldCB0aGF0IGdlbmVyYXRlZCB0aGUgZXJyb3IuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIG9uZSBvZiB0aGUgYXNzZXQgcHJvcGVydGllcyBgZmlsZWAsIGBkYXRhYCwgYHJlc291cmNlYCBvciBgcmVzb3VyY2VzYCBpcyBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogQGV2ZW50IEFzc2V0I2NoYW5nZVxuICAgICAqIEBwYXJhbSB7QXNzZXR9IGFzc2V0IC0gVGhlIGFzc2V0IHRoYXQgd2FzIGxvYWRlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdGhhdCBjaGFuZ2VkLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgbmV3IHByb3BlcnR5IHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gb2xkVmFsdWUgLSBUaGUgb2xkIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB3ZSBhZGQgYSBuZXcgbG9jYWxpemVkIGFzc2V0IGlkIHRvIHRoZSBhc3NldC5cbiAgICAgKlxuICAgICAqIEBldmVudCBBc3NldCNhZGQ6bG9jYWxpemVkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSAtIFRoZSBsb2NhbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFzc2V0SWQgLSBUaGUgYXNzZXQgaWQgd2UgYWRkZWQuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHdlIHJlbW92ZSBhIGxvY2FsaXplZCBhc3NldCBpZCBmcm9tIHRoZSBhc3NldC5cbiAgICAgKlxuICAgICAqIEBldmVudCBBc3NldCNyZW1vdmU6bG9jYWxpemVkXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSAtIFRoZSBsb2NhbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFzc2V0SWQgLSBUaGUgYXNzZXQgaWQgd2UgcmVtb3ZlZC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBhc3NldCBpZC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgc2V0IGlkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2lkID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGZpbGUgZGV0YWlscyBvciBudWxsIGlmIG5vIGZpbGUuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqL1xuICAgIHNldCBmaWxlKHZhbHVlKSB7XG4gICAgICAgIC8vIGlmIHZhbHVlIGNvbnRhaW5zIHZhcmlhbnRzLCBjaG9vc2UgdGhlIGNvcnJlY3QgdmFyaWFudCBmaXJzdFxuICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUudmFyaWFudHMgJiYgWyd0ZXh0dXJlJywgJ3RleHR1cmVhdGxhcycsICdidW5kbGUnXS5pbmRleE9mKHRoaXMudHlwZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBzZWFyY2ggZm9yIGFjdGl2ZSB2YXJpYW50XG4gICAgICAgICAgICBjb25zdCBhcHAgPSB0aGlzLnJlZ2lzdHJ5Py5fbG9hZGVyPy5fYXBwIHx8IGdldEFwcGxpY2F0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCBkZXZpY2UgPSBhcHA/LmdyYXBoaWNzRGV2aWNlO1xuICAgICAgICAgICAgaWYgKGRldmljZSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBWQVJJQU5UX0RFRkFVTFRfUFJJT1JJVFkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWFudCA9IFZBUklBTlRfREVGQVVMVF9QUklPUklUWVtpXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGRldmljZSBzdXBwb3J0cyB0aGUgdmFyaWFudFxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUudmFyaWFudHNbdmFyaWFudF0gJiYgZGV2aWNlW1ZBUklBTlRfU1VQUE9SVFt2YXJpYW50XV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudmFyaWFudHNbdmFyaWFudF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB2YXJpYW50IGRvZXMgbm90IGV4aXN0IGJ1dCB0aGUgYXNzZXQgaXMgaW4gYSBidW5kbGVcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHRoZSBidW5kbGUgY29udGFpbiBhc3NldHMgd2l0aCB0aGlzIHZhcmlhbnQgdGhlbiByZXR1cm4gdGhlIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgLy8gZmlsZSBmb3IgdGhlIGFzc2V0XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcHAuZW5hYmxlQnVuZGxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVuZGxlcyA9IGFwcC5idW5kbGVzLmxpc3RCdW5kbGVzRm9yQXNzZXQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVuZGxlcyAmJiBidW5kbGVzLmZpbmQoKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYj8uZmlsZT8udmFyaWFudHNbdmFyaWFudF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb2xkRmlsZSA9IHRoaXMuX2ZpbGU7XG4gICAgICAgIGNvbnN0IG5ld0ZpbGUgPSB2YWx1ZSA/IG5ldyBBc3NldEZpbGUodmFsdWUudXJsLCB2YWx1ZS5maWxlbmFtZSwgdmFsdWUuaGFzaCwgdmFsdWUuc2l6ZSwgdmFsdWUub3B0LCB2YWx1ZS5jb250ZW50cykgOiBudWxsO1xuXG4gICAgICAgIGlmICghIW5ld0ZpbGUgIT09ICEhb2xkRmlsZSB8fCAobmV3RmlsZSAmJiAhbmV3RmlsZS5lcXVhbHMob2xkRmlsZSkpKSB7XG4gICAgICAgICAgICB0aGlzLl9maWxlID0gbmV3RmlsZTtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnY2hhbmdlJywgdGhpcywgJ2ZpbGUnLCBuZXdGaWxlLCBvbGRGaWxlKTtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgZmlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3B0aW9uYWwgSlNPTiBkYXRhIHRoYXQgY29udGFpbnMgZWl0aGVyIHRoZSBjb21wbGV0ZSByZXNvdXJjZSBkYXRhLiAoZS5nLiBpbiB0aGUgY2FzZSBvZiBhXG4gICAgICogbWF0ZXJpYWwpIG9yIGFkZGl0aW9uYWwgZGF0YSAoZS5nLiBpbiB0aGUgY2FzZSBvZiBhIG1vZGVsIGl0IGNvbnRhaW5zIG1hcHBpbmdzIGZyb20gbWVzaCB0b1xuICAgICAqIG1hdGVyaWFsKS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICovXG4gICAgc2V0IGRhdGEodmFsdWUpIHtcbiAgICAgICAgLy8gZmlyZSBjaGFuZ2UgZXZlbnQgd2hlbiBkYXRhIGNoYW5nZXNcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgYXNzZXQgbWlnaHQgbmVlZCByZWxvYWRpbmcgaWYgdGhhdCBoYXBwZW5zXG4gICAgICAgIGNvbnN0IG9sZCA9IHRoaXMuX2RhdGE7XG4gICAgICAgIHRoaXMuX2RhdGEgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBvbGQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnY2hhbmdlJywgdGhpcywgJ2RhdGEnLCB2YWx1ZSwgb2xkKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMubG9hZGVkKVxuICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0cnkuX2xvYWRlci5wYXRjaCh0aGlzLCB0aGlzLnJlZ2lzdHJ5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgcmVzb3VyY2Ugd2hlbiB0aGUgYXNzZXQgaXMgbG9hZGVkLiBlLmcuIGEge0BsaW5rIFRleHR1cmV9IG9yIGEge0BsaW5rIE1vZGVsfS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICovXG4gICAgc2V0IHJlc291cmNlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IF9vbGQgPSB0aGlzLl9yZXNvdXJjZXNbMF07XG4gICAgICAgIHRoaXMuX3Jlc291cmNlc1swXSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmZpcmUoJ2NoYW5nZScsIHRoaXMsICdyZXNvdXJjZScsIHZhbHVlLCBfb2xkKTtcbiAgICB9XG5cbiAgICBnZXQgcmVzb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZXNbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIHJlc291cmNlcyBvZiB0aGUgYXNzZXQgd2hlbiBpdCdzIGxvYWRlZC4gQW4gYXNzZXQgY2FuIGhvbGQgbW9yZSBydW50aW1lXG4gICAgICogcmVzb3VyY2VzIHRoYW4gb25lIGUuZy4gY3ViZW1hcHMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0W119XG4gICAgICovXG4gICAgc2V0IHJlc291cmNlcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBfb2xkID0gdGhpcy5fcmVzb3VyY2VzO1xuICAgICAgICB0aGlzLl9yZXNvdXJjZXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5maXJlKCdjaGFuZ2UnLCB0aGlzLCAncmVzb3VyY2VzJywgdmFsdWUsIF9vbGQpO1xuICAgIH1cblxuICAgIGdldCByZXNvdXJjZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSB0aGUgYXNzZXQgd2lsbCBiZSBsb2FkZWQgZHVyaW5nIHRoZSBwcmVsb2FkIHBoYXNlIG9mIGFwcGxpY2F0aW9uIHNldCB1cC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHNldCBwcmVsb2FkKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gISF2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX3ByZWxvYWQgPT09IHZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuX3ByZWxvYWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX3ByZWxvYWQgJiYgIXRoaXMubG9hZGVkICYmICF0aGlzLmxvYWRpbmcgJiYgdGhpcy5yZWdpc3RyeSlcbiAgICAgICAgICAgIHRoaXMucmVnaXN0cnkubG9hZCh0aGlzKTtcbiAgICB9XG5cbiAgICBnZXQgcHJlbG9hZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByZWxvYWQ7XG4gICAgfVxuXG4gICAgc2V0IGxvYWRGYWNlcyh2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9ICEhdmFsdWU7XG4gICAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eSgnX2xvYWRGYWNlcycpIHx8IHZhbHVlICE9PSB0aGlzLl9sb2FkRmFjZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRGYWNlcyA9IHZhbHVlO1xuXG4gICAgICAgICAgICAvLyB0aGUgbG9hZEZhY2VzIHByb3BlcnR5IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBhc3NldCBkYXRhIGJsb2NrXG4gICAgICAgICAgICAvLyBiZWNhdXNlIGNoYW5naW5nIHRoZSBmbGFnIHNob3VsZCByZXN1bHQgaW4gYXNzZXQgcGF0Y2ggYmVpbmcgaW52b2tlZC5cbiAgICAgICAgICAgIC8vIGhlcmUgd2UgbXVzdCBpbnZva2UgaXQgbWFudWFsbHkgaW5zdGVhZC5cbiAgICAgICAgICAgIGlmICh0aGlzLmxvYWRlZClcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdHJ5Ll9sb2FkZXIucGF0Y2godGhpcywgdGhpcy5yZWdpc3RyeSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgbG9hZEZhY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZEZhY2VzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgVVJMIHJlcXVpcmVkIHRvIGZldGNoIHRoZSBmaWxlIGZvciB0aGlzIGFzc2V0LlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBUaGUgVVJMLiBSZXR1cm5zIG51bGwgaWYgdGhlIGFzc2V0IGhhcyBubyBhc3NvY2lhdGVkIGZpbGUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgYXNzZXRzID0gYXBwLmFzc2V0cy5maW5kKFwiTXkgSW1hZ2VcIiwgXCJ0ZXh0dXJlXCIpO1xuICAgICAqIHZhciBpbWcgPSBcIiZsdDtpbWcgc3JjPSdcIiArIGFzc2V0c1swXS5nZXRGaWxlVXJsKCkgKyBcIicmZ3Q7XCI7XG4gICAgICovXG4gICAgZ2V0RmlsZVVybCgpIHtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZmlsZTtcblxuICAgICAgICBpZiAoIWZpbGUgfHwgIWZpbGUudXJsKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgbGV0IHVybCA9IGZpbGUudXJsO1xuXG4gICAgICAgIGlmICh0aGlzLnJlZ2lzdHJ5ICYmIHRoaXMucmVnaXN0cnkucHJlZml4ICYmICFBQlNPTFVURV9VUkwudGVzdCh1cmwpKVxuICAgICAgICAgICAgdXJsID0gdGhpcy5yZWdpc3RyeS5wcmVmaXggKyB1cmw7XG5cbiAgICAgICAgLy8gYWRkIGZpbGUgaGFzaCB0byBhdm9pZCBoYXJkLWNhY2hpbmcgcHJvYmxlbXNcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ3NjcmlwdCcgJiYgZmlsZS5oYXNoKSB7XG4gICAgICAgICAgICBjb25zdCBzZXBhcmF0b3IgPSB1cmwuaW5kZXhPZignPycpICE9PSAtMSA/ICcmJyA6ICc/JztcbiAgICAgICAgICAgIHVybCArPSBzZXBhcmF0b3IgKyAndD0nICsgZmlsZS5oYXNoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3QgYW4gYXNzZXQgVVJMIGZyb20gdGhpcyBhc3NldCdzIGxvY2F0aW9uIGFuZCBhIHJlbGF0aXZlIHBhdGguIElmIHRoZSByZWxhdGl2ZVBhdGhcbiAgICAgKiBpcyBhIGJsb2Igb3IgQmFzZTY0IFVSSSwgdGhlbiByZXR1cm4gdGhhdCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlUGF0aCAtIFRoZSByZWxhdGl2ZSBwYXRoIHRvIGJlIGNvbmNhdGVuYXRlZCB0byB0aGlzIGFzc2V0J3MgYmFzZSB1cmwuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmVzdWx0aW5nIFVSTCBvZiB0aGUgYXNzZXQuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGdldEFic29sdXRlVXJsKHJlbGF0aXZlUGF0aCkge1xuICAgICAgICBpZiAocmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoJ2Jsb2I6JykgfHwgcmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoJ2RhdGE6JykpIHtcbiAgICAgICAgICAgIHJldHVybiByZWxhdGl2ZVBhdGg7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBiYXNlID0gcGF0aC5nZXREaXJlY3RvcnkodGhpcy5maWxlLnVybCk7XG4gICAgICAgIHJldHVybiBwYXRoLmpvaW4oYmFzZSwgcmVsYXRpdmVQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhc3NldCBpZCBvZiB0aGUgYXNzZXQgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgc3BlY2lmaWVkIGxvY2FsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGUgLSBUaGUgZGVzaXJlZCBsb2NhbGUgZS5nLiBBci1BUi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBBbiBhc3NldCBpZCBvciBudWxsIGlmIHRoZXJlIGlzIG5vIGFzc2V0IHNwZWNpZmllZCBmb3IgdGhlIGRlc2lyZWQgbG9jYWxlLlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBnZXRMb2NhbGl6ZWRBc3NldElkKGxvY2FsZSkge1xuICAgICAgICAvLyB0cmllcyB0byBmaW5kIGVpdGhlciB0aGUgZGVzaXJlZCBsb2NhbGUgb3IgYSBmYWxsYmFjayBsb2NhbGVcbiAgICAgICAgbG9jYWxlID0gZmluZEF2YWlsYWJsZUxvY2FsZShsb2NhbGUsIHRoaXMuX2kxOG4pO1xuICAgICAgICByZXR1cm4gdGhpcy5faTE4bltsb2NhbGVdIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHJlcGxhY2VtZW50IGFzc2V0IGlkIGZvciB0aGUgc3BlY2lmaWVkIGxvY2FsZS4gV2hlbiB0aGUgbG9jYWxlIGluXG4gICAgICoge0BsaW5rIEFwcGxpY2F0aW9uI2kxOG59IGNoYW5nZXMgdGhlbiByZWZlcmVuY2VzIHRvIHRoaXMgYXNzZXQgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZVxuICAgICAqIHNwZWNpZmllZCBhc3NldCBpZC4gKEN1cnJlbnRseSBvbmx5IHN1cHBvcnRlZCBieSB0aGUge0BsaW5rIEVsZW1lbnRDb21wb25lbnR9KS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGUgLSBUaGUgbG9jYWxlIGUuZy4gQXItQVIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFzc2V0SWQgLSBUaGUgYXNzZXQgaWQuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGFkZExvY2FsaXplZEFzc2V0SWQobG9jYWxlLCBhc3NldElkKSB7XG4gICAgICAgIHRoaXMuX2kxOG5bbG9jYWxlXSA9IGFzc2V0SWQ7XG4gICAgICAgIHRoaXMuZmlyZSgnYWRkOmxvY2FsaXplZCcsIGxvY2FsZSwgYXNzZXRJZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGxvY2FsaXplZCBhc3NldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbGUgLSBUaGUgbG9jYWxlIGUuZy4gQXItQVIuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHJlbW92ZUxvY2FsaXplZEFzc2V0SWQobG9jYWxlKSB7XG4gICAgICAgIGNvbnN0IGFzc2V0SWQgPSB0aGlzLl9pMThuW2xvY2FsZV07XG4gICAgICAgIGlmIChhc3NldElkKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faTE4bltsb2NhbGVdO1xuICAgICAgICAgICAgdGhpcy5maXJlKCdyZW1vdmU6bG9jYWxpemVkJywgbG9jYWxlLCBhc3NldElkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRha2UgYSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYXMgc29vbiBhcyB0aGUgYXNzZXQgaXMgbG9hZGVkLiBJZiB0aGUgYXNzZXQgaXMgYWxyZWFkeVxuICAgICAqIGxvYWRlZCB0aGUgY2FsbGJhY2sgaXMgY2FsbGVkIHN0cmFpZ2h0IGF3YXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Fzc2V0UmVhZHlDYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgZnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIGFzc2V0IGlzIHJlYWR5LiBQYXNzZWRcbiAgICAgKiB0aGUgKGFzc2V0KSBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtzY29wZV0gLSBTY29wZSBvYmplY3QgdG8gdXNlIHdoZW4gY2FsbGluZyB0aGUgY2FsbGJhY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgYXNzZXQgPSBhcHAuYXNzZXRzLmZpbmQoXCJNeSBBc3NldFwiKTtcbiAgICAgKiBhc3NldC5yZWFkeShmdW5jdGlvbiAoYXNzZXQpIHtcbiAgICAgKiAgIC8vIGFzc2V0IGxvYWRlZFxuICAgICAqIH0pO1xuICAgICAqIGFwcC5hc3NldHMubG9hZChhc3NldCk7XG4gICAgICovXG4gICAgcmVhZHkoY2FsbGJhY2ssIHNjb3BlKSB7XG4gICAgICAgIHNjb3BlID0gc2NvcGUgfHwgdGhpcztcblxuICAgICAgICBpZiAodGhpcy5sb2FkZWQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoc2NvcGUsIHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vbmNlKCdsb2FkJywgZnVuY3Rpb24gKGFzc2V0KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChzY29wZSwgYXNzZXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWxvYWQoKSB7XG4gICAgICAgIC8vIG5vIG5lZWQgdG8gYmUgcmVsb2FkZWRcbiAgICAgICAgaWYgKHRoaXMubG9hZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RyeS5sb2FkKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhlIGFzc29jaWF0ZWQgcmVzb3VyY2UgYW5kIG1hcmtzIGFzc2V0IGFzIHVubG9hZGVkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgYXNzZXQgPSBhcHAuYXNzZXRzLmZpbmQoXCJNeSBBc3NldFwiKTtcbiAgICAgKiBhc3NldC51bmxvYWQoKTtcbiAgICAgKiAvLyBhc3NldC5yZXNvdXJjZSBpcyBudWxsXG4gICAgICovXG4gICAgdW5sb2FkKCkge1xuICAgICAgICBpZiAoIXRoaXMubG9hZGVkICYmIHRoaXMuX3Jlc291cmNlcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdGhpcy5maXJlKCd1bmxvYWQnLCB0aGlzKTtcbiAgICAgICAgdGhpcy5yZWdpc3RyeS5maXJlKCd1bmxvYWQ6JyArIHRoaXMuaWQsIHRoaXMpO1xuXG4gICAgICAgIGNvbnN0IG9sZCA9IHRoaXMuX3Jlc291cmNlcztcblxuICAgICAgICAvLyBjbGVhciByZXNvdXJjZXMgb24gdGhlIGFzc2V0XG4gICAgICAgIHRoaXMucmVzb3VyY2VzID0gW107XG4gICAgICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG5cbiAgICAgICAgLy8gcmVtb3ZlIHJlc291cmNlIGZyb20gbG9hZGVyIGNhY2hlXG4gICAgICAgIGlmICh0aGlzLmZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0cnkuX2xvYWRlci5jbGVhckNhY2hlKHRoaXMuZ2V0RmlsZVVybCgpLCB0aGlzLnR5cGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSByZXNvdXJjZXNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvbGQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc291cmNlID0gb2xkW2ldO1xuICAgICAgICAgICAgaWYgKHJlc291cmNlICYmIHJlc291cmNlLmRlc3Ryb3kpIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gcmVzb2x2ZSBhc3NldCBmaWxlIGRhdGEgYW5kIHJldHVybiB0aGUgY29udGVudHMgYXMgYW4gQXJyYXlCdWZmZXIuIElmIHRoZVxuICAgICAqIGFzc2V0IGZpbGUgY29udGVudHMgYXJlIHByZXNlbnQsIHRoYXQgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSB0aGUgZmlsZSBkYXRhIGlzIGJlIGRvd25sb2FkZWRcbiAgICAgKiB2aWEgaHR0cC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2FkVXJsIC0gVGhlIFVSTCBhcyBwYXNzZWQgaW50byB0aGUgaGFuZGxlclxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuLi9oYW5kbGVycy9sb2FkZXIuanMnKS5SZXNvdXJjZUxvYWRlckNhbGxiYWNrfSBjYWxsYmFjayAtIFRoZSBjYWxsYmFja1xuICAgICAqIGZ1bmN0aW9uIHRvIHJlY2VpdmUgcmVzdWx0cy5cbiAgICAgKiBAcGFyYW0ge0Fzc2V0fSBbYXNzZXRdIC0gVGhlIGFzc2V0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heFJldHJpZXMgLSBOdW1iZXIgb2YgcmV0cmllcyBpZiBodHRwIGRvd25sb2FkIGlzIHJlcXVpcmVkXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHN0YXRpYyBmZXRjaEFycmF5QnVmZmVyKGxvYWRVcmwsIGNhbGxiYWNrLCBhc3NldCwgbWF4UmV0cmllcyA9IDApIHtcbiAgICAgICAgaWYgKGFzc2V0Py5maWxlPy5jb250ZW50cykge1xuICAgICAgICAgICAgLy8gYXNzZXQgZmlsZSBjb250ZW50cyB3ZXJlIHByb3ZpZGVkXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBhc3NldC5maWxlLmNvbnRlbnRzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYXNzZXQgY29udGVudHMgbXVzdCBiZSBkb3dubG9hZGVkXG4gICAgICAgICAgICBodHRwLmdldChsb2FkVXJsLCB7XG4gICAgICAgICAgICAgICAgY2FjaGU6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInLFxuICAgICAgICAgICAgICAgIHJldHJ5OiBtYXhSZXRyaWVzID4gMCxcbiAgICAgICAgICAgICAgICBtYXhSZXRyaWVzOiBtYXhSZXRyaWVzXG4gICAgICAgICAgICB9LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IEFzc2V0IH07XG4iXSwibmFtZXMiOlsiYXNzZXRJZENvdW50ZXIiLCJWQVJJQU5UX1NVUFBPUlQiLCJwdnIiLCJkeHQiLCJldGMyIiwiZXRjMSIsImJhc2lzIiwiVkFSSUFOVF9ERUZBVUxUX1BSSU9SSVRZIiwiQXNzZXQiLCJFdmVudEhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0eXBlIiwiZmlsZSIsImRhdGEiLCJvcHRpb25zIiwiX2lkIiwidGFncyIsIlRhZ3MiLCJfcHJlbG9hZCIsIl9maWxlIiwiX2RhdGEiLCJfcmVzb3VyY2VzIiwiX2kxOG4iLCJsb2FkZWQiLCJsb2FkaW5nIiwicmVnaXN0cnkiLCJpZCIsInZhbHVlIiwidmFyaWFudHMiLCJpbmRleE9mIiwiYXBwIiwiX2xvYWRlciIsIl9hcHAiLCJnZXRBcHBsaWNhdGlvbiIsImRldmljZSIsImdyYXBoaWNzRGV2aWNlIiwiaSIsImxlbiIsImxlbmd0aCIsInZhcmlhbnQiLCJlbmFibGVCdW5kbGVzIiwiYnVuZGxlcyIsImxpc3RCdW5kbGVzRm9yQXNzZXQiLCJmaW5kIiwiYiIsIm9sZEZpbGUiLCJuZXdGaWxlIiwiQXNzZXRGaWxlIiwidXJsIiwiZmlsZW5hbWUiLCJoYXNoIiwic2l6ZSIsIm9wdCIsImNvbnRlbnRzIiwiZXF1YWxzIiwiZmlyZSIsInJlbG9hZCIsIm9sZCIsInBhdGNoIiwicmVzb3VyY2UiLCJfb2xkIiwicmVzb3VyY2VzIiwicHJlbG9hZCIsImxvYWQiLCJsb2FkRmFjZXMiLCJoYXNPd25Qcm9wZXJ0eSIsIl9sb2FkRmFjZXMiLCJnZXRGaWxlVXJsIiwicHJlZml4IiwiQUJTT0xVVEVfVVJMIiwidGVzdCIsInNlcGFyYXRvciIsImdldEFic29sdXRlVXJsIiwicmVsYXRpdmVQYXRoIiwic3RhcnRzV2l0aCIsImJhc2UiLCJwYXRoIiwiZ2V0RGlyZWN0b3J5Iiwiam9pbiIsImdldExvY2FsaXplZEFzc2V0SWQiLCJsb2NhbGUiLCJmaW5kQXZhaWxhYmxlTG9jYWxlIiwiYWRkTG9jYWxpemVkQXNzZXRJZCIsImFzc2V0SWQiLCJyZW1vdmVMb2NhbGl6ZWRBc3NldElkIiwicmVhZHkiLCJjYWxsYmFjayIsInNjb3BlIiwiY2FsbCIsIm9uY2UiLCJhc3NldCIsInVubG9hZCIsImNsZWFyQ2FjaGUiLCJkZXN0cm95IiwiZmV0Y2hBcnJheUJ1ZmZlciIsImxvYWRVcmwiLCJtYXhSZXRyaWVzIiwic2V0VGltZW91dCIsImh0dHAiLCJnZXQiLCJjYWNoZSIsInJlc3BvbnNlVHlwZSIsInJldHJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQWFBLElBQUlBLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUV2QixNQUFNQyxlQUFlLEdBQUc7QUFDcEJDLEVBQUFBLEdBQUcsRUFBRSwyQkFBMkI7QUFDaENDLEVBQUFBLEdBQUcsRUFBRSwwQkFBMEI7QUFDL0JDLEVBQUFBLElBQUksRUFBRSx5QkFBeUI7QUFDL0JDLEVBQUFBLElBQUksRUFBRSwwQkFBMEI7QUFDaENDLEVBQUFBLEtBQUssRUFBRSxRQUFBO0FBQ1gsQ0FBQyxDQUFBOztBQUVELE1BQU1DLHdCQUF3QixHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFBOztBQXlCeEUsTUFBTUMsS0FBSyxTQUFTQyxZQUFZLENBQUM7RUFtQzdCQyxXQUFXLENBQUNDLElBQUksRUFBRUMs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
