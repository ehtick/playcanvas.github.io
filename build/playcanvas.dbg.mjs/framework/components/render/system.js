/**
 * @license
 * PlayCanvas Engine v1.59.0-preview revision 797466563 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Vec3 } from '../../../core/math/vec3.js';
import { BoundingBox } from '../../../core/shape/bounding-box.js';
import { getDefaultMaterial } from '../../../scene/materials/default-material.js';
import { Component } from '../component.js';
import { ComponentSystem } from '../system.js';
import { RenderComponent } from './component.js';
import { RenderComponentData } from './data.js';

const _schema = [{
  name: 'rootBone',
  type: 'entity'
}, 'enabled'];

const _properties = ['material', 'meshInstances', 'asset', 'materialAssets', 'castShadows', 'receiveShadows', 'castShadowsLightmap', 'lightmapped', 'lightmapSizeMultiplier', 'renderStyle', 'type', 'layers', 'isStatic', 'batchGroupId'];

class RenderComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'render';
    this.ComponentType = RenderComponent;
    this.DataType = RenderComponentData;
    this.schema = _schema;
    this.defaultMaterial = getDefaultMaterial(app.graphicsDevice);
    this.on('beforeremove', this.onRemove, this);
  }
  initializeComponentData(component, _data, properties) {
    if (_data.batchGroupId === null || _data.batchGroupId === undefined) {
      _data.batchGroupId = -1;
    }

    if (_data.layers && _data.layers.length) {
      _data.layers = _data.layers.slice(0);
    }
    for (let i = 0; i < _properties.length; i++) {
      if (_data.hasOwnProperty(_properties[i])) {
        component[_properties[i]] = _data[_properties[i]];
      }
    }
    if (_data.aabbCenter && _data.aabbHalfExtents) {
      component.customAabb = new BoundingBox(new Vec3(_data.aabbCenter), new Vec3(_data.aabbHalfExtents));
    }
    super.initializeComponentData(component, _data, _schema);
  }
  cloneComponent(entity, clone) {
    const data = {};
    for (let i = 0; i < _properties.length; i++) {
      data[_properties[i]] = entity.render[_properties[i]];
    }
    data.enabled = entity.render.enabled;

    delete data.meshInstances;

    const component = this.addComponent(clone, data);

    const srcMeshInstances = entity.render.meshInstances;
    const meshes = srcMeshInstances.map(mi => mi.mesh);
    component._onSetMeshes(meshes);

    for (let m = 0; m < srcMeshInstances.length; m++) {
      component.meshInstances[m].material = srcMeshInstances[m].material;
    }
    if (entity.render.customAabb) {
      component.customAabb = entity.render.customAabb.clone();
    }
    return component;
  }
  onRemove(entity, component) {
    component.onRemove();
  }
}
Component._buildAccessors(RenderComponent.prototype, _schema);

export { RenderComponentSystem };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvcmVuZGVyL3N5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9tYXRoL3ZlYzMuanMnO1xuXG5pbXBvcnQgeyBCb3VuZGluZ0JveCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvc2hhcGUvYm91bmRpbmctYm94LmpzJztcblxuaW1wb3J0IHsgZ2V0RGVmYXVsdE1hdGVyaWFsIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmUvbWF0ZXJpYWxzL2RlZmF1bHQtbWF0ZXJpYWwuanMnO1xuXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQuanMnO1xuaW1wb3J0IHsgQ29tcG9uZW50U3lzdGVtIH0gZnJvbSAnLi4vc3lzdGVtLmpzJztcblxuaW1wb3J0IHsgUmVuZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQuanMnO1xuaW1wb3J0IHsgUmVuZGVyQ29tcG9uZW50RGF0YSB9IGZyb20gJy4vZGF0YS5qcyc7XG5cbmNvbnN0IF9zY2hlbWEgPSBbXG4gICAgeyBuYW1lOiAncm9vdEJvbmUnLCB0eXBlOiAnZW50aXR5JyB9LFxuICAgICdlbmFibGVkJ1xuXTtcblxuLy8gb3JkZXIgbWF0dGVycyBoZXJlXG5jb25zdCBfcHJvcGVydGllcyA9IFtcbiAgICAnbWF0ZXJpYWwnLFxuICAgICdtZXNoSW5zdGFuY2VzJyxcbiAgICAnYXNzZXQnLFxuICAgICdtYXRlcmlhbEFzc2V0cycsXG4gICAgJ2Nhc3RTaGFkb3dzJyxcbiAgICAncmVjZWl2ZVNoYWRvd3MnLFxuICAgICdjYXN0U2hhZG93c0xpZ2h0bWFwJyxcbiAgICAnbGlnaHRtYXBwZWQnLFxuICAgICdsaWdodG1hcFNpemVNdWx0aXBsaWVyJyxcbiAgICAncmVuZGVyU3R5bGUnLFxuICAgICd0eXBlJyxcbiAgICAnbGF5ZXJzJyxcbiAgICAnaXNTdGF0aWMnLFxuICAgICdiYXRjaEdyb3VwSWQnXG5dO1xuXG4vKipcbiAqIEFsbG93cyBhbiBFbnRpdHkgdG8gcmVuZGVyIGEgbWVzaCBvciBhIHByaW1pdGl2ZSBzaGFwZSBsaWtlIGEgYm94LCBjYXBzdWxlLCBzcGhlcmUsIGN5bGluZGVyLFxuICogY29uZSBldGMuXG4gKlxuICogQGF1Z21lbnRzIENvbXBvbmVudFN5c3RlbVxuICovXG5jbGFzcyBSZW5kZXJDb21wb25lbnRTeXN0ZW0gZXh0ZW5kcyBDb21wb25lbnRTeXN0ZW0ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBSZW5kZXJDb21wb25lbnRTeXN0ZW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vYXBwLWJhc2UuanMnKS5BcHBCYXNlfSBhcHAgLSBUaGUgQXBwbGljYXRpb24uXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuXG4gICAgICAgIHRoaXMuaWQgPSAncmVuZGVyJztcblxuICAgICAgICB0aGlzLkNvbXBvbmVudFR5cGUgPSBSZW5kZXJDb21wb25lbnQ7XG4gICAgICAgIHRoaXMuRGF0YVR5cGUgPSBSZW5kZXJDb21wb25lbnREYXRhO1xuXG4gICAgICAgIHRoaXMuc2NoZW1hID0gX3NjaGVtYTtcbiAgICAgICAgdGhpcy5kZWZhdWx0TWF0ZXJpYWwgPSBnZXREZWZhdWx0TWF0ZXJpYWwoYXBwLmdyYXBoaWNzRGV2aWNlKTtcblxuICAgICAgICB0aGlzLm9uKCdiZWZvcmVyZW1vdmUnLCB0aGlzLm9uUmVtb3ZlLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplQ29tcG9uZW50RGF0YShjb21wb25lbnQsIF9kYXRhLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmIChfZGF0YS5iYXRjaEdyb3VwSWQgPT09IG51bGwgfHwgX2RhdGEuYmF0Y2hHcm91cElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF9kYXRhLmJhdGNoR3JvdXBJZCA9IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZHVwbGljYXRlIGxheWVyIGxpc3RcbiAgICAgICAgaWYgKF9kYXRhLmxheWVycyAmJiBfZGF0YS5sYXllcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBfZGF0YS5sYXllcnMgPSBfZGF0YS5sYXllcnMuc2xpY2UoMCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IF9wcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoX2RhdGEuaGFzT3duUHJvcGVydHkoX3Byb3BlcnRpZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50W19wcm9wZXJ0aWVzW2ldXSA9IF9kYXRhW19wcm9wZXJ0aWVzW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfZGF0YS5hYWJiQ2VudGVyICYmIF9kYXRhLmFhYmJIYWxmRXh0ZW50cykge1xuICAgICAgICAgICAgY29tcG9uZW50LmN1c3RvbUFhYmIgPSBuZXcgQm91bmRpbmdCb3gobmV3IFZlYzMoX2RhdGEuYWFiYkNlbnRlciksIG5ldyBWZWMzKF9kYXRhLmFhYmJIYWxmRXh0ZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEoY29tcG9uZW50LCBfZGF0YSwgX3NjaGVtYSk7XG4gICAgfVxuXG4gICAgY2xvbmVDb21wb25lbnQoZW50aXR5LCBjbG9uZSkge1xuXG4gICAgICAgIC8vIGNvcHkgcHJvcGVydGllc1xuICAgICAgICBjb25zdCBkYXRhID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX3Byb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRhdGFbX3Byb3BlcnRpZXNbaV1dID0gZW50aXR5LnJlbmRlcltfcHJvcGVydGllc1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5lbmFibGVkID0gZW50aXR5LnJlbmRlci5lbmFibGVkO1xuXG4gICAgICAgIC8vIG1lc2ggaW5zdGFuY2VzIGNhbm5vdCBiZSB1c2VkIHRoaXMgd2F5LCByZW1vdmUgdGhlbSBhbmQgbWFudWFsbHkgY2xvbmUgdGhlbSBsYXRlclxuICAgICAgICBkZWxldGUgZGF0YS5tZXNoSW5zdGFuY2VzO1xuXG4gICAgICAgIC8vIGNsb25lIGNvbXBvbmVudFxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmFkZENvbXBvbmVudChjbG9uZSwgZGF0YSk7XG5cbiAgICAgICAgLy8gY2xvbmUgbWVzaCBpbnN0YW5jZXNcbiAgICAgICAgY29uc3Qgc3JjTWVzaEluc3RhbmNlcyA9IGVudGl0eS5yZW5kZXIubWVzaEluc3RhbmNlcztcbiAgICAgICAgY29uc3QgbWVzaGVzID0gc3JjTWVzaEluc3RhbmNlcy5tYXAobWkgPT4gbWkubWVzaCk7XG4gICAgICAgIGNvbXBvbmVudC5fb25TZXRNZXNoZXMobWVzaGVzKTtcblxuICAgICAgICAvLyBhc3NpZ24gbWF0ZXJpYWxzXG4gICAgICAgIGZvciAobGV0IG0gPSAwOyBtIDwgc3JjTWVzaEluc3RhbmNlcy5sZW5ndGg7IG0rKykge1xuICAgICAgICAgICAgY29tcG9uZW50Lm1lc2hJbnN0YW5jZXNbbV0ubWF0ZXJpYWwgPSBzcmNNZXNoSW5zdGFuY2VzW21dLm1hdGVyaWFsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudGl0eS5yZW5kZXIuY3VzdG9tQWFiYikge1xuICAgICAgICAgICAgY29tcG9uZW50LmN1c3RvbUFhYmIgPSBlbnRpdHkucmVuZGVyLmN1c3RvbUFhYmIuY2xvbmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgfVxuXG4gICAgb25SZW1vdmUoZW50aXR5LCBjb21wb25lbnQpIHtcbiAgICAgICAgY29tcG9uZW50Lm9uUmVtb3ZlKCk7XG4gICAgfVxufVxuXG5Db21wb25lbnQuX2J1aWxkQWNjZXNzb3JzKFJlbmRlckNvbXBvbmVudC5wcm90b3R5cGUsIF9zY2hlbWEpO1xuXG5leHBvcnQgeyBSZW5kZXJDb21wb25lbnRTeXN0ZW0gfTtcbiJdLCJuYW1lcyI6WyJfc2NoZW1hIiwibmFtZSIsInR5cGUiLCJfcHJvcGVydGllcyIsIlJlbmRlckNvbXBvbmVudFN5c3RlbSIsIkNvbXBvbmVudFN5c3RlbSIsImNvbnN0cnVjdG9yIiwiYXBwIiwiaWQiLCJDb21wb25lbnRUeXBlIiwiUmVuZGVyQ29tcG9uZW50IiwiRGF0YVR5cGUiLCJSZW5kZXJDb21wb25lbnREYXRhIiwic2NoZW1hIiwiZGVmYXVsdE1hdGVyaWFsIiwiZ2V0RGVmYXVsdE1hdGVyaWFsIiwiZ3JhcGhpY3NEZXZpY2UiLCJvbiIsIm9uUmVtb3ZlIiwiaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEiLCJjb21wb25lbnQiLCJfZGF0YSIsInByb3BlcnRpZXMiLCJiYXRjaEdyb3VwSWQiLCJ1bmRlZmluZWQiLCJsYXllcnMiLCJsZW5ndGgiLCJzbGljZSIsImkiLCJoYXNPd25Qcm9wZXJ0eSIsImFhYmJDZW50ZXIiLCJhYWJiSGFsZkV4dGVudHMiLCJjdXN0b21BYWJiIiwiQm91bmRpbmdCb3giLCJWZWMzIiwiY2xvbmVDb21wb25lbnQiLCJlbnRpdHkiLCJjbG9uZSIsImRhdGEiLCJyZW5kZXIiLCJlbmFibGVkIiwibWVzaEluc3RhbmNlcyIsImFkZENvbXBvbmVudCIsInNyY01lc2hJbnN0YW5jZXMiLCJtZXNoZXMiLCJtYXAiLCJtaSIsIm1lc2giLCJfb25TZXRNZXNoZXMiLCJtIiwibWF0ZXJpYWwiLCJDb21wb25lbnQiLCJfYnVpbGRBY2Nlc3NvcnMiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFZQSxNQUFNQSxPQUFPLEdBQUcsQ0FDWjtBQUFFQyxFQUFBQSxJQUFJLEVBQUUsVUFBVTtBQUFFQyxFQUFBQSxJQUFJLEVBQUUsUUFBQTtBQUFTLENBQUMsRUFDcEMs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
