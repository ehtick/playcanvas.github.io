/**
 * @license
 * PlayCanvas Engine v1.57.0 revision f1998a31e (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { EventHandler } from '../../core/event-handler.js';

class Component extends EventHandler {
  constructor(system, entity) {
    super();
    this.system = void 0;
    this.entity = void 0;
    this.system = system;
    this.entity = entity;

    if (this.system.schema && !this._accessorsBuilt) {
      this.buildAccessors(this.system.schema);
    }

    this.on('set', function (name, oldValue, newValue) {
      this.fire('set_' + name, name, oldValue, newValue);
    });
    this.on('set_enabled', this.onSetEnabled, this);
  }

  static _buildAccessors(obj, schema) {
    schema.forEach(function (descriptor) {
      const name = typeof descriptor === 'object' ? descriptor.name : descriptor;
      Object.defineProperty(obj, name, {
        get: function () {
          return this.data[name];
        },
        set: function (value) {
          const data = this.data;
          const oldValue = data[name];
          data[name] = value;
          this.fire('set', name, oldValue, value);
        },
        configurable: true
      });
    });
    obj._accessorsBuilt = true;
  }

  buildAccessors(schema) {
    Component._buildAccessors(this, schema);
  }

  onSetEnabled(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.entity.enabled) {
        if (newValue) {
          this.onEnable();
        } else {
          this.onDisable();
        }
      }
    }
  }

  onEnable() {}

  onDisable() {}

  onPostStateChange() {}

  get data() {
    const record = this.system.store[this.entity.getGuid()];
    return record ? record.data : null;
  }

}

export { Component };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvY29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gJy4uLy4uL2NvcmUvZXZlbnQtaGFuZGxlci5qcyc7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3N5c3RlbS5qcycpLkNvbXBvbmVudFN5c3RlbX0gQ29tcG9uZW50U3lzdGVtICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vZW50aXR5LmpzJykuRW50aXR5fSBFbnRpdHkgKi9cblxuLyoqXG4gKiBDb21wb25lbnRzIGFyZSB1c2VkIHRvIGF0dGFjaCBmdW5jdGlvbmFsaXR5IG9uIGEge0BsaW5rIEVudGl0eX0uIENvbXBvbmVudHMgY2FuIHJlY2VpdmUgdXBkYXRlXG4gKiBldmVudHMgZWFjaCBmcmFtZSwgYW5kIGV4cG9zZSBwcm9wZXJ0aWVzIHRvIHRoZSBQbGF5Q2FudmFzIEVkaXRvci5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGVuYWJsZWQgRW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgY29tcG9uZW50LlxuICogQGF1Z21lbnRzIEV2ZW50SGFuZGxlclxuICovXG5jbGFzcyBDb21wb25lbnQgZXh0ZW5kcyBFdmVudEhhbmRsZXIge1xuICAgIC8qKlxuICAgICAqIFRoZSBDb21wb25lbnRTeXN0ZW0gdXNlZCB0byBjcmVhdGUgdGhpcyBDb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Q29tcG9uZW50U3lzdGVtfVxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBzeXN0ZW07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgRW50aXR5IHRoYXQgdGhpcyBDb21wb25lbnQgaXMgYXR0YWNoZWQgdG8uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7RW50aXR5fVxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBlbnRpdHk7XG5cbiAgICAvKipcbiAgICAgKiBCYXNlIGNvbnN0cnVjdG9yIGZvciBhIENvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Q29tcG9uZW50U3lzdGVtfSBzeXN0ZW0gLSBUaGUgQ29tcG9uZW50U3lzdGVtIHVzZWQgdG8gY3JlYXRlIHRoaXMgQ29tcG9uZW50LlxuICAgICAqIEBwYXJhbSB7RW50aXR5fSBlbnRpdHkgLSBUaGUgRW50aXR5IHRoYXQgdGhpcyBDb21wb25lbnQgaXMgYXR0YWNoZWQgdG8uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc3lzdGVtLCBlbnRpdHkpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnN5c3RlbSA9IHN5c3RlbTtcbiAgICAgICAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3lzdGVtLnNjaGVtYSAmJiAhdGhpcy5fYWNjZXNzb3JzQnVpbHQpIHtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRBY2Nlc3NvcnModGhpcy5zeXN0ZW0uc2NoZW1hKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub24oJ3NldCcsIGZ1bmN0aW9uIChuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnc2V0XycgKyBuYW1lLCBuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm9uKCdzZXRfZW5hYmxlZCcsIHRoaXMub25TZXRFbmFibGVkLCB0aGlzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgX2J1aWxkQWNjZXNzb3JzKG9iaiwgc2NoZW1hKSB7XG4gICAgICAgIC8vIENyZWF0ZSBnZXR0ZXIvc2V0dGVyIHBhaXJzIGZvciBlYWNoIHByb3BlcnR5IGRlZmluZWQgaW4gdGhlIHNjaGVtYVxuICAgICAgICBzY2hlbWEuZm9yRWFjaChmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgLy8gSWYgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgaXMgYW4gb2JqZWN0LCBpdCBzaG91bGQgaGF2ZSBhIGBuYW1lYFxuICAgICAgICAgICAgLy8gbWVtYmVyLiBJZiBub3QsIGl0IHNob3VsZCBqdXN0IGJlIHRoZSBwbGFpbiBwcm9wZXJ0eSBuYW1lLlxuICAgICAgICAgICAgY29uc3QgbmFtZSA9ICh0eXBlb2YgZGVzY3JpcHRvciA9PT0gJ29iamVjdCcpID8gZGVzY3JpcHRvci5uYW1lIDogZGVzY3JpcHRvcjtcblxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhW25hbWVdO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBkYXRhW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICBkYXRhW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZSgnc2V0JywgbmFtZSwgb2xkVmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9iai5fYWNjZXNzb3JzQnVpbHQgPSB0cnVlO1xuICAgIH1cblxuICAgIGJ1aWxkQWNjZXNzb3JzKHNjaGVtYSkge1xuICAgICAgICBDb21wb25lbnQuX2J1aWxkQWNjZXNzb3JzKHRoaXMsIHNjaGVtYSk7XG4gICAgfVxuXG4gICAgb25TZXRFbmFibGVkKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbnRpdHkuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRW5hYmxlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkRpc2FibGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkVuYWJsZSgpIHtcbiAgICB9XG5cbiAgICBvbkRpc2FibGUoKSB7XG4gICAgfVxuXG4gICAgb25Qb3N0U3RhdGVDaGFuZ2UoKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWNjZXNzIHRoZSBjb21wb25lbnQgZGF0YSBkaXJlY3RseS4gVXN1YWxseSB5b3Ugc2hvdWxkIGFjY2VzcyB0aGUgZGF0YSBwcm9wZXJ0aWVzIHZpYSB0aGVcbiAgICAgKiBpbmRpdmlkdWFsIHByb3BlcnRpZXMgYXMgbW9kaWZ5aW5nIHRoaXMgZGF0YSBkaXJlY3RseSB3aWxsIG5vdCBmaXJlICdzZXQnIGV2ZW50cy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHsqfVxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgY29uc3QgcmVjb3JkID0gdGhpcy5zeXN0ZW0uc3RvcmVbdGhpcy5lbnRpdHkuZ2V0R3VpZCgpXTtcbiAgICAgICAgcmV0dXJuIHJlY29yZCA/IHJlY29yZC5kYXRhIDogbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IENvbXBvbmVudCB9O1xuIl0sIm5hbWVzIjpbIkNvbXBvbmVudCIsIkV2ZW50SGFuZGxlciIsImNvbnN0cnVjdG9yIiwic3lzdGVtIiwiZW50aXR5Iiwic2NoZW1hIiwiX2FjY2Vzc29yc0J1aWx0IiwiYnVpbGRBY2Nlc3NvcnMiLCJvbiIsIm5hbWUiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiZmlyZSIsIm9uU2V0RW5hYmxlZCIsIl9idWlsZEFjY2Vzc29ycyIsIm9iaiIsImZvckVhY2giLCJkZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJkYXRhIiwic2V0IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJlbmFibGVkIiwib25FbmFibGUiLCJvbkRpc2FibGUiLCJvblBvc3RTdGF0ZUNoYW5nZSIsInJlY29yZCIsInN0b3JlIiwiZ2V0R3VpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBLE1BQU1BLFNBQU4sU0FBd0JDLFlBQXhCLENBQXFDO0FBdUJqQ0MsRUFBQUEsV0FBVyxDQUFDQyxNQUFELEVBQVNDLE1BQVQsRUFBaUI7QUFDeEIsSUFBQSxLQUFBLEVBQUEsQ0FBQTtBQUR3QixJQUFBLElBQUEsQ0FoQjVCRCxNQWdCNEIsR0FBQSxLQUFBLENBQUEsQ0FBQTtBQUFBLElBQUEsSUFBQSxDQVI1QkMsTUFRNEIsR0FBQSxLQUFBLENBQUEsQ0FBQTtJQUd4QixJQUFLRCxDQUFBQSxNQUFMLEdBQWNBLE1BQWQsQ0FBQTtJQUNBLElBQUtDLENBQUFBLE1BQUwsR0FBY0EsTUFBZCxDQUFBOztJQUVBLElBQUksSUFBQSxDQUFLRCxNQUFMLENBQVlFLE1BQVosSUFBc0IsQ0FBQyxJQUFBLENBQUtDLGVBQWhDLEVBQWlEO0FBQzdDLE1BQUEsSUFBQSxDQUFLQyxjQUFMLENBQW9CLElBQUtKLENBQUFBLE1BQUwsQ0FBWUUsTUFBaEMsQ0FBQSxDQUFBO0FBQ0gsS0FBQTs7SUFFRCxJQUFLRyxDQUFBQSxFQUFMLENBQVEsS0FBUixFQUFlLFVBQVVDLElBQVYsRUFBZ0JDLFFBQWhCLEVBQTBCQyxRQUExQixFQUFvQztNQUMvQyxJQUFLQyxDQUFBQSxJQUFMLENBQVUsTUFBU0gsR0FBQUEsSUFBbkIsRUFBeUJBLElBQXpCLEVBQStCQyxRQUEvQixFQUF5Q0MsUUFBekMsQ0FBQSxDQUFBO0tBREosQ0FBQSxDQUFBO0FBSUEsSUFBQSxJQUFBLENBQUtILEVBQUwsQ0FBUSxhQUFSLEVBQXVCLElBQUtLLENBQUFBLFlBQTVCLEVBQTBDLElBQTFDLENBQUEsQ0FBQTtBQUNILEdBQUE7O0FBRXFCLEVBQUEsT0FBZkMsZUFBZSxDQUFDQyxHQUFELEVBQU1WLE1BQU4sRUFBYztBQUVoQ0EsSUFBQUEsTUFBTSxDQUFDVyxPQUFQLENBQWUsVUFBVUMsVUFBVixFQUFzQjtNQUdqQyxNQUFNUixJQUFJLEdBQUksT0FBT1EsVUFBUCxLQUFzQixRQUF2QixHQUFtQ0EsVUFBVSxDQUFDUixJQUE5QyxHQUFxRFEsVUFBbEUsQ0FBQTtBQUVBQyxNQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JKLEdBQXRCLEVBQTJCTixJQUEzQixFQUFpQztBQUM3QlcsUUFBQUEsR0FBRyxFQUFFLFlBQVk7QUFDYixVQUFBLE9BQU8sSUFBS0MsQ0FBQUEsSUFBTCxDQUFVWixJQUFWLENBQVAsQ0FBQTtTQUZ5QjtRQUk3QmEsR0FBRyxFQUFFLFVBQVVDLEtBQVYsRUFBaUI7VUFDbEIsTUFBTUYsSUFBSSxHQUFHLElBQUEsQ0FBS0EsSUFBbEIsQ0FBQTtBQUNBLFVBQUEsTUFBTVgsUUFBUSxHQUFHVyxJQUFJLENBQUNaLElBQUQsQ0FBckIsQ0FBQTtBQUNBWSxVQUFBQSxJQUFJLENBQUNaLElBQUQsQ0FBSixHQUFhYyxLQUFiLENBQUE7VUFDQSxJQUFLWCxDQUFBQSxJQUFMLENBQVUsS0FBVixFQUFpQkgsSUFBakIsRUFBdUJDLFFBQXZCLEVBQWlDYSxLQUFqQyxDQUFBLENBQUE7U0FSeUI7QUFVN0JDLFFBQUFBLFlBQVksRUFBRSxJQUFBO09BVmxCLENBQUEsQ0FBQTtLQUxKLENBQUEsQ0FBQTtJQW1CQVQsR0FBRyxDQUFDVCxlQUFKLEdBQXNCLElBQXRCLENBQUE7QUFDSCxHQUFBOztFQUVEQyxjQUFjLENBQUNGLE1BQUQsRUFBUztBQUNuQkwsSUFBQUEsU0FBUyxDQUFDYyxlQUFWLENBQTBCLElBQTFCLEVBQWdDVCxNQUFoQyxDQUFBLENBQUE7QUFDSCxHQUFBOztBQUVEUSxFQUFBQSxZQUFZLENBQUNKLElBQUQsRUFBT0MsUUFBUCxFQUFpQkMsUUFBakIsRUFBMkI7SUFDbkMsSUFBSUQsUUFBUSxLQUFLQyxRQUFqQixFQUEyQjtBQUN2QixNQUFBLElBQUksSUFBS1AsQ0FBQUEsTUFBTCxDQUFZcUIsT0FBaEIsRUFBeUI7QUFDckIsUUFBQSxJQUFJZCxRQUFKLEVBQWM7QUFDVixVQUFBLElBQUEsQ0FBS2UsUUFBTCxFQUFBLENBQUE7QUFDSCxTQUZELE1BRU87QUFDSCxVQUFBLElBQUEsQ0FBS0MsU0FBTCxFQUFBLENBQUE7QUFDSCxTQUFBO0FBQ0osT0FBQTtBQUNKLEtBQUE7QUFDSixHQUFBOztBQUVERCxFQUFBQSxRQUFRLEdBQUcsRUFDVjs7QUFFREMsRUFBQUEsU0FBUyxHQUFHLEVBQ1g7O0FBRURDLEVBQUFBLGlCQUFpQixHQUFHLEVBQ25COztBQVNPLEVBQUEsSUFBSlAsSUFBSSxHQUFHO0FBQ1AsSUFBQSxNQUFNUSxNQUFNLEdBQUcsSUFBSzFCLENBQUFBLE1BQUwsQ0FBWTJCLEtBQVosQ0FBa0IsSUFBQSxDQUFLMUIsTUFBTCxDQUFZMkIsT0FBWixFQUFsQixDQUFmLENBQUE7QUFDQSxJQUFBLE9BQU9GLE1BQU0sR0FBR0EsTUFBTSxDQUFDUixJQUFWLEdBQWlCLElBQTlCLENBQUE7QUFDSCxHQUFBOztBQW5HZ0M7Ozs7In0=
