/**
 * @license
 * PlayCanvas Engine v1.63.0-dev revision 9f3635a4e (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { Vec3 } from '../../../core/math/vec3.js';
import { Component } from '../component.js';
import { ComponentSystem } from '../system.js';
import { ZoneComponent } from './component.js';
import { ZoneComponentData } from './data.js';

const _schema = ['enabled'];

/**
 * Creates and manages {@link ZoneComponent} instances.
 *
 * @augments ComponentSystem
 * @ignore
 */
class ZoneComponentSystem extends ComponentSystem {
  /**
   * Create a new ZoneComponentSystem.
   *
   * @param {import('../../app-base.js').AppBase} app - The application.
   * @hideconstructor
   */
  constructor(app) {
    super(app);
    this.id = 'zone';
    this.ComponentType = ZoneComponent;
    this.DataType = ZoneComponentData;
    this.schema = _schema;
    this.on('beforeremove', this._onBeforeRemove, this);
  }
  initializeComponentData(component, data, properties) {
    component.enabled = data.hasOwnProperty('enabled') ? !!data.enabled : true;
    if (data.size) {
      if (data.size instanceof Vec3) {
        component.size.copy(data.size);
      } else if (data.size instanceof Array && data.size.length >= 3) {
        component.size.set(data.size[0], data.size[1], data.size[2]);
      }
    }
  }
  cloneComponent(entity, clone) {
    const data = {
      size: entity.zone.size
    };
    return this.addComponent(clone, data);
  }
  _onBeforeRemove(entity, component) {
    component._onBeforeRemove();
  }
}
Component._buildAccessors(ZoneComponent.prototype, _schema);

export { ZoneComponentSystem };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvem9uZS9zeXN0ZW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uLy4uLy4uL2NvcmUvbWF0aC92ZWMzLmpzJztcblxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50LmpzJztcbmltcG9ydCB7IENvbXBvbmVudFN5c3RlbSB9IGZyb20gJy4uL3N5c3RlbS5qcyc7XG5cbmltcG9ydCB7IFpvbmVDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgeyBab25lQ29tcG9uZW50RGF0YSB9IGZyb20gJy4vZGF0YS5qcyc7XG5cbmNvbnN0IF9zY2hlbWEgPSBbJ2VuYWJsZWQnXTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuZCBtYW5hZ2VzIHtAbGluayBab25lQ29tcG9uZW50fSBpbnN0YW5jZXMuXG4gKlxuICogQGF1Z21lbnRzIENvbXBvbmVudFN5c3RlbVxuICogQGlnbm9yZVxuICovXG5jbGFzcyBab25lQ29tcG9uZW50U3lzdGVtIGV4dGVuZHMgQ29tcG9uZW50U3lzdGVtIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgWm9uZUNvbXBvbmVudFN5c3RlbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuLi8uLi9hcHAtYmFzZS5qcycpLkFwcEJhc2V9IGFwcCAtIFRoZSBhcHBsaWNhdGlvbi5cbiAgICAgKiBAaGlkZWNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXBwKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG5cbiAgICAgICAgdGhpcy5pZCA9ICd6b25lJztcblxuICAgICAgICB0aGlzLkNvbXBvbmVudFR5cGUgPSBab25lQ29tcG9uZW50O1xuICAgICAgICB0aGlzLkRhdGFUeXBlID0gWm9uZUNvbXBvbmVudERhdGE7XG5cbiAgICAgICAgdGhpcy5zY2hlbWEgPSBfc2NoZW1hO1xuXG4gICAgICAgIHRoaXMub24oJ2JlZm9yZXJlbW92ZScsIHRoaXMuX29uQmVmb3JlUmVtb3ZlLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplQ29tcG9uZW50RGF0YShjb21wb25lbnQsIGRhdGEsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgY29tcG9uZW50LmVuYWJsZWQgPSBkYXRhLmhhc093blByb3BlcnR5KCdlbmFibGVkJykgPyAhIWRhdGEuZW5hYmxlZCA6IHRydWU7XG5cbiAgICAgICAgaWYgKGRhdGEuc2l6ZSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuc2l6ZSBpbnN0YW5jZW9mIFZlYzMpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuc2l6ZS5jb3B5KGRhdGEuc2l6ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuc2l6ZSBpbnN0YW5jZW9mIEFycmF5ICYmIGRhdGEuc2l6ZS5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zaXplLnNldChkYXRhLnNpemVbMF0sIGRhdGEuc2l6ZVsxXSwgZGF0YS5zaXplWzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsb25lQ29tcG9uZW50KGVudGl0eSwgY2xvbmUpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIHNpemU6IGVudGl0eS56b25lLnNpemVcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5hZGRDb21wb25lbnQoY2xvbmUsIGRhdGEpO1xuICAgIH1cblxuICAgIF9vbkJlZm9yZVJlbW92ZShlbnRpdHksIGNvbXBvbmVudCkge1xuICAgICAgICBjb21wb25lbnQuX29uQmVmb3JlUmVtb3ZlKCk7XG4gICAgfVxufVxuXG5Db21wb25lbnQuX2J1aWxkQWNjZXNzb3JzKFpvbmVDb21wb25lbnQucHJvdG90eXBlLCBfc2NoZW1hKTtcblxuZXhwb3J0IHsgWm9uZUNvbXBvbmVudFN5c3RlbSB9O1xuIl0sIm5hbWVzIjpbIl9zY2hlbWEiLCJab25lQ29tcG9uZW50U3lzdGVtIiwiQ29tcG9uZW50U3lzdGVtIiwiY29uc3RydWN0b3IiLCJhcHAiLCJpZCIsIkNvbXBvbmVudFR5cGUiLCJab25lQ29tcG9uZW50IiwiRGF0YVR5cGUiLCJab25lQ29tcG9uZW50RGF0YSIsInNjaGVtYSIsIm9uIiwiX29uQmVmb3JlUmVtb3ZlIiwiaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEiLCJjb21wb25lbnQiLCJkYXRhIiwicHJvcGVydGllcyIsImVuYWJsZWQiLCJoYXNPd25Qcm9wZXJ0eSIsInNpemUiLCJWZWMzIiwiY29weSIsIkFycmF5IiwibGVuZ3RoIiwic2V0IiwiY2xvbmVDb21wb25lbnQiLCJlbnRpdHkiLCJjbG9uZSIsInpvbmUiLCJhZGRDb21wb25lbnQiLCJDb21wb25lbnQiLCJfYnVpbGRBY2Nlc3NvcnMiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsTUFBTUEsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLG1CQUFtQixTQUFTQyxlQUFlLENBQUM7QUFDOUM7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lDLFdBQVdBLENBQUNDLEdBQUcsRUFBRTtJQUNiLEtBQUssQ0FBQ0EsR0FBRyxDQUFDLENBQUE7SUFFVixJQUFJLENBQUNDLEVBQUUsR0FBRyxNQUFNLENBQUE7SUFFaEIsSUFBSSxDQUFDQyxhQUFhLEdBQUdDLGFBQWEsQ0FBQTtJQUNsQyxJQUFJLENBQUNDLFFBQVEsR0FBR0MsaUJBQWlCLENBQUE7SUFFakMsSUFBSSxDQUFDQyxNQUFNLEdBQUdWLE9BQU8sQ0FBQTtJQUVyQixJQUFJLENBQUNXLEVBQUUsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDdkQsR0FBQTtBQUVBQyxFQUFBQSx1QkFBdUJBLENBQUNDLFNBQVMsRUFBRUMsSUFBSSxFQUFFQyxVQUFVLEVBQUU7QUFDakRGLElBQUFBLFNBQVMsQ0FBQ0csT0FBTyxHQUFHRixJQUFJLENBQUNHLGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUNILElBQUksQ0FBQ0UsT0FBTyxHQUFHLElBQUksQ0FBQTtJQUUxRSxJQUFJRixJQUFJLENBQUNJLElBQUksRUFBRTtBQUNYLE1BQUEsSUFBSUosSUFBSSxDQUFDSSxJQUFJLFlBQVlDLElBQUksRUFBRTtRQUMzQk4sU0FBUyxDQUFDSyxJQUFJLENBQUNFLElBQUksQ0FBQ04sSUFBSSxDQUFDSSxJQUFJLENBQUMsQ0FBQTtBQUNsQyxPQUFDLE1BQU0sSUFBSUosSUFBSSxDQUFDSSxJQUFJLFlBQVlHLEtBQUssSUFBSVAsSUFBSSxDQUFDSSxJQUFJLENBQUNJLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDNURULFNBQVMsQ0FBQ0ssSUFBSSxDQUFDSyxHQUFHLENBQUNULElBQUksQ0FBQ0ksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFSixJQUFJLENBQUNJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRUosSUFBSSxDQUFDSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNoRSxPQUFBO0FBQ0osS0FBQTtBQUNKLEdBQUE7QUFFQU0sRUFBQUEsY0FBY0EsQ0FBQ0MsTUFBTSxFQUFFQyxLQUFLLEVBQUU7QUFDMUIsSUFBQSxNQUFNWixJQUFJLEdBQUc7QUFDVEksTUFBQUEsSUFBSSxFQUFFTyxNQUFNLENBQUNFLElBQUksQ0FBQ1QsSUFBQUE7S0FDckIsQ0FBQTtBQUVELElBQUEsT0FBTyxJQUFJLENBQUNVLFlBQVksQ0FBQ0YsS0FBSyxFQUFFWixJQUFJLENBQUMsQ0FBQTtBQUN6QyxHQUFBO0FBRUFILEVBQUFBLGVBQWVBLENBQUNjLE1BQU0sRUFBRVosU0FBUyxFQUFFO0lBQy9CQSxTQUFTLENBQUNGLGVBQWUsRUFBRSxDQUFBO0FBQy9CLEdBQUE7QUFDSixDQUFBO0FBRUFrQixTQUFTLENBQUNDLGVBQWUsQ0FBQ3hCLGFBQWEsQ0FBQ3lCLFNBQVMsRUFBRWhDLE9BQU8sQ0FBQzs7OzsifQ==
