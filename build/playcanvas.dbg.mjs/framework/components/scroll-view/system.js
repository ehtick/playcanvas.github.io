/**
 * @license
 * PlayCanvas Engine v1.57.0 revision f1998a31e (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Component } from '../component.js';
import { ComponentSystem } from '../system.js';
import { ScrollViewComponent } from './component.js';
import { ScrollViewComponentData } from './data.js';
import { Vec2 } from '../../../math/vec2.js';

const _schema = [{
  name: 'enabled',
  type: 'boolean'
}, {
  name: 'horizontal',
  type: 'boolean'
}, {
  name: 'vertical',
  type: 'boolean'
}, {
  name: 'scrollMode',
  type: 'number'
}, {
  name: 'bounceAmount',
  type: 'number'
}, {
  name: 'friction',
  type: 'number'
}, {
  name: 'dragThreshold',
  type: 'number'
}, {
  name: 'useMouseWheel',
  type: 'boolean'
}, {
  name: 'mouseWheelSensitivity',
  type: 'vec2'
}, {
  name: 'horizontalScrollbarVisibility',
  type: 'number'
}, {
  name: 'verticalScrollbarVisibility',
  type: 'number'
}, {
  name: 'viewportEntity',
  type: 'entity'
}, {
  name: 'contentEntity',
  type: 'entity'
}, {
  name: 'horizontalScrollbarEntity',
  type: 'entity'
}, {
  name: 'verticalScrollbarEntity',
  type: 'entity'
}];
const DEFAULT_DRAG_THRESHOLD = 10;

class ScrollViewComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'scrollview';
    this.ComponentType = ScrollViewComponent;
    this.DataType = ScrollViewComponentData;
    this.schema = _schema;
    this.on('beforeremove', this._onRemoveComponent, this);
    this.app.systems.on('update', this.onUpdate, this);
  }

  initializeComponentData(component, data, properties) {
    if (data.dragThreshold === undefined) {
      data.dragThreshold = DEFAULT_DRAG_THRESHOLD;
    }

    if (data.useMouseWheel === undefined) {
      data.useMouseWheel = true;
    }

    if (data.mouseWheelSensitivity === undefined) {
      data.mouseWheelSensitivity = new Vec2(1, 1);
    }

    super.initializeComponentData(component, data, _schema);
  }

  onUpdate(dt) {
    const components = this.store;

    for (const id in components) {
      const entity = components[id].entity;
      const component = entity.scrollview;

      if (component.enabled && entity.enabled) {
        component.onUpdate();
      }
    }
  }

  _onRemoveComponent(entity, component) {
    component.onRemove();
  }

  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }

}

Component._buildAccessors(ScrollViewComponent.prototype, _schema);

export { ScrollViewComponentSystem };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvc2Nyb2xsLXZpZXcvc3lzdGVtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgeyBDb21wb25lbnRTeXN0ZW0gfSBmcm9tICcuLi9zeXN0ZW0uanMnO1xuXG5pbXBvcnQgeyBTY3JvbGxWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQuanMnO1xuaW1wb3J0IHsgU2Nyb2xsVmlld0NvbXBvbmVudERhdGEgfSBmcm9tICcuL2RhdGEuanMnO1xuXG5pbXBvcnQgeyBWZWMyIH0gZnJvbSAnLi4vLi4vLi4vbWF0aC92ZWMyLmpzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL2FwcC1iYXNlLmpzJykuQXBwQmFzZX0gQXBwQmFzZSAqL1xuXG5jb25zdCBfc2NoZW1hID0gW1xuICAgIHsgbmFtZTogJ2VuYWJsZWQnLCB0eXBlOiAnYm9vbGVhbicgfSxcbiAgICB7IG5hbWU6ICdob3Jpem9udGFsJywgdHlwZTogJ2Jvb2xlYW4nIH0sXG4gICAgeyBuYW1lOiAndmVydGljYWwnLCB0eXBlOiAnYm9vbGVhbicgfSxcbiAgICB7IG5hbWU6ICdzY3JvbGxNb2RlJywgdHlwZTogJ251bWJlcicgfSxcbiAgICB7IG5hbWU6ICdib3VuY2VBbW91bnQnLCB0eXBlOiAnbnVtYmVyJyB9LFxuICAgIHsgbmFtZTogJ2ZyaWN0aW9uJywgdHlwZTogJ251bWJlcicgfSxcbiAgICB7IG5hbWU6ICdkcmFnVGhyZXNob2xkJywgdHlwZTogJ251bWJlcicgfSxcbiAgICB7IG5hbWU6ICd1c2VNb3VzZVdoZWVsJywgdHlwZTogJ2Jvb2xlYW4nIH0sXG4gICAgeyBuYW1lOiAnbW91c2VXaGVlbFNlbnNpdGl2aXR5JywgdHlwZTogJ3ZlYzInIH0sXG4gICAgeyBuYW1lOiAnaG9yaXpvbnRhbFNjcm9sbGJhclZpc2liaWxpdHknLCB0eXBlOiAnbnVtYmVyJyB9LFxuICAgIHsgbmFtZTogJ3ZlcnRpY2FsU2Nyb2xsYmFyVmlzaWJpbGl0eScsIHR5cGU6ICdudW1iZXInIH0sXG4gICAgeyBuYW1lOiAndmlld3BvcnRFbnRpdHknLCB0eXBlOiAnZW50aXR5JyB9LFxuICAgIHsgbmFtZTogJ2NvbnRlbnRFbnRpdHknLCB0eXBlOiAnZW50aXR5JyB9LFxuICAgIHsgbmFtZTogJ2hvcml6b250YWxTY3JvbGxiYXJFbnRpdHknLCB0eXBlOiAnZW50aXR5JyB9LFxuICAgIHsgbmFtZTogJ3ZlcnRpY2FsU2Nyb2xsYmFyRW50aXR5JywgdHlwZTogJ2VudGl0eScgfVxuXTtcblxuY29uc3QgREVGQVVMVF9EUkFHX1RIUkVTSE9MRCA9IDEwO1xuXG4vKipcbiAqIE1hbmFnZXMgY3JlYXRpb24gb2Yge0BsaW5rIFNjcm9sbFZpZXdDb21wb25lbnR9cy5cbiAqXG4gKiBAYXVnbWVudHMgQ29tcG9uZW50U3lzdGVtXG4gKi9cbmNsYXNzIFNjcm9sbFZpZXdDb21wb25lbnRTeXN0ZW0gZXh0ZW5kcyBDb21wb25lbnRTeXN0ZW0ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBTY3JvbGxWaWV3Q29tcG9uZW50U3lzdGVtIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcHBCYXNlfSBhcHAgLSBUaGUgYXBwbGljYXRpb24uXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuXG4gICAgICAgIHRoaXMuaWQgPSAnc2Nyb2xsdmlldyc7XG5cbiAgICAgICAgdGhpcy5Db21wb25lbnRUeXBlID0gU2Nyb2xsVmlld0NvbXBvbmVudDtcbiAgICAgICAgdGhpcy5EYXRhVHlwZSA9IFNjcm9sbFZpZXdDb21wb25lbnREYXRhO1xuXG4gICAgICAgIHRoaXMuc2NoZW1hID0gX3NjaGVtYTtcblxuICAgICAgICB0aGlzLm9uKCdiZWZvcmVyZW1vdmUnLCB0aGlzLl9vblJlbW92ZUNvbXBvbmVudCwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5hcHAuc3lzdGVtcy5vbigndXBkYXRlJywgdGhpcy5vblVwZGF0ZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEoY29tcG9uZW50LCBkYXRhLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmIChkYXRhLmRyYWdUaHJlc2hvbGQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGF0YS5kcmFnVGhyZXNob2xkID0gREVGQVVMVF9EUkFHX1RIUkVTSE9MRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YS51c2VNb3VzZVdoZWVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRhdGEudXNlTW91c2VXaGVlbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubW91c2VXaGVlbFNlbnNpdGl2aXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRhdGEubW91c2VXaGVlbFNlbnNpdGl2aXR5ID0gbmV3IFZlYzIoMSwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5pbml0aWFsaXplQ29tcG9uZW50RGF0YShjb21wb25lbnQsIGRhdGEsIF9zY2hlbWEpO1xuICAgIH1cblxuICAgIG9uVXBkYXRlKGR0KSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSB0aGlzLnN0b3JlO1xuXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gY29tcG9uZW50cykge1xuICAgICAgICAgICAgY29uc3QgZW50aXR5ID0gY29tcG9uZW50c1tpZF0uZW50aXR5O1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZW50aXR5LnNjcm9sbHZpZXc7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50LmVuYWJsZWQgJiYgZW50aXR5LmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQub25VcGRhdGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uUmVtb3ZlQ29tcG9uZW50KGVudGl0eSwgY29tcG9uZW50KSB7XG4gICAgICAgIGNvbXBvbmVudC5vblJlbW92ZSgpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLmFwcC5zeXN0ZW1zLm9mZigndXBkYXRlJywgdGhpcy5vblVwZGF0ZSwgdGhpcyk7XG4gICAgfVxufVxuXG5Db21wb25lbnQuX2J1aWxkQWNjZXNzb3JzKFNjcm9sbFZpZXdDb21wb25lbnQucHJvdG90eXBlLCBfc2NoZW1hKTtcblxuZXhwb3J0IHsgU2Nyb2xsVmlld0NvbXBvbmVudFN5c3RlbSB9O1xuIl0sIm5hbWVzIjpbIl9zY2hlbWEiLCJuYW1lIiwidHlwZSIsIkRFRkFVTFRfRFJBR19USFJFU0hPTEQiLCJTY3JvbGxWaWV3Q29tcG9uZW50U3lzdGVtIiwiQ29tcG9uZW50U3lzdGVtIiwiY29uc3RydWN0b3IiLCJhcHAiLCJpZCIsIkNvbXBvbmVudFR5cGUiLCJTY3JvbGxWaWV3Q29tcG9uZW50IiwiRGF0YVR5cGUiLCJTY3JvbGxWaWV3Q29tcG9uZW50RGF0YSIsInNjaGVtYSIsIm9uIiwiX29uUmVtb3ZlQ29tcG9uZW50Iiwic3lzdGVtcyIsIm9uVXBkYXRlIiwiaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEiLCJjb21wb25lbnQiLCJkYXRhIiwicHJvcGVydGllcyIsImRyYWdUaHJlc2hvbGQiLCJ1bmRlZmluZWQiLCJ1c2VNb3VzZVdoZWVsIiwibW91c2VXaGVlbFNlbnNpdGl2aXR5IiwiVmVjMiIsImR0IiwiY29tcG9uZW50cyIsInN0b3JlIiwiZW50aXR5Iiwic2Nyb2xsdmlldyIsImVuYWJsZWQiLCJvblJlbW92ZSIsImRlc3Ryb3kiLCJvZmYiLCJDb21wb25lbnQiLCJfYnVpbGRBY2Nlc3NvcnMiLCJwcm90b3R5cGUiXSwibWFwcGlu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
