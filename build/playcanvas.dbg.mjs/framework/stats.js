/**
 * @license
 * PlayCanvas Engine v1.57.0 revision f1998a31e (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { getApplication } from './globals.js';

class ApplicationStats {
  constructor(device) {
    this.frame = {
      fps: 0,
      ms: 0,
      dt: 0,
      updateStart: 0,
      updateTime: 0,
      renderStart: 0,
      renderTime: 0,
      physicsStart: 0,
      physicsTime: 0,
      cullTime: 0,
      sortTime: 0,
      skinTime: 0,
      morphTime: 0,
      instancingTime: 0,
      triangles: 0,
      otherPrimitives: 0,
      shaders: 0,
      materials: 0,
      cameras: 0,
      shadowMapUpdates: 0,
      shadowMapTime: 0,
      depthMapTime: 0,
      forwardTime: 0,
      lightClustersTime: 0,
      lightClusters: 0,
      _timeToCountFrames: 0,
      _fpsAccum: 0
    };
    this.drawCalls = {
      forward: 0,
      depth: 0,
      shadow: 0,
      immediate: 0,
      misc: 0,
      total: 0,
      skinned: 0,
      instanced: 0,
      removedByInstancing: 0
    };
    this.misc = {
      renderTargetCreationTime: 0
    };
    this.particles = {
      updatesPerFrame: 0,
      _updatesPerFrame: 0,
      frameTime: 0,
      _frameTime: 0
    };
    this.shaders = device._shaderStats;
    this.vram = device._vram;
    Object.defineProperty(this.vram, 'totalUsed', {
      get: function () {
        return this.tex + this.vb + this.ib;
      }
    });
    Object.defineProperty(this.vram, 'geom', {
      get: function () {
        return this.vb + this.ib;
      }
    });
  }

  get scene() {
    return getApplication().scene._stats;
  }

  get lightmapper() {
    var _getApplication$light;

    return (_getApplication$light = getApplication().lightmapper) == null ? void 0 : _getApplication$light.stats;
  }

  get batcher() {
    const batcher = getApplication()._batcher;

    return batcher ? batcher._stats : null;
  }

}

export { ApplicationStats };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvc3RhdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXBwbGljYXRpb24gfSBmcm9tICcuL2dsb2JhbHMuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vZ3JhcGhpY3MvZ3JhcGhpY3MtZGV2aWNlLmpzJykuR3JhcGhpY3NEZXZpY2V9IEdyYXBoaWNzRGV2aWNlICovXG5cbi8qKlxuICogUmVjb3JkcyBwZXJmb3JtYW5jZS1yZWxhdGVkIHN0YXRpc3RpY3MgcmVsYXRlZCB0byB0aGUgYXBwbGljYXRpb24uXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBBcHBsaWNhdGlvblN0YXRzIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQXBwbGljYXRpb25TdGF0cyBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7R3JhcGhpY3NEZXZpY2V9IGRldmljZSAtIFRoZSBncmFwaGljcyBkZXZpY2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZGV2aWNlKSB7XG4gICAgICAgIHRoaXMuZnJhbWUgPSB7XG4gICAgICAgICAgICBmcHM6IDAsXG4gICAgICAgICAgICBtczogMCxcbiAgICAgICAgICAgIGR0OiAwLFxuXG4gICAgICAgICAgICB1cGRhdGVTdGFydDogMCxcbiAgICAgICAgICAgIHVwZGF0ZVRpbWU6IDAsXG4gICAgICAgICAgICByZW5kZXJTdGFydDogMCxcbiAgICAgICAgICAgIHJlbmRlclRpbWU6IDAsXG4gICAgICAgICAgICBwaHlzaWNzU3RhcnQ6IDAsXG4gICAgICAgICAgICBwaHlzaWNzVGltZTogMCxcbiAgICAgICAgICAgIGN1bGxUaW1lOiAwLFxuICAgICAgICAgICAgc29ydFRpbWU6IDAsXG4gICAgICAgICAgICBza2luVGltZTogMCxcbiAgICAgICAgICAgIG1vcnBoVGltZTogMCxcbiAgICAgICAgICAgIGluc3RhbmNpbmdUaW1lOiAwLCAvLyBkZXByZWNhdGVkXG5cbiAgICAgICAgICAgIHRyaWFuZ2xlczogMCxcbiAgICAgICAgICAgIG90aGVyUHJpbWl0aXZlczogMCxcbiAgICAgICAgICAgIHNoYWRlcnM6IDAsXG4gICAgICAgICAgICBtYXRlcmlhbHM6IDAsXG4gICAgICAgICAgICBjYW1lcmFzOiAwLFxuICAgICAgICAgICAgc2hhZG93TWFwVXBkYXRlczogMCxcbiAgICAgICAgICAgIHNoYWRvd01hcFRpbWU6IDAsXG4gICAgICAgICAgICBkZXB0aE1hcFRpbWU6IDAsIC8vIGRlcHJlY2F0ZWRcbiAgICAgICAgICAgIGZvcndhcmRUaW1lOiAwLFxuXG4gICAgICAgICAgICBsaWdodENsdXN0ZXJzVGltZTogMCxcbiAgICAgICAgICAgIGxpZ2h0Q2x1c3RlcnM6IDAsXG5cbiAgICAgICAgICAgIF90aW1lVG9Db3VudEZyYW1lczogMCxcbiAgICAgICAgICAgIF9mcHNBY2N1bTogMFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZHJhd0NhbGxzID0ge1xuICAgICAgICAgICAgZm9yd2FyZDogMCxcbiAgICAgICAgICAgIGRlcHRoOiAwLCAvLyBkZXByZWNhdGVkXG4gICAgICAgICAgICBzaGFkb3c6IDAsXG4gICAgICAgICAgICBpbW1lZGlhdGU6IDAsIC8vIGRlcHJlY2F0ZWRcbiAgICAgICAgICAgIG1pc2M6IDAsIC8vIGV2ZXJ5dGhpbmcgdGhhdCBpcyBub3QgZm9yd2FyZC9kZXB0aC9zaGFkb3cgKHBvc3QgZWZmZWN0IHF1YWRzIGV0YylcbiAgICAgICAgICAgIHRvdGFsOiAwLCAvLyB0b3RhbCA9IGZvcndhcmQgKyBkZXB0aCArIHNoYWRvdyArIG1pc2NcblxuICAgICAgICAgICAgLy8gU29tZSBvZiBmb3J3YXJkL2RlcHRoL3NoYWRvdy9taXNjIGRyYXcgY2FsbHM6XG4gICAgICAgICAgICBza2lubmVkOiAwLFxuICAgICAgICAgICAgaW5zdGFuY2VkOiAwLCAvLyBkZXByZWNhdGVkXG5cbiAgICAgICAgICAgIHJlbW92ZWRCeUluc3RhbmNpbmc6IDAgLy8gZGVwcmVjYXRlZFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubWlzYyA9IHtcbiAgICAgICAgICAgIHJlbmRlclRhcmdldENyZWF0aW9uVGltZTogMFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucGFydGljbGVzID0ge1xuICAgICAgICAgICAgdXBkYXRlc1BlckZyYW1lOiAwLFxuICAgICAgICAgICAgX3VwZGF0ZXNQZXJGcmFtZTogMCxcbiAgICAgICAgICAgIGZyYW1lVGltZTogMCxcbiAgICAgICAgICAgIF9mcmFtZVRpbWU6IDBcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNoYWRlcnMgPSBkZXZpY2UuX3NoYWRlclN0YXRzO1xuICAgICAgICB0aGlzLnZyYW0gPSBkZXZpY2UuX3ZyYW07XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMudnJhbSwgJ3RvdGFsVXNlZCcsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRleCArIHRoaXMudmIgKyB0aGlzLmliO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy52cmFtLCAnZ2VvbScsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZiICsgdGhpcy5pYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IHNjZW5lKCkge1xuICAgICAgICByZXR1cm4gZ2V0QXBwbGljYXRpb24oKS5zY2VuZS5fc3RhdHM7XG4gICAgfVxuXG4gICAgZ2V0IGxpZ2h0bWFwcGVyKCkge1xuICAgICAgICByZXR1cm4gZ2V0QXBwbGljYXRpb24oKS5saWdodG1hcHBlcj8uc3RhdHM7XG4gICAgfVxuXG4gICAgZ2V0IGJhdGNoZXIoKSB7XG4gICAgICAgIGNvbnN0IGJhdGNoZXIgPSBnZXRBcHBsaWNhdGlvbigpLl9iYXRjaGVyO1xuICAgICAgICByZXR1cm4gYmF0Y2hlciA/IGJhdGNoZXIuX3N0YXRzIDogbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEFwcGxpY2F0aW9uU3RhdHMgfTtcbiJdLCJuYW1lcyI6WyJBcHBsaWNhdGlvblN0YXRzIiwiY29uc3RydWN0b3IiLCJkZXZpY2UiLCJmcmFtZSIsImZwcyIsIm1zIiwiZHQiLCJ1cGRhdGVTdGFydCIsInVwZGF0ZVRpbWUiLCJyZW5kZXJTdGFydCIsInJlbmRlclRpbWUiLCJwaHlzaWNzU3RhcnQiLCJwaHlzaWNzVGltZSIsImN1bGxUaW1lIiwic29ydFRpbWUiLCJza2luVGltZSIsIm1vcnBoVGltZSIsImluc3RhbmNpbmdUaW1lIiwidHJpYW5nbGVzIiwib3RoZXJQcmltaXRpdmVzIiwic2hhZGVycyIsIm1hdGVyaWFscyIsImNhbWVyYXMiLCJzaGFkb3dNYXBVcGRhdGVzIiwic2hhZG93TWFwVGltZSIsImRlcHRoTWFwVGltZSIsImZvcndhcmRUaW1lIiwibGlnaHRDbHVzdGVyc1RpbWUiLCJsaWdodENsdXN0ZXJzIiwiX3RpbWVUb0NvdW50RnJhbWVzIiwiX2Zwc0FjY3VtIiwiZHJhd0NhbGxzIiwiZm9yd2FyZCIsImRlcHRoIiwic2hhZG93IiwiaW1tZWRpYXRlIiwibWlzYyIsInRvdGFsIiwic2tpbm5lZCIsImluc3RhbmNlZCIsInJlbW92ZWRCeUluc3RhbmNpbmciLCJyZW5kZXJUYXJnZXRDcmVhdGlvblRpbWUiLCJwYXJ0aWNsZXMiLCJ1cGRhdGVzUGVyRnJhbWUiLCJfdXBkYXRlc1BlckZyYW1lIiwiZnJhbWVUaW1lIiwiX2ZyYW1lVGltZSIsIl9zaGFkZXJTdGF0cyIsInZyYW0iLCJfdnJhbSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwidGV4IiwidmIiLCJpYiIsInNjZW5lIiwiZ2V0QXBwbGljYXRpb24iLCJfc3RhdHMiLCJsaWdodG1hcHBlciIsInN0YXRzIiwiYmF0Y2hlciIsIl9iYXRjaGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBU0EsTUFBTUEsZ0JBQU4sQ0FBdUI7RUFNbkJDLFdBQVcsQ0FBQ0MsTUFBRCxFQUFTO0FBQ2hCLElBQUEsSUFBQSxDQUFLQyxLQUFMLEdBQWE7QUFDVEMsTUFBQUEsR0FBRyxFQUFFLENBREk7QUFFVEMsTUFBQUEsRUFBRSxFQUFFLENBRks7QUFHVEMsTUFBQUEsRUFBRSxFQUFFLENBSEs7QUFLVEMsTUFBQUEsV0FBVyxFQUFFLENBTEo7QUFNVEMsTUFBQUEsVUFBVSxFQUFFLENBTkg7QUFPVEMsTUFBQUEsV0FBVyxFQUFFLENBUEo7QUFRVEMsTUFBQUEsVUFBVSxFQUFFLENBUkg7QUFTVEMsTUFBQUEsWUFBWSxFQUFFLENBVEw7QUFVVEMsTUFBQUEsV0FBVyxFQUFFLENBVko7QUFXVEMsTUFBQUEsUUFBUSxFQUFFLENBWEQ7QUFZVEMsTUFBQUEsUUFBUSxFQUFFLENBWkQ7QUFhVEMsTUFBQUEsUUFBUSxFQUFFLENBYkQ7QUFjVEMsTUFBQUEsU0FBUyxFQUFFLENBZEY7QUFlVEMsTUFBQUEsY0FBYyxFQUFFLENBZlA7QUFpQlRDLE1BQUFBLFNBQVMsRUFBRSxDQWpCRjtBQWtCVEMsTUFBQUEsZUFBZSxFQUFFLENBbEJSO0FBbUJUQyxNQUFBQSxPQUFPLEVBQUUsQ0FuQkE7QUFvQlRDLE1BQUFBLFNBQVMsRUFBRSxDQXBCRjtBQXFCVEMsTUFBQUEsT0FBTyxFQUFFLENBckJBO0FBc0JUQyxNQUFBQSxnQkFBZ0IsRUFBRSxDQXRCVDtBQXVCVEMsTUFBQUEsYUFBYSxFQUFFLENBdkJOO0FBd0JUQyxNQUFBQSxZQUFZLEVBQUUsQ0F4Qkw7QUF5QlRDLE1BQUFBLFdBQVcsRUFBRSxDQXpCSjtBQTJCVEMsTUFBQUEsaUJBQWlCLEVBQUUsQ0EzQlY7QUE0QlRDLE1BQUFBLGFBQWEsRUFBRSxDQTVCTjtBQThCVEMsTUFBQUEsa0JBQWtCLEVBQUUsQ0E5Qlg7QUErQlRDLE1BQUFBLFNBQVMsRUFBRSxDQUFBO0tBL0JmLENBQUE7QUFrQ0EsSUFBQSxJQUFBLENBQUtDLFNBQUwsR0FBaUI7QUFDYkMsTUFBQUEsT0FBTyxFQUFFLENBREk7QUFFYkMsTUFBQUEsS0FBSyxFQUFFLENBRk07QUFHYkMsTUFBQUEsTUFBTSxFQUFFLENBSEs7QUFJYkMsTUFBQUEsU0FBUyxFQUFFLENBSkU7QUFLYkMsTUFBQUEsSUFBSSxFQUFFLENBTE87QUFNYkMsTUFBQUEsS0FBSyxFQUFFLENBTk07QUFTYkMsTUFBQUEsT0FBTyxFQUFFLENBVEk7QUFVYkMsTUFBQUEsU0FBUyxFQUFFLENBVkU7QUFZYkMsTUFBQUEsbUJBQW1CLEVBQUUsQ0FBQTtLQVp6QixDQUFBO0FBZUEsSUFBQSxJQUFBLENBQUtKLElBQUwsR0FBWTtBQUNSSyxNQUFBQSx3QkFBd0IsRUFBRSxDQUFBO0tBRDlCLENBQUE7QUFJQSxJQUFBLElBQUEsQ0FBS0MsU0FBTCxHQUFpQjtBQUNiQyxNQUFBQSxlQUFlLEVBQUUsQ0FESjtBQUViQyxNQUFBQSxnQkFBZ0IsRUFBRSxDQUZMO0FBR2JDLE1BQUFBLFNBQVMsRUFBRSxDQUhFO0FBSWJDLE1BQUFBLFVBQVUsRUFBRSxDQUFBO0tBSmhCLENBQUE7QUFPQSxJQUFBLElBQUEsQ0FBSzFCLE9BQUwsR0FBZWxCLE1BQU0sQ0FBQzZDLFlBQXRCLENBQUE7QUFDQSxJQUFBLElBQUEsQ0FBS0MsSUFBTCxHQUFZOUMsTUFBTSxDQUFDK0MsS0FBbkIsQ0FBQTtBQUVBQyxJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0IsS0FBS0gsSUFBM0IsRUFBaUMsV0FBakMsRUFBOEM7QUFDMUNJLE1BQUFBLEdBQUcsRUFBRSxZQUFZO0FBQ2IsUUFBQSxPQUFPLEtBQUtDLEdBQUwsR0FBVyxLQUFLQyxFQUFoQixHQUFxQixLQUFLQyxFQUFqQyxDQUFBO0FBQ0gsT0FBQTtLQUhMLENBQUEsQ0FBQTtBQU1BTCxJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0IsS0FBS0gsSUFBM0IsRUFBaUMsTUFBakMsRUFBeUM7QUFDckNJLE1BQUFBLEdBQUcsRUFBRSxZQUFZO0FBQ2IsUUFBQSxPQUFPLElBQUtFLENBQUFBLEVBQUwsR0FBVSxJQUFBLENBQUtDLEVBQXRCLENBQUE7QUFDSCxPQUFBO0tBSEwsQ0FBQSxDQUFBO0FBS0gsR0FBQTs7QUFFUSxFQUFBLElBQUxDLEtBQUssR0FBRztBQUNSLElBQUEsT0FBT0MsY0FBYyxFQUFBLENBQUdELEtBQWpCLENBQXVCRSxNQUE5QixDQUFBO0FBQ0gsR0FBQTs7QUFFYyxFQUFBLElBQVhDLFdBQVcsR0FBRztBQUFBLElBQUEsSUFBQSxxQkFBQSxDQUFBOztBQUNkLElBQUEsT0FBQSxDQUFBLHFCQUFBLEdBQU9GLGNBQWMsRUFBQSxDQUFHRSxXQUF4QixLQUFBLElBQUEsR0FBQSxLQUFBLENBQUEsR0FBTyxzQkFBOEJDLEtBQXJDLENBQUE7QUFDSCxHQUFBOztBQUVVLEVBQUEsSUFBUEMsT0FBTyxHQUFHO0FBQ1YsSUFBQSxNQUFNQSxPQUFPLEdBQUdKLGNBQWMsRUFBQSxDQUFHSyxRQUFqQyxDQUFBOztBQUNBLElBQUEsT0FBT0QsT0FBTyxHQUFHQSxPQUFPLENBQUNILE1BQVgsR0FBb0IsSUFBbEMsQ0FBQTtBQUNILEdBQUE7O0FBOUZrQjs7OzsifQ==
