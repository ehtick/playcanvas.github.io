/**
 * @license
 * PlayCanvas Engine v1.63.0-dev revision 9f3635a4e (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { TEXHINT_ASSET, ADDRESS_CLAMP_TO_EDGE, ADDRESS_REPEAT } from '../../../platform/graphics/constants.js';
import { Texture } from '../../../platform/graphics/texture.js';
import { Asset } from '../../asset/asset.js';
import { basisTranscode } from '../../handlers/basis.js';

/** @typedef {import('../../handlers/texture.js').TextureParser} TextureParser */

/**
 * Parser for basis files.
 *
 * @implements {TextureParser}
 * @ignore
 */
class BasisParser {
  constructor(registry, device) {
    this.device = device;
    this.maxRetries = 0;
  }
  load(url, callback, asset) {
    const device = this.device;
    const transcode = data => {
      var _asset$file, _asset$file$variants, _asset$file$variants$;
      const basisModuleFound = basisTranscode(device, url.load, data, callback, {
        isGGGR: ((asset == null ? void 0 : (_asset$file = asset.file) == null ? void 0 : (_asset$file$variants = _asset$file.variants) == null ? void 0 : (_asset$file$variants$ = _asset$file$variants.basis) == null ? void 0 : _asset$file$variants$.opt) & 8) !== 0
      });
      if (!basisModuleFound) {
        callback(`Basis module not found. Asset '${asset.name}' basis texture variant will not be loaded.`);
      }
    };
    Asset.fetchArrayBuffer(url.load, (err, result) => {
      if (err) {
        callback(err);
      } else {
        transcode(result);
      }
    }, asset, this.maxRetries);
  }

  // our async transcode call provides the neat structure we need to create the texture instance
  open(url, data, device) {
    const texture = new Texture(device, {
      name: url,
      profilerHint: TEXHINT_ASSET,
      addressU: data.cubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      addressV: data.cubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      width: data.width,
      height: data.height,
      format: data.format,
      cubemap: data.cubemap,
      levels: data.levels
    });
    texture.upload();
    return texture;
  }
}

export { BasisParser };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaXMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvcGFyc2Vycy90ZXh0dXJlL2Jhc2lzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFERFJFU1NfQ0xBTVBfVE9fRURHRSwgQUREUkVTU19SRVBFQVQsIFRFWEhJTlRfQVNTRVQgfSBmcm9tICcuLi8uLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL3RleHR1cmUuanMnO1xuXG5pbXBvcnQgeyBBc3NldCB9IGZyb20gJy4uLy4uL2Fzc2V0L2Fzc2V0LmpzJztcbmltcG9ydCB7IGJhc2lzVHJhbnNjb2RlIH0gZnJvbSAnLi4vLi4vaGFuZGxlcnMvYmFzaXMuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vaGFuZGxlcnMvdGV4dHVyZS5qcycpLlRleHR1cmVQYXJzZXJ9IFRleHR1cmVQYXJzZXIgKi9cblxuLyoqXG4gKiBQYXJzZXIgZm9yIGJhc2lzIGZpbGVzLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtUZXh0dXJlUGFyc2VyfVxuICogQGlnbm9yZVxuICovXG5jbGFzcyBCYXNpc1BhcnNlciB7XG4gICAgY29uc3RydWN0b3IocmVnaXN0cnksIGRldmljZSkge1xuICAgICAgICB0aGlzLmRldmljZSA9IGRldmljZTtcbiAgICAgICAgdGhpcy5tYXhSZXRyaWVzID0gMDtcbiAgICB9XG5cbiAgICBsb2FkKHVybCwgY2FsbGJhY2ssIGFzc2V0KSB7XG4gICAgICAgIGNvbnN0IGRldmljZSA9IHRoaXMuZGV2aWNlO1xuXG4gICAgICAgIGNvbnN0IHRyYW5zY29kZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBiYXNpc01vZHVsZUZvdW5kID0gYmFzaXNUcmFuc2NvZGUoXG4gICAgICAgICAgICAgICAgZGV2aWNlLFxuICAgICAgICAgICAgICAgIHVybC5sb2FkLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgeyBpc0dHR1I6IChhc3NldD8uZmlsZT8udmFyaWFudHM/LmJhc2lzPy5vcHQgJiA4KSAhPT0gMCB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoIWJhc2lzTW9kdWxlRm91bmQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhgQmFzaXMgbW9kdWxlIG5vdCBmb3VuZC4gQXNzZXQgJyR7YXNzZXQubmFtZX0nIGJhc2lzIHRleHR1cmUgdmFyaWFudCB3aWxsIG5vdCBiZSBsb2FkZWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgQXNzZXQuZmV0Y2hBcnJheUJ1ZmZlcih1cmwubG9hZCwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJhbnNjb2RlKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGFzc2V0LCB0aGlzLm1heFJldHJpZXMpO1xuICAgIH1cblxuICAgIC8vIG91ciBhc3luYyB0cmFuc2NvZGUgY2FsbCBwcm92aWRlcyB0aGUgbmVhdCBzdHJ1Y3R1cmUgd2UgbmVlZCB0byBjcmVhdGUgdGhlIHRleHR1cmUgaW5zdGFuY2VcbiAgICBvcGVuKHVybCwgZGF0YSwgZGV2aWNlKSB7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZShkZXZpY2UsIHtcbiAgICAgICAgICAgIG5hbWU6IHVybCxcbiAgICAgICAgICAgIC8vICNpZiBfUFJPRklMRVJcbiAgICAgICAgICAgIHByb2ZpbGVySGludDogVEVYSElOVF9BU1NFVCxcbiAgICAgICAgICAgIC8vICNlbmRpZlxuICAgICAgICAgICAgYWRkcmVzc1U6IGRhdGEuY3ViZW1hcCA/IEFERFJFU1NfQ0xBTVBfVE9fRURHRSA6IEFERFJFU1NfUkVQRUFULFxuICAgICAgICAgICAgYWRkcmVzc1Y6IGRhdGEuY3ViZW1hcCA/IEFERFJFU1NfQ0xBTVBfVE9fRURHRSA6IEFERFJFU1NfUkVQRUFULFxuICAgICAgICAgICAgd2lkdGg6IGRhdGEud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGRhdGEuaGVpZ2h0LFxuICAgICAgICAgICAgZm9ybWF0OiBkYXRhLmZvcm1hdCxcbiAgICAgICAgICAgIGN1YmVtYXA6IGRhdGEuY3ViZW1hcCxcbiAgICAgICAgICAgIGxldmVsczogZGF0YS5sZXZlbHNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGV4dHVyZS51cGxvYWQoKTtcblxuICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEJhc2lzUGFyc2VyIH07XG4iXSwibmFtZXMiOlsiQmFzaXNQYXJzZXIiLCJjb25zdHJ1Y3RvciIsInJlZ2lzdHJ5IiwiZGV2aWNlIiwibWF4UmV0cmllcyIsImxvYWQiLCJ1cmwiLCJjYWxsYmFjayIsImFzc2V0IiwidHJhbnNjb2RlIiwiZGF0YSIsIl9hc3NldCRmaWxlIiwiX2Fzc2V0JGZpbGUkdmFyaWFudHMiLCJfYXNzZXQkZmlsZSR2YXJpYW50cyQiLCJiYXNpc01vZHVsZUZvdW5kIiwiYmFzaXNUcmFuc2NvZGUiLCJpc0dHR1IiLCJmaWxlIiwidmFyaWFudHMiLCJiYXNpcyIsIm9wdCIsIm5hbWUiLCJBc3NldCIsImZldGNoQXJyYXlCdWZmZXIiLCJlcnIiLCJyZXN1bHQiLCJvcGVuIiwidGV4dHVyZSIsIlRleHR1cmUiLCJwcm9maWxlckhpbnQiLCJURVhISU5UX0FTU0VUIiwiYWRkcmVzc1UiLCJjdWJlbWFwIiwiQUREUkVTU19DTEFNUF9UT19FREdFIiwiQUREUkVTU19SRVBFQVQiLCJhZGRyZXNzViIsIndpZHRoIiwiaGVpZ2h0IiwiZm9ybWF0IiwibGV2ZWxzIiwidXBsb2Fk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
