import"../../../core/tracing.js";import{PIXELFORMAT_DEPTHSTENCIL as e,PIXELFORMAT_RGBA32F as t,PIXELFORMAT_RGBA16F as r,pixelFormatByteSizes as a,PIXELFORMAT_A8 as s,PIXELFORMAT_L8 as i,PIXELFORMAT_LA8 as o,PIXELFORMAT_RGB565 as u,PIXELFORMAT_RGBA5551 as l,PIXELFORMAT_RGBA4 as p,PIXELFORMAT_RGB8 as d,PIXELFORMAT_RGBA8 as m,PIXELFORMAT_DXT1 as n,PIXELFORMAT_DXT3 as h,PIXELFORMAT_DXT5 as c,PIXELFORMAT_RGB16F as g,PIXELFORMAT_RGB32F as x,PIXELFORMAT_R32F as f,PIXELFORMAT_DEPTH as y,PIXELFORMAT_111110F as v,PIXELFORMAT_SRGB as T,PIXELFORMAT_SRGBA as w,PIXELFORMAT_ETC1 as b,PIXELFORMAT_ETC2_RGB as U,PIXELFORMAT_ETC2_RGBA as L,PIXELFORMAT_PVRTC_2BPP_RGB_1 as C,PIXELFORMAT_PVRTC_2BPP_RGBA_1 as A,PIXELFORMAT_PVRTC_4BPP_RGB_1 as _,PIXELFORMAT_PVRTC_4BPP_RGBA_1 as F,PIXELFORMAT_ASTC_4x4 as M,PIXELFORMAT_ATC_RGB as P,PIXELFORMAT_ATC_RGBA as D,PIXELFORMAT_BGRA8 as I,ADDRESS_REPEAT as V,ADDRESS_CLAMP_TO_EDGE as E,ADDRESS_MIRRORED_REPEAT as O}from"../constants.js";const R=[];R[s]="",R[i]="r8unorm",R[o]="rg8unorm",R[u]="",R[l]="",R[p]="",R[d]="rgba8unorm",R[m]="rgba8unorm",R[n]="",R[h]="",R[c]="",R[g]="",R[r]="rgba16float",R[x]="",R[t]="rgba32float",R[f]="r32float",R[y]="depth32float",R[e]="depth24plus-stencil8",R[v]="rg11b10ufloat",R[T]="",R[w]="",R[b]="",R[U]="",R[L]="",R[C]="",R[A]="",R[_]="",R[F]="",R[M]="",R[P]="",R[D]="",R[I]="bgra8unorm";const G=[];G[V]="repeat",G[E]="clamp-to-edge",G[O]="mirror-repeat";class N{constructor(e){this.gpuTexture=void 0,this.view=void 0,this.sampler=void 0,this.descr=void 0,this.format=void 0,this.texture=e,this.format=R[e.format],this.create(e.device)}create(t){const r=this.texture,a=t.wgpu;let s;this.descr={size:{width:r.width,height:r.height,depthOrArrayLayers:r.cubemap?6:1},format:this.format,mipLevelCount:1,sampleCount:1,dimension:r.volume?"3d":"2d",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC},this.gpuTexture=a.createTexture(this.descr),this.texture.format===e&&(s={format:"depth24plus",aspect:"depth-only"}),this.view=this.createView(s)}destroy(e){}getView(e){return this.uploadImmediate(e,this.texture),this.view}createView(e){var t,r,a,s,i,o,u;const l=null!=e?e:{},p=this.descr,d=this.texture,m={format:null!=(t=l.format)?t:p.format,dimension:null!=(r=l.dimension)?r:d.cubemap?"cube":d.volume?"3d":"2d",aspect:null!=(a=l.aspect)?a:"all",baseMipLevel:null!=(s=l.baseMipLevel)?s:0,mipLevelCount:null!=(i=l.mipLevelCount)?i:p.mipLevelCount,baseArrayLayer:null!=(o=l.baseArrayLayer)?o:0,arrayLayerCount:null!=(u=l.arrayLayerCount)?u:p.depthOrArrayLayers};return this.gpuTexture.createView(m)}getSampler(a){if(!this.sampler){const s=this.texture,i={addressModeU:G[s.addressU],addressModeV:G[s.addressV],addressModeW:G[s.addressW]};this.texture.format===t||this.texture.format===e||this.texture.format===r?(i.magFilter="nearest",i.minFilter="nearest",i.mipmapFilter="nearest"):s.compareOnRead?(i.compare="less",i.magFilter="linear",i.minFilter="linear"):(i.magFilter="linear",i.minFilter="linear",i.mipmapFilter="linear"),this.sampler=a.wgpu.createSampler(i)}return this.sampler}loseContext(){}uploadImmediate(e,t){(t._needsUpload||t._needsMipmapsUpload)&&(this.uploadData(e),t._needsUpload=!1,t._needsMipmapsUpload=!1)}uploadData(e){const t=this.texture,r=e.wgpu;if(this.texture.cubemap)return;const a=t._levels[0];a&&(a instanceof ImageBitmap?r.queue.copyExternalImageToTexture({source:a},{texture:this.gpuTexture},this.descr.size):ArrayBuffer.isView(a)&&this.uploadTypedArrayData(r,a))}uploadTypedArrayData(e,t){var r;const s=this.texture,i={texture:this.gpuTexture,mipLevel:0},o=null!=(r=a[s.format])?r:0,u=s.width*o;s.height;const l={offset:0,bytesPerRow:u,rowsPerImage:s.height},p={width:s.width,height:s.height,depthOrArrayLayers:1};e.queue.writeTexture(i,t,l,p)}}export{N as WebgpuTexture};
