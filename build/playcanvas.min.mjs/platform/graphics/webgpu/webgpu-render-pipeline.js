import"../../../core/tracing.js";import{WebgpuVertexBufferLayout as e}from"./webgpu-vertex-buffer-layout.js";const t=["point-list","line-list",void 0,"line-strip","triangle-list","triangle-strip",void 0],r=["add","subtract","reverse-subtract","min","max"],a=["zero","one","src","one-minus-src","dst","one-minus-dst","src-alpha","src-alpha-saturated","one-minus-src-alpha","dst-alpha","one-minus-dst-alpha","constant","one-minus-constant"],i=["never","less","equal","less-equal","greater","not-equal","greater-equal","always"],o=["none","back","front"],n=["keep","zero","replace","increment-clamp","increment-wrap","decrement-clamp","decrement-wrap","invert"],l=[];class s{constructor(t){this.device=t,this.vertexBufferLayout=new e,this.cache=new Map}get(e,r,a,i,o,n,l,s,c,p,u,d){const h=this.getKey(e,r,a,i,o,n,l,s,c,p,u,d);let m=this.cache.get(h);if(!m){const g=t[e.type],f=this.getPipelineLayout(n),y=this.vertexBufferLayout.get(r,a);m=this.create(g,i,o,f,l,s,y,c,p,u,d),this.cache.set(h,m)}return m}getKey(e,t,r,a,i,o,n,l,s,c,p,u){let d="";for(let e=0;e<o.length;e++)d+=o[e].key;const h=this.vertexBufferLayout.getKey(t,r),m=i.impl.key,g=c?p.key+u.key:"";return h+a.impl.vertexCode+a.impl.fragmentCode+m+e.type+d+n.key+l.key+s+g}getPipelineLayout(e){e.forEach((e=>{l.push(e.bindGroupLayout)}));const t={bindGroupLayouts:l},r=this.device.wgpu.createPipelineLayout(t);return l.length=0,r}getBlend(e){let t;return e.blend&&(t={color:{operation:r[e.colorOp],srcFactor:a[e.colorSrcFactor],dstFactor:a[e.colorDstFactor]},alpha:{operation:r[e.alphaOp],srcFactor:a[e.alphaSrcFactor],dstFactor:a[e.alphaDstFactor]}}),t}getDepthStencil(e,t,r,a,o){let l;const{depth:s,stencil:c}=t;return(s||c)&&(l={format:t.impl.depthFormat},s?(l.depthWriteEnabled=e.write,l.depthCompare=i[e.func]):(l.depthWriteEnabled=!1,l.depthCompare="always"),c&&r&&(l.stencilReadMas=a.readMask,l.stencilWriteMask=a.writeMask,l.stencilFront={compare:i[a.func],failOp:n[a.fail],passOp:n[a.zpass],depthFailOp:n[a.zfail]},l.stencilBack={compare:i[o.func],failOp:n[o.fail],passOp:n[o.zpass],depthFailOp:n[o.zfail]})),l}create(e,t,r,a,i,n,l,s,c,p,u){const d=this.device.wgpu,h=t.impl,m={vertex:{module:h.getVertexShaderModule(),entryPoint:h.vertexEntryPoint,buffers:l},fragment:{module:h.getFragmentShaderModule(),entryPoint:h.fragmentEntryPoint,targets:[]},primitive:{topology:e,frontFace:"ccw",cullMode:o[s]},depthStencil:this.getDepthStencil(n,r,c,p,u),multisample:{count:r.samples},layout:a},g=r.impl.colorFormat;if(g){let e=0;i.redWrite&&(e|=GPUColorWrite.RED),i.greenWrite&&(e|=GPUColorWrite.GREEN),i.blueWrite&&(e|=GPUColorWrite.BLUE),i.alphaWrite&&(e|=GPUColorWrite.ALPHA),m.fragment.targets.push({format:g,writeMask:e,blend:this.getBlend(i)})}return d.createRenderPipeline(m)}}export{s as WebgpuRenderPipeline};
