import"../../../core/tracing.js";import{ShaderProcessor as e}from"../shader-processor.js";class r{constructor(e){this._vertexCode=void 0,this._fragmentCode=void 0,this.shader=e;e.definition.processingOptions&&this.process()}destroy(e){this._vertexCode=null,this._fragmentCode=null}process(){const r=this.shader,t=e.run(r.device,r.definition,r);this._vertexCode=this.transpile(t.vshader,"vertex",r.definition.vshader),this._fragmentCode=this.transpile(t.fshader,"fragment",r.definition.fshader),this._vertexCode&&this._fragmentCode?r.ready=!0:r.failed=!0,r.meshUniformBufferFormat=t.meshUniformBufferFormat,r.meshBindGroupFormat=t.meshBindGroupFormat}transpile(e,r,t){try{const t=this.shader.device.glslang.compileGLSL(e,r);return this.shader.device.twgsl.convertSpirV2WGSL(t)}catch(s){console.error(`Failed to transpile webgl ${r} shader [${this.shader.label}] to WebGPU: [${s.message}]`,{processed:e,original:t,shader:this.shader})}}get vertexCode(){return this._vertexCode}get fragmentCode(){return this._fragmentCode}loseContext(){}restoreContext(e,r){}}export{r as WebgpuShader};
