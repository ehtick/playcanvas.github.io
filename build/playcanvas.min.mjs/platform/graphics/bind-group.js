import"../../core/debug.js";import{UNIFORM_BUFFER_DEFAULT_SLOT_NAME as t}from"./constants.js";let e=0;class s{constructor(s,r,i){this.renderVersionUpdated=-1,this.uniformBuffers=void 0,this.uniformBufferOffsets=[],this.id=e++,this.device=s,this.format=r,this.dirty=!0,this.impl=s.createBindGroupImpl(this),this.textures=[],this.uniformBuffers=[],this.defaultUniformBuffer=i,i&&this.setUniformBuffer(t,i)}destroy(){this.impl.destroy(),this.impl=null,this.format=null,this.defaultUniformBuffer=null}setUniformBuffer(t,e){const s=this.format.bufferFormatsMap.get(t);this.uniformBuffers[s]!==e&&(this.uniformBuffers[s]=e,this.dirty=!0)}setTexture(t,e){const s=this.format.textureFormatsMap.get(t);this.textures[s]!==e?(this.textures[s]=e,this.dirty=!0):this.renderVersionUpdated<e.renderVersionDirty&&(this.dirty=!0)}update(){const t=this.format.textureFormats;for(let e=0;e<t.length;e++){const s=t[e],r=s.scopeId.value;this.setTexture(s.name,r)}this.uniformBufferOffsets.length=this.uniformBuffers.length;for(let t=0;t<this.uniformBuffers.length;t++){const e=this.uniformBuffers[t];this.uniformBufferOffsets[t]=e.offset,this.renderVersionUpdated<e.renderVersionDirty&&(this.dirty=!0)}this.dirty&&(this.dirty=!1,this.renderVersionUpdated=this.device.renderVersion,this.impl.update(this))}}export{s as BindGroup};
