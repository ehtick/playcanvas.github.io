import"../../core/debug.js";import{UNIFORMTYPE_FLOAT as t,UNIFORMTYPE_VEC2 as s,UNIFORMTYPE_VEC3 as o,UNIFORMTYPE_VEC4 as e,UNIFORMTYPE_INT as i,UNIFORMTYPE_IVEC2 as r,UNIFORMTYPE_IVEC3 as n,UNIFORMTYPE_IVEC4 as a,UNIFORMTYPE_MAT2 as f,UNIFORMTYPE_MAT3 as l,UNIFORMTYPE_FLOATARRAY as c,UNIFORMTYPE_VEC2ARRAY as h,UNIFORMTYPE_VEC3ARRAY as g}from"./constants.js";import{DynamicBufferAllocation as u}from"./dynamic-buffers.js";const m=[];m[t]=function(t,s,o){t.storageFloat32[o]=s},m[s]=(t,s,o)=>{const e=t.storageFloat32;e[o]=s[0],e[o+1]=s[1]},m[o]=(t,s,o)=>{const e=t.storageFloat32;e[o]=s[0],e[o+1]=s[1],e[o+2]=s[2]},m[e]=(t,s,o)=>{const e=t.storageFloat32;e[o]=s[0],e[o+1]=s[1],e[o+2]=s[2],e[o+3]=s[3]},m[i]=function(t,s,o){t.storageInt32[o]=s},m[r]=function(t,s,o){const e=t.storageInt32;e[o]=s[0],e[o+1]=s[1]},m[n]=function(t,s,o){const e=t.storageInt32;e[o]=s[0],e[o+1]=s[1],e[o+2]=s[2]},m[a]=function(t,s,o){const e=t.storageInt32;e[o]=s[0],e[o+1]=s[1],e[o+2]=s[2],e[o+3]=s[3]},m[f]=(t,s,o)=>{const e=t.storageFloat32;e[o]=s[0],e[o+1]=s[1],e[o+4]=s[2],e[o+5]=s[3],e[o+8]=s[4],e[o+9]=s[5]},m[l]=(t,s,o)=>{const e=t.storageFloat32;e[o]=s[0],e[o+1]=s[1],e[o+2]=s[2],e[o+4]=s[3],e[o+5]=s[4],e[o+6]=s[5],e[o+8]=s[6],e[o+9]=s[7],e[o+10]=s[8]},m[c]=function(t,s,o,e){const i=t.storageFloat32;for(let t=0;t<e;t++)i[o+4*t]=s[t]},m[h]=(t,s,o,e)=>{const i=t.storageFloat32;for(let t=0;t<e;t++)i[o+4*t]=s[2*t],i[o+4*t+1]=s[2*t+1]},m[g]=(t,s,o,e)=>{const i=t.storageFloat32;for(let t=0;t<e;t++)i[o+4*t]=s[3*t],i[o+4*t+1]=s[3*t+1],i[o+4*t+2]=s[3*t+2]};class d{constructor(t,s,o=!0){if(this.device=void 0,this.persistent=void 0,this.allocation=void 0,this.storageFloat32=void 0,this.storageInt32=void 0,this.renderVersionDirty=0,this.device=t,this.format=s,this.persistent=o,o){this.impl=t.createUniformBufferImpl(this);const o=new ArrayBuffer(s.byteSize);this.assignStorage(new Int32Array(o)),t._vram.ub+=this.format.byteSize}else this.allocation=new u}destroy(){if(this.persistent){const t=this.device;this.impl.destroy(t),t._vram.ub-=this.format.byteSize}}get offset(){return this.persistent?0:this.allocation.offset}assignStorage(t){this.storageInt32=t,this.storageFloat32=new Float32Array(t.buffer,t.byteOffset,t.byteLength/4)}loseContext(){var t;null==(t=this.impl)||t.loseContext()}setUniform(t){const s=t.offset,o=t.scopeId.value;if(null!=o){const e=m[t.updateType];e?e(this,o,s,t.count):this.storageFloat32.set(o,s)}}set(t){const s=this.format.map.get(t);s&&this.setUniform(s)}update(){const t=this.persistent;if(!t){const t=this.allocation,s=t.gpuBuffer;this.device.dynamicBuffers.alloc(t,this.format.byteSize),this.assignStorage(t.storage),s!==t.gpuBuffer&&(this.renderVersionDirty=this.device.renderVersion)}const s=this.format.uniforms;for(let t=0;t<s.length;t++)this.setUniform(s[t]);t?this.impl.unlock(this):(this.storageFloat32=null,this.storageInt32=null)}}export{d as UniformBuffer};
