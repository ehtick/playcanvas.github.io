import"../../core/debug.js";import{math as e}from"../../core/math/math.js";let i=0,t=0;class s{constructor(e){this.device=void 0,this.device=e}}class f{constructor(){this.gpuBuffer=void 0,this.stagingBuffer=void 0,this.offset=void 0,this.size=void 0}}class u{constructor(){this.storage=void 0,this.gpuBuffer=void 0,this.offset=void 0}}class r{constructor(e,i,t){this.bufferSize=void 0,this.gpuBuffers=[],this.stagingBuffers=[],this.usedBuffers=[],this.activeBuffer=null,this.device=e,this.bufferSize=i,this.bufferAlignment=t}destroy(){this.gpuBuffers.forEach((e=>{e.destroy(this.device)})),this.gpuBuffers=null,this.stagingBuffers.forEach((e=>{e.destroy(this.device)})),this.stagingBuffers=null,this.usedBuffers=null,this.activeBuffer=null}alloc(s,u){if(this.activeBuffer){const i=e.roundUp(this.activeBuffer.size,this.bufferAlignment);this.bufferSize-i<u&&this.scheduleSubmit()}if(!this.activeBuffer){let e=this.gpuBuffers.pop();e||(t++,console.log("allocating new gpu buffer ",t),e=this.createBuffer(this.device,this.bufferSize,!1));let s=this.stagingBuffers.pop();s||(i++,console.log("allocating new STAGING buffer",i),s=this.createBuffer(this.device,this.bufferSize,!0)),this.activeBuffer=new f,this.activeBuffer.stagingBuffer=s,this.activeBuffer.gpuBuffer=e,this.activeBuffer.offset=0,this.activeBuffer.size=0}const r=this.activeBuffer,h=e.roundUp(r.size,this.bufferAlignment);s.gpuBuffer=r.gpuBuffer,s.offset=h,s.storage=r.stagingBuffer.alloc(h,u),r.size=h+u}scheduleSubmit(){this.activeBuffer&&(this.usedBuffers.push(this.activeBuffer),this.activeBuffer=null)}submit(){this.scheduleSubmit()}}export{s as DynamicBuffer,u as DynamicBufferAllocation,r as DynamicBuffers};
