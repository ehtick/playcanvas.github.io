import"../core/tracing.js";import{TEXTUREPROJECTION_OCTAHEDRAL as e,TEXTUREPROJECTION_CUBE as t,FILTER_NEAREST as r}from"./constants.js";import{Vec3 as n}from"../math/vec3.js";import{random as s}from"../math/random.js";import{createShaderFromCode as o}from"./program-lib/utils.js";import{drawQuadWithShader as a}from"./simple-post-effect.js";import{ChunkUtils as i}from"./program-lib/chunk-utils.js";import{shaderChunks as c}from"./program-lib/chunks/chunks.js";import{RenderTarget as h}from"./render-target.js";import{GraphicsDevice as l}from"./graphics-device.js";import{getProgramLibrary as m}from"./program-library.js";import{Texture as p}from"./texture.js";import{DeviceCache as u}from"./device-cache.js";const d=r=>{switch(r){case t:return"Cubemap";case e:return"Octahedral";default:return"Equirect"}},f=(e,t,r)=>{if(e<=0)t[r+0]=0,t[r+1]=0,t[r+2]=0,t[r+3]=0;else if(e>=1)t[r+0]=255,t[r+1]=0,t[r+2]=0,t[r+3]=0;else{let n=1*e%1,s=255*e%1,o=65025*e%1;const a=16581375*e%1;n-=s/255,s-=o/255,o-=a/255,t[r+0]=Math.min(255,Math.floor(256*n)),t[r+1]=Math.min(255,Math.floor(256*s)),t[r+2]=Math.min(255,Math.floor(256*o)),t[r+3]=Math.min(255,Math.floor(256*a))}},g=(e,t,r,n)=>{const s=2*r*Math.PI,o=Math.pow(1-t,1/(n+1)),a=Math.sqrt(1-o*o);e.set(Math.cos(s)*a,Math.sin(s)*a,o).normalize()},M=(e,t,r)=>{const n=2*r*Math.PI,s=Math.sqrt(1-t),o=Math.sqrt(t);e.set(Math.cos(n)*o,Math.sin(n)*o,s).normalize()},v=(e,t,r,n)=>{const s=2*r*Math.PI,o=Math.sqrt((1-t)/(1+(n*n-1)*t)),a=Math.sqrt(1-o*o);e.set(Math.cos(s)*a,Math.sin(s)*a,o).normalize()},w=(e,t)=>{const r=e*t,n=t/(1-e*e+r*r);return n*n*(1/Math.PI)},x={16:{2:26,8:20,32:17,128:16,512:16},32:{2:53,8:40,32:34,128:32,512:32},128:{2:214,8:163,32:139,128:130,512:128},1024:{2:1722,8:1310,32:1114,128:1041,512:1025}},_=(e,t,r)=>{const o=r/e,a=1-Math.log2(t)/11,i=a*a,c=new n,h=new n,l=new n(0,0,1),m=[],p=((e,t)=>{const r=x[e];return r&&r[t]||e})(e,t);for(let e=0;e<p;++e){v(c,e/p,s.radicalInverse(e),i);const t=c.z;if(h.set(c.x,c.y,c.z).mulScalar(2*t).sub(l),h.z>0){const e=w(Math.min(1,t),i)/4+.001,r=.5*Math.log2(o/e);m.push(h.x,h.y,h.z,r)}}for(;m.length<4*e;)m.push(0,0,0,0);return m},$=(e,t,n)=>{const s=(e=>{const t=e.length,r=Math.min(t,512),n=Math.ceil(t/r),s=new Uint8Array(r*n*4);let o=0;for(let r=0;r<t;++r)f(.5*e[4*r+0]+.5,s,o+0),f(.5*e[4*r+1]+.5,s,o+4),f(.5*e[4*r+2]+.5,s,o+8),f(e[4*r+3]/8,s,o+12),o+=16;return{width:r,height:n,data:s}})(n);return new p(e,{name:t,width:s.width,height:s.height,mipmaps:!1,minFilter:r,magFilter:r,levels:[s.data]})};class b{constructor(e=!0){this.map=new Map,this.destroyContent=e}destroy(){this.destroyContent&&this.map.forEach(((e,t)=>{e.destroy()}))}get(e,t){if(!this.map.has(e)){const r=t();return this.map.set(e,r),r}return this.map.get(e)}}const S=new b(!1),P=new u,j=(e,t,r)=>P.get(e,(()=>new b)).get(t,(()=>$(e,t,S.get(t,r)))),y=(e,t,r)=>j(e,`lambert-samples-${t}-${r}`,(()=>((e,t)=>{const r=t/e,o=new n,a=[];for(let t=0;t<e;++t){M(o,t/e,s.radicalInverse(t));const n=o.z/Math.PI,i=.5*Math.log2(r/n);a.push(o.x,o.y,o.z,i)}return a})(t,r))),C=(e,t,r)=>j(e,`phong-samples-${t}-${r}`,(()=>((e,t)=>{const r=new n,o=[];for(let n=0;n<e;++n)g(r,n/e,s.radicalInverse(n),t),o.push(r.x,r.y,r.z,0);return o})(t,r))),E=(e,t,r,n)=>j(e,`ggx-samples-${t}-${r}-${n}`,(()=>_(t,r,n))),U="\nattribute vec2 vertex_position;\n\nuniform vec4 uvMod;\n\nvarying vec2 vUv0;\n\nvoid main(void) {\n    gl_Position = vec4(vertex_position, 0.5, 1.0);\n    vUv0 = (vertex_position.xy * 0.5 + 0.5) * uvMod.xy + uvMod.zw;\n}\n";function z(e,t,r={}){var n;e instanceof l&&(e=arguments[1],t=arguments[2],r={},void 0!==arguments[3]&&(r.specularPower=arguments[3]),void 0!==arguments[4]&&(r.numSamples=arguments[4]));const s={none:"reproject",lambert:"prefilterSamplesUnweighted",phong:"prefilterSamplesUnweighted",ggx:"prefilterSamples"},p=r.hasOwnProperty("specularPower")?r.specularPower:1,u=r.hasOwnProperty("face")?r.face:null,f=r.hasOwnProperty("distribution")?r.distribution:1===p?"none":"phong",g=s[f]||"reproject",M=i.decodeFunc(e.encoding),v=i.encodeFunc(t.encoding),w=`sample${d(e.projection)}`,x=`getDirection${d(t.projection)}`,_=r.hasOwnProperty("numSamples")?r.numSamples:1024,$=`${g}_${M}_${v}_${w}_${x}_${_}`,b=e.device;let S=m(b)._cache[$];if(!S){const e=`#define PROCESS_FUNC ${g}\n#define DECODE_FUNC ${M}\n#define ENCODE_FUNC ${v}\n#define SOURCE_FUNC ${w}\n#define TARGET_FUNC ${x}\n#define NUM_SAMPLES ${_}\n#define NUM_SAMPLES_SQRT ${Math.round(Math.sqrt(_)).toFixed(1)}\n`+(b.extTextureLod?"#define SUPPORTS_TEXLOD\n":"");let t="";b.webgl2||(t="#extension GL_OES_standard_derivatives: enable\n",b.extTextureLod&&(t+="#extension GL_EXT_shader_texture_lod: enable\n\n")),S=o(b,U,`${e}\n${c.reprojectPS}`,$,!1,t)}const P=b.scope.resolve(e.cubemap?"sourceCube":"sourceTex");P.setValue(e);const j=b.scope.resolve("params"),z=b.scope.resolve("params2"),O=b.scope.resolve("uvMod");if(null!=(n=r)&&n.seamPixels){const e=r.seamPixels,n=(r.rect?r.rect.z:t.width)-2*e,s=(r.rect?r.rect.w:t.height)-2*e;O.setValue([(n+2*e)/n,(s+2*e)/s,-e/n,-e/s])}else O.setValue([1,1,0,0]);const T=[0,p,e.fixCubemapSeams?1/e.width:0,t.fixCubemapSeams?1/t.width:0],F=[t.width*t.height*(t.cubemap?6:1),e.width*e.height*(e.cubemap?6:1)];if(g.startsWith("prefilterSamples")){const t=e.width*e.height*(e.cubemap?6:1),r="ggx"===f?E(b,_,p,t):"lambert"===f?y(b,_,t):C(b,_,p);b.scope.resolve("samplesTex").setValue(r),b.scope.resolve("samplesTexInverseSize").setValue([1/r.width,1/r.height])}for(let e=0;e<(t.cubemap?6:1);e++)if(null===u||e===u){var I;const n=new h({colorBuffer:t,face:e,depth:!1});T[0]=e,j.setValue(T),z.setValue(F),a(b,n,S,null==(I=r)?void 0:I.rect),n.destroy()}}export{z as reprojectTexture};
