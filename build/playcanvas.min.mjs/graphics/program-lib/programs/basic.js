import{SEMANTIC_BLENDWEIGHT as e,SEMANTIC_BLENDINDICES as r,SEMANTIC_COLOR as o,SEMANTIC_TEXCOORD0 as n,SEMANTIC_POSITION as t}from"../../constants.js";import{shaderChunks as s}from"../chunks/chunks.js";import{SHADER_DEPTH as a,SHADER_PICK as i}from"../../../scene/constants.js";import{vertexIntro as v,skinCode as f,begin as l,end as p,fragmentIntro as c,fogCode as g}from"./common.js";const _={generateKey:function(e){let r="basic";return e.fog&&(r+="_fog"),e.alphaTest&&(r+="_atst"),e.vertexColors&&(r+="_vcol"),e.diffuseMap&&(r+="_diff"),e.skin&&(r+="_skin"),e.screenSpace&&(r+="_ss"),e.useInstancing&&(r+="_inst"),e.useMorphPosition&&(r+="_morphp"),e.useMorphNormal&&(r+="_morphn"),e.useMorphTextureBased&&(r+="_morpht"),r+="_"+e.pass,r},createShaderDefinition:function(_,u){const m={vertex_position:t};u.skin&&(m.vertex_boneWeights=e,m.vertex_boneIndices=r),u.vertexColors&&(m.vertex_color=o),u.diffuseMap&&(m.vertex_texCoord0=n);let d=v(_,"BasicShader",u.pass);d+=s.transformDeclVS,u.skin?(d+=f(_),d+=s.transformSkinnedVS):d+=s.transformVS,u.vertexColors&&(d+="attribute vec4 vertex_color;\n",d+="varying vec4 vColor;\n"),u.diffuseMap&&(d+="attribute vec2 vertex_texCoord0;\n",d+="varying vec2 vUv0;\n"),u.pass===a&&(d+="varying float vDepth;\n",d+="#ifndef VIEWMATRIX\n",d+="#define VIEWMATRIX\n",d+="uniform mat4 matrix_view;\n",d+="#endif\n",d+="#ifndef CAMERAPLANES\n",d+="#define CAMERAPLANES\n",d+="uniform vec4 camera_params;\n\n",d+="#endif\n"),d+=l(),d+="   gl_Position = getPosition();\n",u.pass===a&&(d+="    vDepth = -(matrix_view * vec4(getWorldPosition(),1.0)).z * camera_params.x;\n"),u.vertexColors&&(d+="    vColor = vertex_color;\n"),u.diffuseMap&&(d+="    vUv0 = vertex_texCoord0;\n"),d+=p();const x=d;d=c(_,"BasicMaterial",u.pass),u.vertexColors?d+="varying vec4 vColor;\n":d+="uniform vec4 uColor;\n",u.diffuseMap&&(d+="varying vec2 vUv0;\n",d+="uniform sampler2D texture_diffuseMap;\n"),u.fog&&(d+=g(u.fog)),u.alphaTest&&(d+=s.alphaTestPS),u.pass===a&&(d+="varying float vDepth;\n",d+=s.packDepthPS),d+=l(),u.vertexColors?d+="    gl_FragColor = vColor;\n":d+="    gl_FragColor = uColor;\n",u.diffuseMap&&(d+="    gl_FragColor *= texture2D(texture_diffuseMap, vUv0);\n"),u.alphaTest&&(d+="   alphaTest(gl_FragColor.a);\n"),u.pass!==i&&(u.pass===a?d+="    gl_FragColor = packFloat(vDepth);\n":u.fog&&(d+="   glFragColor.rgb = addFog(gl_FragColor.rgb);\n")),d+=p();return{attributes:m,vshader:x,fshader:d}}};export{_ as basic};
