import{Vec3 as t}from"../math/vec3.js";import{PROJECTION_PERSPECTIVE as e}from"../scene/constants.js";const n=[new t,new t,new t,new t,new t,new t,new t,new t];class s{constructor(){this.planes=[];for(let t=0;t<6;t++)this.planes[t]=[]}setFromMat4(t){const e=t.data;let n;const s=this.planes;n=s[0],n[0]=e[3]-e[0],n[1]=e[7]-e[4],n[2]=e[11]-e[8],n[3]=e[15]-e[12];let r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=r,n[1]/=r,n[2]/=r,n[3]/=r,n=s[1],n[0]=e[3]+e[0],n[1]=e[7]+e[4],n[2]=e[11]+e[8],n[3]=e[15]+e[12],r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]),n[0]/=r,n[1]/=r,n[2]/=r,n[3]/=r,n=s[2],n[0]=e[3]+e[1],n[1]=e[7]+e[5],n[2]=e[11]+e[9],n[3]=e[15]+e[13],r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]),n[0]/=r,n[1]/=r,n[2]/=r,n[3]/=r,n=s[3],n[0]=e[3]-e[1],n[1]=e[7]-e[5],n[2]=e[11]-e[9],n[3]=e[15]-e[13],r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]),n[0]/=r,n[1]/=r,n[2]/=r,n[3]/=r,n=s[4],n[0]=e[3]-e[2],n[1]=e[7]-e[6],n[2]=e[11]-e[10],n[3]=e[15]-e[14],r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]),n[0]/=r,n[1]/=r,n[2]/=r,n[3]/=r,n=s[5],n[0]=e[3]+e[2],n[1]=e[7]+e[6],n[2]=e[11]+e[10],n[3]=e[15]+e[14],r=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]),n[0]/=r,n[1]/=r,n[2]/=r,n[3]/=r}containsPoint(t){let e,n;for(e=0;e<6;e++)if(n=this.planes[e],n[0]*t.x+n[1]*t.y+n[2]*t.z+n[3]<=0)return!1;return!0}containsSphere(t){let e,n,s=0;const r=t.radius,a=t.center,o=a.x,i=a.y,c=a.z,h=this.planes;let l;for(n=0;n<6;n++){if(l=h[n],e=l[0]*o+l[1]*i+l[2]*c+l[3],e<=-r)return 0;e>r&&s++}return 6===s?2:1}static getPoints(t,s,r){s=s||t._nearClip,r=r||t._farClip;const a=t._fov*Math.PI/180;let o=t._projection===e?Math.tan(a/2)*s:t._orthoHeight,i=o*t._aspectRatio;const c=n;return c[0].x=i,c[0].y=-o,c[0].z=-s,c[1].x=i,c[1].y=o,c[1].z=-s,c[2].x=-i,c[2].y=o,c[2].z=-s,c[3].x=-i,c[3].y=-o,c[3].z=-s,t._projection===e&&(o=Math.tan(a/2)*r,i=o*t._aspectRatio),c[4].x=i,c[4].y=-o,c[4].z=-r,c[5].x=i,c[5].y=o,c[5].z=-r,c[6].x=-i,c[6].y=o,c[6].z=-r,c[7].x=-i,c[7].y=-o,c[7].z=-r,c}}export{s as Frustum};
