var t="\nuniform float material_refractionIndex;\n\nvec3 refract2(vec3 viewVec, vec3 Normal, float IOR) {\n\t\tfloat vn = dot(viewVec, Normal);\n\t\tfloat k = 1.0 - IOR * IOR * (1.0 - vn * vn);\n\t\tvec3 refrVec = IOR * viewVec - (IOR * vn + sqrt(k)) * Normal;\n\t\treturn refrVec;\n}\n\nvoid addRefraction() {\n\t\t// use same reflection code with refraction vector\n\t\tvec3 tmpDir = dReflDirW;\n\t\tvec4 tmpRefl = dReflection;\n\t\tdReflDirW = refract2(-dViewDirW, dNormalW, material_refractionIndex);\n\t\tdReflection = vec4(0);\n\t\taddReflection();\n\t\tdDiffuseLight = mix(dDiffuseLight, dReflection.rgb * dAlbedo, dTransmission);\n\t\tdReflection = tmpRefl;\n\t\tdReflDirW = tmpDir;\n}\n";export{t as default};
