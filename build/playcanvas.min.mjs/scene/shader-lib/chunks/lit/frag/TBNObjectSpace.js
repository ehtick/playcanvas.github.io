var t="\nvoid getTBN() {\n\n\t\tvec3 B = cross(dVertexNormalW, vObjectSpaceUpW);\n\t\tvec3 T = cross(dVertexNormalW, B);\n\n\t\tif (dot(B,B)==0.0) // deal with case when vObjectSpaceUpW dVertexNormalW are parallel\n\t\t{\n\t\t\t\tfloat major=max(max(dVertexNormalW.x, dVertexNormalW.y),dVertexNormalW.z);\n\n\t\t\t\tif (dVertexNormalW.x==major)\n\t\t\t\t{\n\t\t\t\t\t\tB=cross(dVertexNormalW, vec3(0,1,0));\n\t\t\t\t\t\tT=cross(dVertexNormalW, B);\n\t\t\t\t}\n\t\t\t\telse if (dVertexNormalW.y==major)\n\t\t\t\t{\n\t\t\t\t\t\tB=cross(dVertexNormalW, vec3(0,0,1));\n\t\t\t\t\t\tT=cross(dVertexNormalW, B);\n\t\t\t\t}\n\t\t\t\telse if (dVertexNormalW.z==major)\n\t\t\t\t{\n\t\t\t\t\t\tB=cross(dVertexNormalW, vec3(1,0,0));\n\t\t\t\t\t\tT=cross(dVertexNormalW, B);\n\t\t\t\t}\n\t\t}\n\n\t\tdTBN = mat3(normalize(T), normalize(B), normalize(dVertexNormalW));\n}\n";export{t as default};
