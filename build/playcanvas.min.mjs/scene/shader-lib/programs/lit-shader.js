import{SEMANTIC_POSITION as t,SEMANTIC_ATTR12 as e,SEMANTIC_ATTR13 as i,SEMANTIC_ATTR14 as n,SEMANTIC_ATTR15 as a,SEMANTIC_NORMAL as r,SEMANTIC_TANGENT as s,SEMANTIC_COLOR as d,SEMANTIC_ATTR8 as o,SEMANTIC_ATTR9 as l,SEMANTIC_ATTR10 as p,SEMANTIC_ATTR11 as h,SEMANTIC_BLENDWEIGHT as c,SEMANTIC_BLENDINDICES as g,PIXELFORMAT_RGBA8 as u,SHADERTAG_MATERIAL as S,SEMANTIC_TEXCOORD0 as f,SEMANTIC_TEXCOORD1 as m}from"../../../platform/graphics/constants.js";import{shaderChunks as _}from"../chunks/chunks.js";import{ChunkUtils as v}from"../chunk-utils.js";import{SPRITE_RENDERMODE_SLICED as A,SPRITE_RENDERMODE_TILED as P,LIGHTSHAPE_SPHERE as D,LIGHTSHAPE_DISK as b,LIGHTSHAPE_RECT as L,SHADER_DEPTH as C,SHADOW_VSM32 as w,SHADOW_PCF1 as E,SHADOW_PCF3 as N,SHADOW_PCSS as W,LIGHTTYPE_OMNI as M,SHADOW_VSM8 as T,LIGHTSHAPE_PUNCTUAL as y,LIGHTTYPE_DIRECTIONAL as F,LIGHTTYPE_SPOT as R,FRESNEL_SCHLICK as x,SPECOCC_GLOSSDEPENDENT as I,SPECOCC_AO as V,SHADOW_PCF5 as O,SHADOW_VSM16 as k,SPECULAR_PHONG as $,shadowTypeToString as G,LIGHTFALLOFF_LINEAR as B,BLEND_NORMAL as H,BLEND_PREMULTIPLIED as U,BLEND_ADDITIVEALPHA as X,SHADER_PICK as j}from"../../constants.js";import{LightsBuffer as z}from"../../lighting/lights-buffer.js";import{ShaderPass as Y}from"../../shader-pass.js";import{skinCode as q,begin as Q,end as K,gammaCode as Z,tonemapCode as J,fogCode as tt}from"./common.js";import"../../../core/debug.js";import{ShaderUtils as et}from"../../../platform/graphics/shader-utils.js";import{ChunkBuilder as it}from"../chunk-builder.js";const nt={vertex_normal:r,vertex_tangent:s,vertex_texCoord0:f,vertex_texCoord1:m,vertex_color:d,vertex_boneWeights:c,vertex_boneIndices:g},at={vVertexColor:"vec4",vPositionW:"vec3",vNormalV:"vec3",vNormalW:"vec3",vTangentW:"vec3",vBinormalW:"vec3",vObjectSpaceUpW:"vec3",vUv0:"vec2",vUv1:"vec2"};class rt{constructor(e,i){if(this.device=e,this.options=i,this.attributes={vertex_position:t},i.chunks){this.chunks={};const t=i.chunks;for(const e in _)if(t.hasOwnProperty(e)){const i=t[e];for(const t in nt)nt.hasOwnProperty(t)&&i.indexOf(t)>=0&&(this.attributes[t]=nt[t]);this.chunks[e]=i}else this.chunks[e]=_[e]}else this.chunks=_;this.shaderPassInfo=Y.get(this.device).getByIndex(i.pass),this.shadowPass=this.shaderPassInfo.isShadow,this.lighting=i.lights.length>0||i.dirLightMapEnabled||i.clusteredLightingEnabled,this.reflections=!!i.reflectionSource,this.needsNormal=this.lighting||this.reflections||i.useSpecular||i.ambientSH||i.heightMapEnabled||i.enableGGXSpecular||i.clusteredLightingEnabled&&!this.shadowPass||i.clearCoatNormalMapEnabled,this.needsNormal=this.needsNormal&&!this.shadowPass,this.needsSceneColor=i.useDynamicRefraction,this.needsScreenSize=i.useDynamicRefraction,this.needsTransforms=i.useDynamicRefraction,this.varyings="",this.varyingDefines="",this.vshader=null,this.frontendDecl=null,this.frontendCode=null,this.frontendFunc=null,this.lightingUv=null,this.defines=[],this.fshader=null}_vsAddBaseCode(t,e,i){return t+=e.baseVS,i.nineSlicedMode!==A&&i.nineSlicedMode!==P||(t+=e.baseNineSlicedVS),t}_vsAddTransformCode(t,e,i,n){return t+=this.chunks.transformVS}_setMapTransform(t,e,i,n){const a=i+100*n;if(!t[3][a]){const r=`texture_${e}MapTransform`;t[0]+=`uniform vec3 ${r}0;\n`,t[0]+=`uniform vec3 ${r}1;\n`,t[1]+=`varying vec2 vUV${n}_${i};\n`,t[2]+=`   vUV${n}_${i} = vec2(dot(vec3(uv${n}, 1), ${r}0), dot(vec3(uv${n}, 1), ${r}1));\n`,t[3][a]=!0}return t}_fsGetBaseCode(){const t=this.options,e=this.chunks;let i=this.chunks.basePS;return t.nineSlicedMode===A?i+=e.baseNineSlicedPS:t.nineSlicedMode===P&&(i+=e.baseNineSlicedTiledPS),i}_fsGetStartCode(t,e,i,n){let a=i.startPS;return n.nineSlicedMode===A?a+=i.startNineSlicedPS:n.nineSlicedMode===P&&(a+=i.startNineSlicedTiledPS),a}_getLightSourceShapeString(t){switch(t){case L:return"Rect";case b:return"Disk";case D:return"Sphere";default:return""}}generateVertexShader(t,u,S){const f=this.device,m=this.options,_=this.chunks;let v="",A="";v=this._vsAddBaseCode(v,_,m),A+="   vPositionW    = getWorldPosition();\n",this.options.pass===C&&(v+="varying float vDepth;\n",v+="#ifndef VIEWMATRIX\n",v+="#define VIEWMATRIX\n",v+="uniform mat4 matrix_view;\n",v+="#endif\n",v+="#ifndef CAMERAPLANES\n",v+="#define CAMERAPLANES\n",v+="uniform vec4 camera_params;\n\n",v+="#endif\n",A+="    vDepth = -(matrix_view * vec4(vPositionW,1.0)).z * camera_params.x;\n"),this.options.useInstancing&&(this.attributes.instance_line1=e,this.attributes.instance_line2=i,this.attributes.instance_line3=n,this.attributes.instance_line4=a,v+=_.instancingVS),this.needsNormal&&(this.attributes.vertex_normal=r,A+="   vNormalW = getNormal();\n","sphereMap"===m.reflectionSource&&f.fragmentUniformsCount<=16&&(v+=_.viewNormalVS,A+="   vNormalV    = getViewNormal();\n"),m.hasTangents&&(m.heightMapEnabled||m.normalMapEnabled||m.enableGGXSpecular)?(this.attributes.vertex_tangent=s,v+=_.tangentBinormalVS,A+="   vTangentW   = getTangent();\n",A+="   vBinormalW  = getBinormal();\n"):!m.enableGGXSpecular&&f.extStandardDerivatives||(A+="   vObjectSpaceUpW = normalize(dNormalMatrix * vec3(0, 1, 0));\n"));for(let e=0;e<2;e++)t[e]&&(this.attributes["vertex_texCoord"+e]="TEXCOORD"+e,v+=_["uv"+e+"VS"],A+="   vec2 uv"+e+" = getUv"+e+"();\n"),u[e]&&(A+="   vUv"+e+" = uv"+e+";\n");const P=[v,this.varyings,A,[]];if(S.forEach((t=>{this._setMapTransform(P,t.name,t.id,t.uv)})),v=P[0],this.varyings=P[1],A=P[2],m.vertexColors&&(this.attributes.vertex_color=d,A+="   vVertexColor = vertex_color;\n"),m.useMsdf&&m.msdfTextAttribute&&(this.attributes.vertex_outlineParameters=o,this.attributes.vertex_shadowParameters=l,A+="    unpackMsdfParams();\n",v+=_.msdfVS),m.useMorphPosition||m.useMorphNormal)if(m.useMorphTextureBased){v+="#define MORPHING_TEXTURE_BASED\n",m.useMorphPosition&&(v+="#define MORPHING_TEXTURE_BASED_POSITION\n"),m.useMorphNormal&&(v+="#define MORPHING_TEXTURE_BASED_NORMAL\n"),this.attributes.morph_vertex_id=a;const t=f.isWebGPU?"uint":"float";v+=`attribute ${t} morph_vertex_id;\n`}else v+="#define MORPHING\n",m.useMorphPosition?(this.attributes.morph_pos0=o,this.attributes.morph_pos1=l,this.attributes.morph_pos2=p,this.attributes.morph_pos3=h,v+="#define MORPHING_POS03\n",v+="attribute vec3 morph_pos0;\n",v+="attribute vec3 morph_pos1;\n",v+="attribute vec3 morph_pos2;\n",v+="attribute vec3 morph_pos3;\n"):m.useMorphNormal&&(this.attributes.morph_nrm0=o,this.attributes.morph_nrm1=l,this.attributes.morph_nrm2=p,this.attributes.morph_nrm3=h,v+="#define MORPHING_NRM03\n",v+="attribute vec3 morph_nrm0;\n",v+="attribute vec3 morph_nrm1;\n",v+="attribute vec3 morph_nrm2;\n",v+="attribute vec3 morph_nrm3;\n"),m.useMorphNormal?(this.attributes.morph_nrm4=e,this.attributes.morph_nrm5=i,this.attributes.morph_nrm6=n,this.attributes.morph_nrm7=a,v+="#define MORPHING_NRM47\n",v+="attribute vec3 morph_nrm4;\n",v+="attribute vec3 morph_nrm5;\n",v+="attribute vec3 morph_nrm6;\n",v+="attribute vec3 morph_nrm7;\n"):(this.attributes.morph_pos4=e,this.attributes.morph_pos5=i,this.attributes.morph_pos6=n,this.attributes.morph_pos7=a,v+="#define MORPHING_POS47\n",v+="attribute vec3 morph_pos4;\n",v+="attribute vec3 morph_pos5;\n",v+="attribute vec3 morph_pos6;\n",v+="attribute vec3 morph_pos7;\n");m.skin?(this.attributes.vertex_boneWeights=c,this.attributes.vertex_boneIndices=g,v+=q(f,_),v+="#define SKIN\n"):m.useInstancing&&(v+="#define INSTANCING\n"),m.screenSpace&&(v+="#define SCREENSPACE\n"),m.pixelSnap&&(v+="#define PIXELSNAP\n"),v=this._vsAddTransformCode(v,f,_,m),this.needsNormal&&(v+=_.normalVS),v+="\n",v+=_.startVS,v+=A,v+=_.endVS,v+="}",Object.keys(at).forEach((t=>{v.indexOf(t)>=0&&(this.varyings+=`varying ${at[t]} ${t};\n`,this.varyingDefines+=`#define VARYING_${t.toUpperCase()}\n`)}));const D=this.shaderPassInfo.shaderDefines;this.vshader=D+this.varyings+v}_fsGetBeginCode(){let t=this.shaderPassInfo.shaderDefines;for(let e=0;e<this.defines.length;e++)t+=`#define ${this.defines[e]}\n`;return t}_fsGetPickPassCode(){let t=this._fsGetBeginCode();return t+="uniform vec4 uColor;\n",t+=this.varyings,t+=this.varyingDefines,t+=this.frontendDecl,t+=this.frontendCode,t+=Q(),t+=this.frontendFunc,t+="    gl_FragColor = uColor;\n",t+=K(),t}_fsGetDepthPassCode(){const t=this.chunks;let e=this._fsGetBeginCode();return e+="varying float vDepth;\n",e+=this.varyings,e+=this.varyingDefines,e+=t.packDepthPS,e+=this.frontendDecl,e+=this.frontendCode,e+=Q(),e+=this.frontendFunc,e+="    gl_FragColor = packFloat(vDepth);\n",e+=K(),e}_fsGetShadowPassCode(){const t=this.device,e=this.options,i=this.chunks,n=this.varyings,a=this.shaderPassInfo.lightType,r=this.shaderPassInfo.shadowType;let s=this._fsGetBeginCode();!t.extStandardDerivatives||t.webgl2||t.isWebGPU||(s+="uniform vec2 polygonOffset;\n"),r===w?t.textureFloatHighPrecision?s+="#define VSM_EXPONENT 15.0\n\n":s+="#define VSM_EXPONENT 5.54\n\n":r===k&&(s+="#define VSM_EXPONENT 5.54\n\n"),a!==F&&(s+="uniform vec3 view_position;\n",s+="uniform float light_radius;\n"),s+=n,s+=this.varyingDefines,s+=this.frontendDecl,s+=this.frontendCode;const d=!t.supportsDepthShadow&&(r===E||r===N||r===W)||a===M&&r!==W&&!e.clusteredLightingEnabled;d?s+=i.packDepthPS:r===T&&(s+="vec2 encodeFloatRG( float v ) {\n",s+="    vec2 enc = vec2(1.0, 255.0) * v;\n",s+="    enc = fract(enc);\n",s+="    enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n",s+="    return enc;\n",s+="}\n\n"),r===W&&(s+=_.linearizeDepthPS),s+=Q(),s+=this.frontendFunc;const o=r===T||r===k||r===w,l=!t.webgl2&&t.extStandardDerivatives&&!t.isWebGPU;return o&&a!==F||a===M?s+="    float depth = min(distance(view_position, vPositionW) / light_radius, 0.99999);\n":r===W?(s+="    float depth = linearizeDepth(gl_FragCoord.z, camera_params);\n",d&&(s+="    depth *= 1.0 / (camera_params.y - camera_params.z);\n")):s+="    float depth = gl_FragCoord.z;\n",l&&(s+="    float minValue = 2.3374370500153186e-10; //(1.0 / 255.0) / (256.0 * 256.0 * 256.0);\n",s+="    depth += polygonOffset.x * max(abs(dFdx(depth)), abs(dFdy(depth))) + minValue * polygonOffset.y;\n"),d?s+="    gl_FragColor = packFloat(depth);\n":o?s+=r===T?"    gl_FragColor = vec4(encodeFloatRG(depth), encodeFloatRG(depth*depth));\n":i.storeEVSMPS:(s+="    gl_FragColor = vec4(1.0);\n",r===W||a===M&&!e.clusteredLightingEnabled?s+="   gl_FragColor.r = depth;\n":e.clusteredLightingEnabled&&a===M&&t.supportsDepthShadow&&(s+="    gl_FragDepth = depth;\n")),s+=K(),s}_fsGetLitPassCode(){const t=this.device,e=this.options,i=this.chunks,n=new it,a=new it,r=new it,s=new it;!1===e.opacityFadesSpecular&&n.append("uniform float material_alphaFade;"),e.useSpecular&&(this.defines.push("LIT_SPECULAR"),this.reflections&&this.defines.push("LIT_REFLECTIONS"),e.useClearCoat&&this.defines.push("LIT_CLEARCOAT"),e.fresnelModel>0&&this.defines.push("LIT_SPECULAR_FRESNEL"),e.conserveEnergy&&this.defines.push("LIT_CONSERVE_ENERGY"),e.useSheen&&this.defines.push("LIT_SHEEN"),e.useIridescence&&this.defines.push("LIT_IRIDESCENCE"));const d=[];let o=0,l=!1,p=!1,h=!1,c=e.lights.some((function(t){return t._shape&&t._shape!==y}));e.clusteredLightingEnabled&&e.clusteredLightingAreaLightsEnabled&&(c=!0);let g="highp";t.areaLightLutFormat===u&&(n.append("#define AREA_R8_G8_B8_A8_LUTS"),g="lowp"),(c||e.clusteredLightingEnabled)&&(n.append("#define AREA_LIGHTS"),n.append(`uniform ${g} sampler2D areaLightsLutTex1;`),n.append(`uniform ${g} sampler2D areaLightsLutTex2;`));for(let i=0;i<e.lights.length;i++){const a=e.lights[i],r=a._type;if(e.clusteredLightingEnabled&&r!==F)continue;const s=c&&a._shape?a._shape:y;n.append("uniform vec3 light"+i+"_color;"),a._shadowType===W&&a.castShadows&&!e.noShadow&&(n.append(`uniform float light${i}_shadowSearchArea;`),n.append(`uniform vec4 light${i}_cameraParams;`)),r===F?n.append("uniform vec3 light"+i+"_direction;"):(n.append("uniform vec3 light"+i+"_position;"),n.append("uniform float light"+i+"_radius;"),r===R&&(n.append("uniform vec3 light"+i+"_direction;"),n.append("uniform float light"+i+"_innerConeAngle;"),n.append("uniform float light"+i+"_outerConeAngle;"))),s!==y&&(r===F&&n.append("uniform vec3 light"+i+"_position;"),n.append("uniform vec3 light"+i+"_halfWidth;"),n.append("uniform vec3 light"+i+"_halfHeight;")),a.castShadows&&!e.noShadow&&(n.append("uniform mat4 light"+i+"_shadowMatrix;"),n.append("uniform float light"+i+"_shadowIntensity;"),r===F&&(n.append("uniform mat4 light"+i+"_shadowMatrixPalette[4];"),n.append("uniform float light"+i+"_shadowCascadeDistances[4];"),n.append("uniform float light"+i+"_shadowCascadeCount;")),n.append("uniform vec4 light"+i+"_shadowParams;"),r===F&&(l=!0),r===M?n.append("uniform samplerCube light"+i+"_shadowMap;"):a._isPcf&&t.supportsDepthShadow?n.append("uniform sampler2DShadow light"+i+"_shadowMap;"):n.append("uniform sampler2D light"+i+"_shadowMap;"),o++,d[a._shadowType]=!0,a._isVsm&&(p=!0),a._shadowType===W&&(h=!0)),a._cookie&&(a._cookie._cubemap?r===M&&(n.append("uniform samplerCube light"+i+"_cookie;"),n.append("uniform float light"+i+"_cookieIntensity;"),a.castShadows&&!e.noShadow||n.append("uniform mat4 light"+i+"_shadowMatrix;")):r===R&&(n.append("uniform sampler2D light"+i+"_cookie;"),n.append("uniform float light"+i+"_cookieIntensity;"),a.castShadows&&!e.noShadow||n.append("uniform mat4 light"+i+"_shadowMatrix;"),a._cookieTransform&&(n.append("uniform vec4 light"+i+"_cookieMatrix;"),n.append("uniform vec2 light"+i+"_cookieOffset;"))))}const S=this.needsNormal&&(e.normalMapEnabled||e.clearCoatNormalMapEnabled||e.enableGGXSpecular&&!e.heightMapEnabled);S&&(e.hasTangents?a.append(e.fastTbn?i.TBNfastPS:i.TBNPS):t.extStandardDerivatives&&(e.normalMapEnabled||e.clearCoatNormalMapEnabled)?a.append(i.TBNderivativePS.replace(/\$UV/g,this.lightingUv)):a.append(i.TBNObjectSpacePS)),a.append(i.sphericalPS),a.append(i.decodePS),a.append(Z(e.gamma,i)),a.append(J(e.toneMap,i)),a.append(tt(e.fog,i)),a.append(this.frontendCode),e.useCubeMapRotation&&n.append("#define CUBEMAP_ROTATION"),this.needsNormal&&(a.append(i.cubeMapRotatePS),a.append(e.cubeMapProjection>0?i.cubeMapProjectBoxPS:i.cubeMapProjectNonePS),a.append(e.skyboxIntensity?i.envMultiplyPS:i.envConstPS)),(this.lighting&&e.useSpecular||this.reflections)&&(e.useMetalness&&a.append(i.metalnessModulatePS),e.fresnelModel===x&&a.append(i.fresnelSchlickPS),e.useIridescence&&a.append(i.iridescenceDiffractionPS));const f=e.aoMapEnabled||e.useAoVertexColors;if(f)switch(a.append(i.aoDiffuseOccPS),e.occludeSpecular){case V:a.append(e.occludeSpecularFloat?i.aoSpecOccSimplePS:i.aoSpecOccConstSimplePS);break;case I:a.append(e.occludeSpecularFloat?i.aoSpecOccPS:i.aoSpecOccConstPS)}if("envAtlasHQ"===e.reflectionSource)a.append(e.fixSeams?i.fixCubemapSeamsStretchPS:i.fixCubemapSeamsNonePS),a.append(i.envAtlasPS),a.append(i.reflectionEnvHQPS.replace(/\$DECODE_CUBEMAP/g,v.decodeFunc(e.reflectionCubemapEncoding)).replace(/\$DECODE/g,v.decodeFunc(e.reflectionEncoding)));else if("envAtlas"===e.reflectionSource)a.append(i.envAtlasPS),a.append(i.reflectionEnvPS.replace(/\$DECODE/g,v.decodeFunc(e.reflectionEncoding)));else if("cubeMap"===e.reflectionSource)a.append(e.fixSeams?i.fixCubemapSeamsStretchPS:i.fixCubemapSeamsNonePS),a.append(i.reflectionCubePS.replace(/\$DECODE/g,v.decodeFunc(e.reflectionEncoding)));else if("sphereMap"===e.reflectionSource){const n=t.fragmentUniformsCount>16?i.reflectionSpherePS:i.reflectionSphereLowPS;a.append(n.replace(/\$DECODE/g,v.decodeFunc(e.reflectionEncoding)))}this.reflections&&(e.useClearCoat&&a.append(i.reflectionCCPS),e.useSheen&&a.append(i.reflectionSheenPS)),e.useRefraction&&(e.useDynamicRefraction?a.append(i.refractionDynamicPS):this.reflections&&a.append(i.refractionCubePS)),e.useSheen&&a.append(i.lightSheenPS),e.clusteredLightingEnabled&&(a.append(i.clusteredLightUtilsPS),e.clusteredLightingCookiesEnabled&&a.append(i.clusteredLightCookiesPS),e.clusteredLightingShadowsEnabled&&!e.noShadow&&(d[N]=!0,d[O]=!0,d[W]=!0)),(o>0||e.clusteredLightingEnabled)&&(l&&a.append(i.shadowCascadesPS),(d[E]||d[N])&&a.append(i.shadowStandardPS),d[O]&&(t.webgl2||t.isWebGPU)&&a.append(i.shadowStandardGL2PS),p&&(a.append(i.shadowVSM_commonPS),d[T]&&a.append(i.shadowVSM8PS),d[k]&&a.append(t.extTextureHalfFloatLinear?i.shadowEVSMPS.replace(/\$/g,"16"):i.shadowEVSMnPS.replace(/\$/g,"16")),d[w]&&a.append(t.extTextureFloatLinear?i.shadowEVSMPS.replace(/\$/g,"32"):i.shadowEVSMnPS.replace(/\$/g,"32"))),h&&(a.append(i.linearizeDepthPS),a.append(i.shadowPCSSPS)),t.webgl2||t.extStandardDerivatives||t.isWebGPU||a.append(i.biasConstPS)),e.enableGGXSpecular&&a.append("uniform float material_anisotropy;"),this.lighting&&(a.append(i.lightDiffuseLambertPS),(c||e.clusteredLightingAreaLightsEnabled)&&a.append(i.ltcPS));let m=!1;e.useSpecular&&(this.lighting&&a.append(e.shadingModel===$?i.lightSpecularPhongPS:e.enableGGXSpecular?i.lightSpecularAnisoGGXPS:i.lightSpecularBlinnPS),e.fresnelModel||this.reflections||e.diffuseMapEnabled||(n.append("uniform vec3 material_ambient;"),n.append("#define LIT_OLD_AMBIENT"),m=!0)),a.append(i.combinePS),(e.lightMapEnabled||e.useLightMapVertexColors)&&a.append(e.useSpecular&&e.dirLightMapEnabled?i.lightmapDirAddPS:i.lightmapAddPS);const _=!e.lightMapEnabled&&!e.useLightMapVertexColors||e.lightMapWithoutAmbient;_&&("ambientSH"===e.ambientSource?a.append(i.ambientSHPS):"envAtlas"===e.ambientSource?("envAtlas"!==e.reflectionSource&&"envAtlasHQ"!==e.reflectionSource&&a.append(i.envAtlasPS),a.append(i.ambientEnvPS.replace(/\$DECODE/g,v.decodeFunc(e.ambientEncoding)))):a.append(i.ambientConstantPS)),e.useAmbientTint&&!m&&n.append("uniform vec3 material_ambient;"),e.useMsdf&&(e.msdfTextAttribute||n.append("#define UNIFORM_TEXT_PARAMETERS"),a.append(i.msdfPS)),this.needsNormal&&(a.append(i.viewDirPS),e.useSpecular&&a.append(e.enableGGXSpecular?i.reflDirAnisoPS:i.reflDirPS));let A,P=!1,D=!1,b=!1,L=!1,C=!1;if(e.clusteredLightingEnabled&&this.lighting&&(L=!0,P=!0,D=!0,C=!0,a.append(i.floatUnpackingPS),e.lightMaskDynamic&&n.append("#define CLUSTER_MESH_DYNAMIC_LIGHTS"),e.clusteredLightingCookiesEnabled&&n.append("#define CLUSTER_COOKIES"),e.clusteredLightingShadowsEnabled&&!e.noShadow&&(n.append("#define CLUSTER_SHADOWS"),n.append("#define CLUSTER_SHADOW_TYPE_"+G[e.clusteredLightingShadowType])),e.clusteredLightingAreaLightsEnabled&&n.append("#define CLUSTER_AREALIGHTS"),n.append(z.shaderDefines),e.clusteredLightingShadowsEnabled&&!e.noShadow&&a.append(i.clusteredLightShadowsPS),a.append(i.clusteredLightPS)),e.twoSidedLighting&&n.append("uniform float twoSidedLightingNegScaleFactor;"),s.append(this._fsGetStartCode(s,t,i,e)),this.needsNormal&&(e.twoSidedLighting?s.append("    dVertexNormalW = normalize(gl_FrontFacing ? vNormalW * twoSidedLightingNegScaleFactor : -vNormalW * twoSidedLightingNegScaleFactor);"):s.append("    dVertexNormalW = normalize(vNormalW);"),(e.heightMapEnabled||e.normalMapEnabled)&&e.hasTangents&&(e.twoSidedLighting?(s.append("    dTangentW = gl_FrontFacing ? vTangentW * twoSidedLightingNegScaleFactor : -vTangentW * twoSidedLightingNegScaleFactor;"),s.append("    dBinormalW = gl_FrontFacing ? vBinormalW * twoSidedLightingNegScaleFactor : -vBinormalW * twoSidedLightingNegScaleFactor;")):(s.append("    dTangentW = vTangentW;"),s.append("    dBinormalW = vBinormalW;"))),s.append("    getViewDir();"),S&&s.append("    getTBN(dTangentW, dBinormalW, dVertexNormalW);")),s.append(this.frontendFunc),this.needsNormal&&(e.useSpecular&&r.append("    getReflDir(litShaderArgs.worldNormal, dViewDirW, litShaderArgs.gloss, dTBN);"),e.useClearCoat&&r.append("    ccReflDirW = normalize(-reflect(dViewDirW, litShaderArgs.clearcoat.worldNormal));")),(this.lighting&&e.useSpecular||this.reflections)&&(e.useMetalness&&r.append("    getMetalnessModulate(litShaderArgs);"),e.useIridescence&&r.append("    vec3 iridescenceFresnel = getIridescence(saturate(dot(dViewDirW, litShaderArgs.worldNormal)), litShaderArgs.specularity, litShaderArgs.iridescence);")),_&&(r.append("    addAmbient(litShaderArgs.worldNormal);"),e.conserveEnergy&&e.useSpecular&&r.append("   dDiffuseLight = dDiffuseLight * (1.0 - litShaderArgs.specularity);"),e.separateAmbient&&r.append("\n\t\t\t\t\t\t\t\t\t\tvec3 dAmbientLight = dDiffuseLight;\n\t\t\t\t\t\t\t\t\t\tdDiffuseLight = vec3(0);\n\t\t\t\t\t\t\t\t")),e.useAmbientTint&&!m&&r.append("    dDiffuseLight *= material_ambient;"),f&&!e.occludeDirect&&r.append("    occludeDiffuse(litShaderArgs.ao);"),(e.lightMapEnabled||e.useLightMapVertexColors)&&r.append("    addLightMap(\n\t\t\t\t\t\t\t\tlitShaderArgs.lightmap, \n\t\t\t\t\t\t\t\tlitShaderArgs.lightmapDir, \n\t\t\t\t\t\t\t\tlitShaderArgs.worldNormal, \n\t\t\t\t\t\t\t\tdViewDirW, \n\t\t\t\t\t\t\t\tdReflDirW, \n\t\t\t\t\t\t\t\tlitShaderArgs.gloss, \n\t\t\t\t\t\t\t\tlitShaderArgs.specularity, \n\t\t\t\t\t\t\t\tdVertexNormalW,\n\t\t\t\t\t\t\t\tdTBN\n\t\t\t\t\t\t#if defined(LIT_IRIDESCENCE)\n\t\t\t\t\t\t\t\t, iridescenceFresnel,\n\t\t\t\t\t\t\t\tlitShaderArgs.iridescence\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t);"),this.lighting||this.reflections){this.reflections&&(e.useClearCoat&&(r.append("    addReflectionCC(ccReflDirW, litShaderArgs.clearcoat.gloss);"),e.fresnelModel>0?(r.append("    ccFresnel = getFresnelCC(dot(dViewDirW, litShaderArgs.clearcoat.worldNormal));"),r.append("    ccReflection.rgb *= ccFresnel;")):r.append("    ccFresnel = 0.0;")),e.useSpecularityFactor&&r.append("    ccReflection.rgb *= litShaderArgs.specularityFactor;"),e.useSheen&&r.append("    addReflectionSheen(litShaderArgs.worldNormal, dViewDirW, litShaderArgs.sheen.gloss);"),r.append("    addReflection(dReflDirW, litShaderArgs.gloss);"),e.fresnelModel>0?r.append("    dReflection.rgb *= \n\t\t\t\t\t\t\t\t\t\t\t\tgetFresnel(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdot(dViewDirW, litShaderArgs.worldNormal), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.gloss, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.specularity\n\t\t\t\t\t\t\t\t\t\t\t\t#if defined(LIT_IRIDESCENCE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, iridescenceFresnel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.iridescence\n\t\t\t\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);"):r.append("    dReflection.rgb *= litShaderArgs.specularity;"),e.useSpecularityFactor&&r.append("    dReflection.rgb *= litShaderArgs.specularityFactor;")),c&&(r.append("    dSpecularLight *= litShaderArgs.specularity;"),e.useSpecular&&r.append("    calcLTCLightValues(litShaderArgs.gloss, litShaderArgs.worldNormal, dViewDirW, litShaderArgs.specularity, litShaderArgs.clearcoat.gloss, litShaderArgs.clearcoat.worldNormal, litShaderArgs.clearcoat.specularity);"));for(let n=0;n<e.lights.length;n++){const s=e.lights[n],d=s._type;if(e.clusteredLightingEnabled&&d!==F)continue;A=!1;const o=c&&s._shape?s.shape:y,l=c&&s._shape?this._getLightSourceShapeString(o):"";if(o!==y&&r.append("    calc"+l+"LightValues(light"+n+"_position, light"+n+"_halfWidth, light"+n+"_halfHeight);"),d===F?(r.append("    dLightDirNormW = light"+n+"_direction;"),r.append("    dAtten = 1.0;")):(s._cookie&&(d!==R||s._cookie._cubemap?d===M&&s._cookie._cubemap&&(C=!0,A=!0):(C=!0,A=!0)),r.append("    getLightDirPoint(light"+n+"_position);"),P=!0,A&&(d===R?r.append("    dAtten3 = getCookie2D"+(s._cookieFalloff?"":"Clip")+(s._cookieTransform?"Xform":"")+"(light"+n+"_cookie, light"+n+"_shadowMatrix, light"+n+"_cookieIntensity"+(s._cookieTransform?", light"+n+"_cookieMatrix, light"+n+"_cookieOffset":"")+")."+s._cookieChannel+";"):r.append("    dAtten3 = getCookieCube(light"+n+"_cookie, light"+n+"_shadowMatrix, light"+n+"_cookieIntensity)."+s._cookieChannel+";")),o===y?s._falloffMode===B?(r.append("    dAtten = getFalloffLinear(light"+n+"_radius, dLightDirW);"),D=!0):(r.append("    dAtten = getFalloffInvSquared(light"+n+"_radius, dLightDirW);"),b=!0):(r.append("    dAtten = getFalloffWindow(light"+n+"_radius, dLightDirW);"),b=!0),r.append("    if (dAtten > 0.00001) {"),d===R&&(A&&!s._cookieFalloff||(r.append("    dAtten *= getSpotEffect(light"+n+"_direction, light"+n+"_innerConeAngle, light"+n+"_outerConeAngle, dLightDirNormW);"),L=!0))),o!==y?d===F?r.append("    dAttenD = getLightDiffuse(litShaderArgs.worldNormal, dViewDirW, dLightDirW, dLightDirNormW);"):r.append("    dAttenD = get"+l+"LightDiffuse(litShaderArgs.worldNormal, dViewDirW, dLightDirW, dLightDirNormW) * 16.0;"):r.append("    dAtten *= getLightDiffuse(litShaderArgs.worldNormal, dViewDirW, dLightDirW, dLightDirNormW);"),s.castShadows&&!e.noShadow){const e=s._shadowType===W,l=s._shadowType===T||s._shadowType===k||s._shadowType===w,p=s._shadowType===E||s._shadowType===N||s._shadowType===O;let h,c=null;switch(s._shadowType){case T:c="VSM8",h="0.0";break;case k:c="VSM16",h="5.54";break;case w:c="VSM32",h=t.textureFloatHighPrecision?"15.0":"5.54";break;case E:c="PCF1x1";break;case O:c="PCF5x5";break;case W:c="PCSS";break;default:c="PCF3x3"}if(null!==c){s._normalOffsetBias&&!s._isVsm&&a.append("#define SHADOW_SAMPLE_NORMAL_OFFSET"),d===F&&a.append("#define SHADOW_SAMPLE_ORTHO"),((p||e)&&t.webgl2||t.extStandardDerivatives||t.isWebGPU)&&a.append("#define SHADOW_SAMPLE_SOURCE_ZBUFFER"),d===M&&a.append("#define SHADOW_SAMPLE_POINT");const g=i.shadowSampleCoordPS;a.append(g.replace("$LIGHT",n)),a.append("#undef SHADOW_SAMPLE_NORMAL_OFFSET"),a.append("#undef SHADOW_SAMPLE_ORTHO"),a.append("#undef SHADOW_SAMPLE_SOURCE_ZBUFFER"),a.append("#undef SHADOW_SAMPLE_POINT");let u=`light${n}_shadowMatrix`;d===F&&s.numCascades>1&&(r.append(`    getShadowCascadeMatrix(light${n}_shadowMatrixPalette, light${n}_shadowCascadeDistances, light${n}_shadowCascadeCount);`),u="cascadeShadowMat"),r.append(`    dShadowCoord = getShadowSampleCoord${n}(${u}, light${n}_shadowParams, vPositionW, dLightPosW, dLightDirW, dLightDirNormW, dVertexNormalW);`),d===F&&r.append(`    fadeShadow(light${n}_shadowCascadeDistances);`);var j=`SHADOWMAP_PASS(light${n}_shadowMap), dShadowCoord, light${n}_shadowParams`;if(l)j=`${j}, ${h}, dLightDirW`;else if(e){let t=`vec2(light${n}_shadowSearchArea)`;o!==y&&(t=`vec2(length(light${n}_halfWidth), length(light${n}_halfHeight)) * light${n}_shadowSearchArea`),j=`${j}, light${n}_cameraParams, ${t}, dLightDirW`}d===M?(c=`Point${c}`,e||(j=`${j}, dLightDirW`)):d===R&&(c=`Spot${c}`),r.append(`    float shadow${n} = getShadow${c}(${j});`),r.append(`    dAtten *= mix(1.0, shadow${n}, light${n}_shadowIntensity);`)}}if(o!==y?e.conserveEnergy&&e.useSpecular?r.append("    dDiffuseLight += ((dAttenD * dAtten) * light"+n+"_color"+(A?" * dAtten3":"")+") * (1.0 - dLTCSpecFres);"):r.append("    dDiffuseLight += (dAttenD * dAtten) * light"+n+"_color"+(A?" * dAtten3":"")+";"):c&&e.conserveEnergy&&e.useSpecular?r.append("    dDiffuseLight += (dAtten * light"+n+"_color"+(A?" * dAtten3":"")+") * (1.0 - litShaderArgs.specularity);"):r.append("    dDiffuseLight += dAtten * light"+n+"_color"+(A?" * dAtten3":"")+";"),e.useSpecular&&r.append("    dHalfDirW = normalize(-dLightDirNormW + dViewDirW);"),s.affectSpecularity)if(o!==y)e.useClearCoat&&r.append(`    ccSpecularLight += ccLTCSpecFres * get${l}LightSpecular(litShaderArgs.clearcoat.worldNormal, dViewDirW) * dAtten * light${n}_color`+(A?" * dAtten3":"")+";"),e.useSpecular&&r.append(`    dSpecularLight += dLTCSpecFres * get${l}LightSpecular(litShaderArgs.worldNormal, dViewDirW) * dAtten * light${n}_color`+(A?" * dAtten3":"")+";");else{var Y=!1;d===F&&e.fresnelModel>0&&(Y=!0),e.useClearCoat&&r.append(`    ccSpecularLight += getLightSpecular(dHalfDirW, ccReflDirW, litShaderArgs.clearcoat.worldNormal, dViewDirW, dLightDirNormW, litShaderArgs.clearcoat.gloss, dTBN) * dAtten * light${n}_color`+(A?" * dAtten3":"")+(Y?" * getFresnelCC(dot(dViewDirW, dHalfDirW));":";")),e.useSheen&&r.append(`    sSpecularLight += getLightSpecularSheen(dHalfDirW, litShaderArgs.worldNormal, dViewDirW, dLightDirNormW, litShaderArgs.sheen.gloss) * dAtten * light${n}_color`+(A?" * dAtten3;":";")),e.useSpecular&&r.append(`    dSpecularLight += getLightSpecular(dHalfDirW, dReflDirW, litShaderArgs.worldNormal, dViewDirW, dLightDirNormW, litShaderArgs.gloss, dTBN) * dAtten * light${n}_color`+(A?" * dAtten3":"")+(Y?" \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t* getFresnel(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdot(dViewDirW, dHalfDirW), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.gloss, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.specularity\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#if defined(LIT_IRIDESCENCE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, iridescenceFresnel, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.iridescence\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);":"* litShaderArgs.specularity;"))}d!==F&&r.append("    }")}e.clusteredLightingEnabled&&this.lighting&&(D=!0,b=!0,P=!0,r.append("    addClusteredLights(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.worldNormal, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdViewDirW, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdReflDirW,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#if defined(LIT_CLEARCOAT)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tccReflDirW,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.gloss, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.specularity, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdVertexNormalW, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdTBN, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#if defined(LIT_IRIDESCENCE)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tiridescenceFresnel,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.clearcoat, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.sheen, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.iridescence\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);")),c&&(e.useClearCoat&&r.append("    litShaderArgs.clearcoat.specularity = 1.0;"),e.useSpecular&&r.append("    litShaderArgs.specularity = vec3(1);")),e.useRefraction&&r.append("    addRefraction(\n\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.worldNormal, \n\t\t\t\t\t\t\t\t\t\t\t\tdViewDirW, \n\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.thickness, \n\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.gloss, \n\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.specularity, \n\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.albedo, \n\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.transmission\n\t\t\t\t\t\t\t\t\t\t#if defined(LIT_IRIDESCENCE)\n\t\t\t\t\t\t\t\t\t\t\t\t, iridescenceFresnel, \n\t\t\t\t\t\t\t\t\t\t\t\tlitShaderArgs.iridescence\n\t\t\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t\t\t);")}f&&(e.occludeDirect&&r.append("    occludeDiffuse(litShaderArgs.ao);"),e.occludeSpecular!==V&&e.occludeSpecular!==I||r.append("    occludeSpecular(litShaderArgs.gloss, litShaderArgs.ao, litShaderArgs.worldNormal, dViewDirW);")),e.useSpecularityFactor&&r.append("    dSpecularLight *= litShaderArgs.specularityFactor;"),!1===e.opacityFadesSpecular&&(e.blendType!==H&&e.blendType!==U||(r.append("float specLum = dot((dSpecularLight + dReflection.rgb * dReflection.a), vec3( 0.2126, 0.7152, 0.0722 ));"),r.append("#ifdef LIT_CLEARCOAT\n specLum += dot(ccSpecularLight * litShaderArgs.clearcoat.specularity + ccReflection.rgb * litShaderArgs.clearcoat.specularity, vec3( 0.2126, 0.7152, 0.0722 ));\n#endif"),r.append("litShaderArgs.opacity = clamp(litShaderArgs.opacity + gammaCorrectInput(specLum), 0.0, 1.0);")),r.append("litShaderArgs.opacity *= material_alphaFade;")),r.append(i.endPS),e.blendType===H||e.blendType===X||e.alphaToCoverage?r.append(i.outputAlphaPS):e.blendType===U?r.append(i.outputAlphaPremulPS):r.append(i.outputAlphaOpaquePS),e.useMsdf&&r.append("    gl_FragColor = applyMsdf(gl_FragColor);"),r.append(i.outputPS),r.append(i.debugOutputPS),P&&a.prepend(i.lightDirPointPS),D&&a.prepend(i.falloffLinearPS),b&&a.prepend(i.falloffInvSquaredPS),L&&a.prepend(i.spotPS),C&&!e.clusteredLightingEnabled&&a.prepend(i.cookiePS);let q="";const Q=`void evaluateBackend(LitShaderArguments litShaderArgs) {\n${r.code}\n}`;a.append(Q),s.append(i.debugProcessFrontendPS),s.append("    evaluateBackend(litShaderArgs);"),s.append(K());const et=n.code+a.code+s.code;et.includes("dTBN")&&(q+="mat3 dTBN;\n"),et.includes("dVertexNormalW")&&(q+="vec3 dVertexNormalW;\n"),et.includes("dTangentW")&&(q+="vec3 dTangentW;\n"),et.includes("dBinormalW")&&(q+="vec3 dBinormalW;\n"),et.includes("dViewDirW")&&(q+="vec3 dViewDirW;\n"),et.includes("dReflDirW")&&(q+="vec3 dReflDirW;\n"),et.includes("dHalfDirW")&&(q+="vec3 dHalfDirW;\n"),et.includes("ccReflDirW")&&(q+="vec3 ccReflDirW;\n"),et.includes("dLightDirNormW")&&(q+="vec3 dLightDirNormW;\n"),et.includes("dLightDirW")&&(q+="vec3 dLightDirW;\n"),et.includes("dLightPosW")&&(q+="vec3 dLightPosW;\n"),et.includes("dShadowCoord")&&(q+="vec3 dShadowCoord;\n"),et.includes("dReflection")&&(q+="vec4 dReflection;\n"),et.includes("dDiffuseLight")&&(q+="vec3 dDiffuseLight;\n"),et.includes("dSpecularLight")&&(q+="vec3 dSpecularLight;\n"),et.includes("dAtten")&&(q+="float dAtten;\n"),et.includes("dAttenD")&&(q+="float dAttenD;\n"),et.includes("dAtten3")&&(q+="vec3 dAtten3;\n"),et.includes("dMsdf")&&(q+="vec4 dMsdf;\n"),et.includes("ccFresnel")&&(q+="float ccFresnel;\n"),et.includes("ccReflection")&&(q+="vec3 ccReflection;\n"),et.includes("ccSpecularLight")&&(q+="vec3 ccSpecularLight;\n"),et.includes("ccSpecularityNoFres")&&(q+="float ccSpecularityNoFres;\n"),et.includes("sSpecularLight")&&(q+="vec3 sSpecularLight;\n"),et.includes("sReflection")&&(q+="vec3 sReflection;\n");return this._fsGetBeginCode()+this.varyings+this.varyingDefines+this._fsGetBaseCode()+(e.detailModes?i.detailModesPS:"")+q+this.frontendDecl+et}generateFragmentShader(t,e,i,n){const a=this.options;this.frontendDecl=t,this.frontendCode=e,this.frontendFunc=i,this.lightingUv=n,a.pass===j?this.fshader=this._fsGetPickPassCode():a.pass===C?this.fshader=this._fsGetDepthPassCode():this.shadowPass?this.fshader=this._fsGetShadowPassCode():a.customFragmentShader?this.fshader=this._fsGetBeginCode()+a.customFragmentShader:this.fshader=this._fsGetLitPassCode()}getDefinition(){const t=et.createDefinition(this.device,{name:"LitShader",attributes:this.attributes,vertexCode:this.vshader,fragmentCode:this.fshader});return this.options.isForwardPass&&(t.tag=S),t}}export{rt as LitShader};
