import{EventHandler as t}from"../core/event-handler.js";import{Color as e}from"../math/color.js";import{Vec3 as i}from"../math/vec3.js";import{Quat as s}from"../math/quat.js";import{math as a}from"../math/math.js";import{BAKE_COLORDIR as n,FOG_NONE as r,GAMMA_SRGB as h,LAYERID_IMMEDIATE as l}from"./constants.js";import{Sky as o}from"./sky.js";import{LightingParams as m}from"./lighting/lighting-params.js";import{Immediate as g}from"./immediate/immediate.js";import{EnvLighting as p}from"../graphics/env-lighting.js";import{getApplication as u}from"../framework/globals.js";class y extends t{constructor(t){super(),this.ambientBake=!1,this.ambientBakeOcclusionBrightness=0,this.ambientBakeOcclusionContrast=0,this.ambientLight=new e(0,0,0),this.ambientLuminance=0,this.exposure=1,this.fogColor=new e(0,0,0),this.fogDensity=0,this.fogEnd=1e3,this.fogStart=1,this.lightmapSizeMultiplier=1,this.lightmapMaxResolution=2048,this.lightmapMode=n,this.lightmapFilterEnabled=!1,this.root=null,this.sky=null,this.physicalUnits=!1,this.device=t||u().graphicsDevice,this._gravity=new i(0,-9.8,0),this._layers=null,this._fog=r,this._gammaCorrection=h,this._toneMapping=0,this._skyboxCubeMap=null,this._prefilteredCubemaps=[null,null,null,null,null,null],this._envAtlas=null,this._internalEnvAtlas=null,this._skyboxIntensity=1,this._skyboxLuminance=0,this._skyboxMip=0,this._skyboxRotation=new s,this._skyboxRotationMat3=null,this._skyboxRotationMat4=null,this._ambientBakeNumSamples=1,this._ambientBakeSpherePart=.4,this._lightmapFilterRange=10,this._lightmapFilterSmoothness=.2,this._clusteredLightingEnabled=!0,this._lightingParams=new m(this.device.supportsAreaLights,this.device.maxTextureSize,(()=>{this._layers._dirtyLights=!0})),this._stats={meshInstances:0,lights:0,dynamicLights:0,bakedLights:0,lastStaticPrepareFullTime:0,lastStaticPrepareSearchTime:0,lastStaticPrepareWriteTime:0,lastStaticPrepareTriAabbTime:0,lastStaticPrepareCombineTime:0,updateShadersTime:0},this.updateShaders=!0,this._shaderVersion=0,this._statsUpdated=!1,this.immediate=new g(this.device)}get defaultDrawLayer(){return this.layers.getLayerById(l)}set ambientBakeNumSamples(t){this._ambientBakeNumSamples=a.clamp(Math.floor(t),1,255)}get ambientBakeNumSamples(){return this._ambientBakeNumSamples}set ambientBakeSpherePart(t){this._ambientBakeSpherePart=a.clamp(t,.001,1)}get ambientBakeSpherePart(){return this._ambientBakeSpherePart}set clusteredLightingEnabled(t){this._clusteredLightingEnabled||!t?this._clusteredLightingEnabled=t:console.error("Turning on disabled clustered lighting is not currently supported")}get clusteredLightingEnabled(){return this._clusteredLightingEnabled}set drawCalls(t){}get drawCalls(){let t=this.layers._meshInstances;return t.length||(this.layers._update(this.device,this.clusteredLightingEnabled),t=this.layers._meshInstances),t}set envAtlas(t){t!==this._envAtlas&&(this._envAtlas=t,this.updateShaders=!0)}get envAtlas(){return this._envAtlas}set fog(t){t!==this._fog&&(this._fog=t,this.updateShaders=!0)}get fog(){return this._fog}set gammaCorrection(t){t!==this._gammaCorrection&&(this._gammaCorrection=t,this.updateShaders=!0)}get gammaCorrection(){return this._gammaCorrection}set layers(t){const e=this._layers;this._layers=t,this.fire("set:layers",e,t)}get layers(){return this._layers}get lighting(){return this._lightingParams}set lightmapFilterRange(t){this._lightmapFilterRange=Math.max(t,.001)}get lightmapFilterRange(){return this._lightmapFilterRange}set lightmapFilterSmoothness(t){this._lightmapFilterSmoothness=Math.max(t,.001)}get lightmapFilterSmoothness(){return this._lightmapFilterSmoothness}set prefilteredCubemaps(t){const e=this._prefilteredCubemaps;t=t||[];let i=!1,s=!0;for(let a=0;a<6;++a){const n=t[a]||null;e[a]!==n&&(e[a]=n,i=!0),s=s&&!!e[a]}i&&(this._resetSky(),s?(this._internalEnvAtlas=p.generatePrefilteredAtlas(e,{target:this._internalEnvAtlas}),this._envAtlas||(this.envAtlas=this._internalEnvAtlas)):this._internalEnvAtlas&&(this._envAtlas===this._internalEnvAtlas&&(this.envAtlas=null),this._internalEnvAtlas.destroy(),this._internalEnvAtlas=null))}get prefilteredCubemaps(){return this._prefilteredCubemaps}set skybox(t){t!==this._skyboxCubeMap&&(this._skyboxCubeMap=t,this._resetSky())}get skybox(){return this._skyboxCubeMap}set skyboxIntensity(t){t!==this._skyboxIntensity&&(this._skyboxIntensity=t,this._resetSky())}get skyboxIntensity(){return this._skyboxIntensity}set skyboxLuminance(t){t!==this._skyboxLuminance&&(this._skyboxLuminance=t,this._resetSky())}get skyboxLuminance(){return this._skyboxLuminance}set skyboxMip(t){t!==this._skyboxMip&&(this._skyboxMip=t,this._resetSky())}get skyboxMip(){return this._skyboxMip}set skyboxRotation(t){this._skyboxRotation.equals(t)||(this._skyboxRotation.copy(t),this._resetSky())}get skyboxRotation(){return this._skyboxRotation}set toneMapping(t){t!==this._toneMapping&&(this._toneMapping=t,this.updateShaders=!0)}get toneMapping(){return this._toneMapping}destroy(){this._resetSky(),this.root=null,this.off()}drawLine(t,i,s=e.WHITE,a=!0,n=this.defaultDrawLayer){this.immediate.getBatch(n,a).addLines([t,i],[s,s])}drawLines(t,e,i=!0,s=this.defaultDrawLayer){this.immediate.getBatch(s,i).addLines(t,e)}drawLineArrays(t,e,i=!0,s=this.defaultDrawLayer){this.immediate.getBatch(s,i).addLinesArrays(t,e)}applySettings(t){const e=t.physics,i=t.render;this._gravity.set(e.gravity[0],e.gravity[1],e.gravity[2]),this.ambientLight.set(i.global_ambient[0],i.global_ambient[1],i.global_ambient[2]),this.ambientLuminance=i.ambientLuminance,this._fog=i.fog,this.fogColor.set(i.fog_color[0],i.fog_color[1],i.fog_color[2]),this.fogStart=i.fog_start,this.fogEnd=i.fog_end,this.fogDensity=i.fog_density,this._gammaCorrection=i.gamma_correction,this._toneMapping=i.tonemapping,this.lightmapSizeMultiplier=i.lightmapSizeMultiplier,this.lightmapMaxResolution=i.lightmapMaxResolution,this.lightmapMode=i.lightmapMode,this.exposure=i.exposure,this._skyboxIntensity=void 0===i.skyboxIntensity?1:i.skyboxIntensity,this._skyboxLuminance=void 0===i.skyboxLuminance?2e4:i.skyboxLuminance,this._skyboxMip=void 0===i.skyboxMip?0:i.skyboxMip,i.skyboxRotation&&this._skyboxRotation.setFromEulerAngles(i.skyboxRotation[0],i.skyboxRotation[1],i.skyboxRotation[2]),this.clusteredLightingEnabled=i.clusteredLightingEnabled,this.lighting.applySettings(i),["lightmapFilterEnabled","lightmapFilterRange","lightmapFilterSmoothness","ambientBake","ambientBakeNumSamples","ambientBakeSpherePart","ambientBakeOcclusionBrightness","ambientBakeOcclusionContrast"].forEach((t=>{i.hasOwnProperty(t)&&(this[t]=i[t])})),this._resetSky()}_getSkyboxTex(){const t=this._prefilteredCubemaps;if(this._skyboxMip){return t[[0,1,3,4,5,6][this._skyboxMip]]||this._envAtlas||t[0]||this._skyboxCubeMap}return this._skyboxCubeMap||t[0]||this._envAtlas}_updateSky(t){if(!this.sky){const e=this._getSkyboxTex();e&&(this.sky=new o(t,this,e),this.fire("set:skybox",e))}}_resetSky(){var t;null==(t=this.sky)||t.destroy(),this.sky=null,this.updateShaders=!0}setSkybox(t){t?(this.skybox=t[0]||null,this.prefilteredCubemaps=t.slice(1)):(this.skybox=null,this.prefilteredCubemaps=[null,null,null,null,null,null])}}export{y as Scene};
