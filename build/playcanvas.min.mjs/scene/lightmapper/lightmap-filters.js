import{createShaderFromCode as e}from"../shader-lib/utils.js";import{shaderChunks as s}from"../shader-lib/chunks/chunks.js";import{shaderChunksLightmapper as t}from"../shader-lib/chunks/chunks-lightmapper.js";class i{constructor(i){this.device=i,this.shaderDilate=e(i,s.fullscreenQuadVS,t.dilatePS,"lmDilate"),this.constantTexSource=i.scope.resolve("source"),this.constantPixelOffset=i.scope.resolve("pixelOffset"),this.pixelOffset=new Float32Array(2),this.shaderDenoise=null,this.sigmas=null,this.constantSigmas=null,this.kernel=null}setSourceTexture(e){this.constantTexSource.setValue(e)}prepare(e,s){this.pixelOffset[0]=1/e,this.pixelOffset[1]=1/s,this.constantPixelOffset.setValue(this.pixelOffset)}prepareDenoise(i,l){this.shaderDenoise||(this.shaderDenoise=e(this.device,s.fullscreenQuadVS,t.bilateralDeNoisePS,"lmBilateralDeNoise"),this.sigmas=new Float32Array(2),this.constantSigmas=this.device.scope.resolve("sigmas"),this.constantKernel=this.device.scope.resolve("kernel[0]"),this.bZnorm=this.device.scope.resolve("bZnorm")),this.sigmas[0]=i,this.sigmas[1]=l,this.constantSigmas.setValue(this.sigmas),this.evaluateDenoiseUniforms(i,l)}evaluateDenoiseUniforms(e,s){function t(e,s){return.39894*Math.exp(-.5*e*e/(s*s))/s}this.kernel=this.kernel||new Float32Array(15);const i=this.kernel,l=Math.floor(7);for(let s=0;s<=l;++s){const r=t(s,e);i[l+s]=r,i[l-s]=r}this.constantKernel.setValue(this.kernel);const r=1/t(0,s);this.bZnorm.setValue(r)}}export{i as LightmapFilters};
