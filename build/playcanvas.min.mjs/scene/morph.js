import"../core/tracing.js";import{RefCountedObject as t}from"../core/ref-counted-object.js";import{Vec3 as e}from"../math/vec3.js";import{FloatPacking as r}from"../math/float-packing.js";import{BoundingBox as s}from"../shape/bounding-box.js";import{Texture as i}from"../graphics/texture.js";import{VertexBuffer as o}from"../graphics/vertex-buffer.js";import{VertexFormat as h}from"../graphics/vertex-format.js";import{getApplication as a}from"../framework/globals.js";import{PIXELFORMAT_RGB32F as n,PIXELFORMAT_RGBA16F as l,BUFFER_STATIC as u,FILTER_NEAREST as m,ADDRESS_CLAMP_TO_EDGE as p,SEMANTIC_ATTR15 as c,TYPE_FLOAT32 as _}from"../graphics/constants.js";class g extends t{constructor(t,e){super(),t.forEach((t=>{})),this.device=e||a().graphicsDevice,this._targets=t.slice(),this.device.supportsMorphTargetTexturesCore&&(this.device.extTextureHalfFloat&&this.device.textureHalfFloatRenderable?this._renderTextureFormat=g.FORMAT_HALF_FLOAT:this.device.extTextureFloat&&this.device.textureFloatRenderable&&(this._renderTextureFormat=g.FORMAT_FLOAT),this.device.extTextureHalfFloat&&this.device.textureHalfFloatUpdatable?this._textureFormat=g.FORMAT_HALF_FLOAT:this.device.extTextureFloat&&(this._textureFormat=g.FORMAT_FLOAT),void 0!==this._renderTextureFormat&&void 0!==this._textureFormat&&(this._useTextureMorph=!0)),this._init(),this._updateMorphFlags(),this._calculateAabb()}get morphPositions(){return this._morphPositions}get morphNormals(){return this._morphNormals}get maxActiveTargets(){return this._useTextureMorph?this._targets.length:this._morphPositions&&this._morphNormals?4:8}get useTextureMorph(){return this._useTextureMorph}_init(){if(this._useTextureMorph&&(this._useTextureMorph=this._initTextureBased()),!this._useTextureMorph)for(let t=0;t<this._targets.length;t++)this._targets[t]._initVertexBuffers(this.device);for(let t=0;t<this._targets.length;t++)this._targets[t]._postInit()}_initTextureBased(){const t=[],e=[];for(let r=0;r<this._targets.length;r++){const s=this._targets[r];s.options.deltaPositions&&(t.push(s.options.deltaPositions),e.push({target:s,name:"texturePositions"})),s.options.deltaNormals&&(t.push(s.options.deltaNormals),e.push({target:s,name:"textureNormals"}))}const s=[],i=[];let a=1;const m=t[0].length;for(let e=0;e<m;e+=3){let r=!1;for(let s=0;s<t.length;s++){const i=t[s];if(0!==i[e]||0!==i[e+1]||0!==i[e+2]){r=!0;break}}r?(s.push(a+.2),i.push(e/3),a++):s.push(.2)}const p=Math.min(this.device.maxTextureSize,4096);let x=Math.ceil(Math.sqrt(a));x=Math.min(x,p);const d=Math.ceil(a/x);if(d>p)return!1;this.morphTextureWidth=x,this.morphTextureHeight=d;let T=!1,f=3;const F=r.float2Half;this._textureFormat===g.FORMAT_HALF_FLOAT&&(T=!0,f=4);const M=this.morphTextureWidth*this.morphTextureHeight*f,A=T?new Uint16Array(M):new Float32Array(M);for(let r=0;r<t.length;r++){const s=t[r];for(let t=0;t<i.length;t++){const e=i[t];T?(A[t*f+f]=F(s[3*e]),A[t*f+f+1]=F(s[3*e+1]),A[t*f+f+2]=F(s[3*e+2])):(A[t*f+f]=s[3*e],A[t*f+f+1]=s[3*e+1],A[t*f+f+2]=s[3*e+2])}const o=e[r].target,h=this._textureFormat===g.FORMAT_FLOAT?n:l;o._setTexture(e[r].name,this._createTexture("MorphTarget",h,A))}const v=[{semantic:c,components:1,type:_}];return this.vertexBufferIds=new o(this.device,new h(this.device,v),s.length,u,new Float32Array(s)),!0}destroy(){var t;null==(t=this.vertexBufferIds)||t.destroy(),this.vertexBufferIds=null;for(let t=0;t<this._targets.length;t++)this._targets[t].destroy();this._targets.length=0}get targets(){return this._targets}_updateMorphFlags(){this._morphPositions=!1,this._morphNormals=!1;for(let t=0;t<this._targets.length;t++){const e=this._targets[t];e.morphPositions&&(this._morphPositions=!0),e.morphNormals&&(this._morphNormals=!0)}}_calculateAabb(){const t=new e,r=new e;for(let e=0;e<this._targets.length;e++){const s=this._targets[e].aabb;t.min(s.getMin()),r.max(s.getMax())}this.aabb=new s,this.aabb.setMinMax(t,r)}_createTexture(t,e,r){const s=new i(this.device,{width:this.morphTextureWidth,height:this.morphTextureHeight,format:e,cubemap:!1,mipmaps:!1,minFilter:m,magFilter:m,addressU:p,addressV:p,name:t});return r&&(s.lock().set(r),s.unlock()),s}}g.FORMAT_FLOAT=0,g.FORMAT_HALF_FLOAT=1;export{g as Morph};
