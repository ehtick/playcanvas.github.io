import"../../core/tracing.js";import{Color as e}from"../../math/color.js";import{Vec2 as t}from"../../math/vec2.js";import{Quat as a}from"../../math/quat.js";import{math as s}from"../../math/math.js";import{_matTex2D as i,standard as r}from"../../graphics/program-lib/programs/standard.js";import{EnvLighting as n}from"../../graphics/env-lighting.js";import{CUBEPROJ_BOX as h,SPECULAR_PHONG as o,SHADER_DEPTH as l,SHADER_PICK as c,DETAILMODE_MUL as m,SPECOCC_AO as u,SPECULAR_BLINN as p,FRESNEL_SCHLICK as d,CUBEPROJ_NONE as _}from"../constants.js";import{ShaderPass as f}from"../shader-pass.js";import{Material as M}from"./material.js";import{StandardMaterialOptionsBuilder as y}from"./standard-material-options-builder.js";import{ShaderProcessorOptions as P}from"../../graphics/shader-processor-options.js";import{standardMaterialTextureParameters as g,standardMaterialCubemapParameters as v}from"./standard-material-parameters.js";const x={},b={};let S=new Set;class T extends M{constructor(){super(),this._dirtyShader=!0,this._assetReferences={},this._activeParams=new Set,this._activeLightingParams=new Set,this.shaderOptBuilder=new y,this.reset()}reset(){Object.keys(x).forEach((e=>{this[`_${e}`]=x[e].value()})),this._chunks={},this._uniformCache={}}set shader(e){}get shader(){return null}set chunks(e){this._dirtyShader=!0,this._chunks=e}get chunks(){return this._dirtyShader=!0,this._chunks}copy(e){super.copy(e),Object.keys(x).forEach((t=>{this[t]=e[t]}));for(const t in e._chunks)e._chunks.hasOwnProperty(t)&&(this._chunks[t]=e._chunks[t]);return this}_setParameter(e,t){S.add(e),this.setParameter(e,t)}_setParameters(e){e.forEach((e=>{this._setParameter(e.name,e.value)}))}_processParameters(e){const t=this[e];t.forEach((e=>{S.has(e)||delete this.parameters[e]})),this[e]=S,S=t,S.clear()}_updateMap(e){const t=e+"Map",a=this[t];if(a){this._setParameter("texture_"+t,a);const e=t+"Transform",s=this.getUniform(e);s&&this._setParameters(s)}}_allocUniform(e,t){let a=this._uniformCache[e];return a||(a=t(),this._uniformCache[e]=a),a}getUniform(e,t,a){return b[e](this,t,a)}updateUniforms(e,t){const a=a=>this.getUniform(a,e,t);if(this._setParameter("material_ambient",a("ambient")),this.diffuseMap&&!this.diffuseTint||this._setParameter("material_diffuse",a("diffuse")),this.useMetalness)if((!this.metalnessMap||this.metalness<1)&&this._setParameter("material_metalness",this.metalness),this.specularMap&&!this.specularTint||this._setParameter("material_specular",a("specular")),this.specularityFactorMap&&!this.specularityFactorTint||this._setParameter("material_specularityFactor",this.specularityFactor),this.sheenMap&&!this.sheenTint||this._setParameter("material_sheen",a("sheen")),this.sheenGlossinessMap&&!this.sheenGlossinessTint||this._setParameter("material_sheenGlossiness",this.sheenGlossiness),this.refractionIndex>0){const e=1/this.refractionIndex,t=(e-1)/(e+1);this._setParameter("material_f0",t*t)}else this._setParameter("material_f0",1);else this.specularMap&&!this.specularTint||this._setParameter("material_specular",a("specular"));this.enableGGXSpecular&&this._setParameter("material_anisotropy",this.anisotropy),this.clearCoat>0&&(this._setParameter("material_clearCoat",this.clearCoat),this._setParameter("material_clearCoatGlossiness",this.clearCoatGlossiness),this._setParameter("material_clearCoatBumpiness",this.clearCoatBumpiness)),this._setParameter("material_shininess",a("shininess")),this.emissiveMap&&!this.emissiveTint||this._setParameter("material_emissive",a("emissive")),1!==this.emissiveIntensity&&this._setParameter("material_emissiveIntensity",this.emissiveIntensity),this.refraction>0&&(this._setParameter("material_refraction",this.refraction),this._setParameter("material_refractionIndex",this.refractionIndex)),this.useDynamicRefraction&&(this._setParameter("material_thickness",this.thickness),this._setParameter("material_attenuation",a("attenuation")),this._setParameter("material_invAttenuationDistance",0===this.attenuationDistance?0:1/this.attenuationDistance)),this.useIridescence&&(this._setParameter("material_iridescence",this.iridescence),this._setParameter("material_iridescenceRefractionIndex",this.iridescenceRefractionIndex),this._setParameter("material_iridescenceThicknessMin",this.iridescenceThicknessMin),this._setParameter("material_iridescenceThicknessMax",this.iridescenceThicknessMax)),this._setParameter("material_opacity",this.opacity),!1===this.opacityFadesSpecular&&this._setParameter("material_alphaFade",this.alphaFade),this.occludeSpecular&&this._setParameter("material_occludeSpecularIntensity",this.occludeSpecularIntensity),this.cubeMapProjection===h&&this._setParameter(a("cubeMapProjectionBox"));for(const e in i)this._updateMap(e);this.ambientSH&&this._setParameter("ambientSH[0]",this.ambientSH),this.normalMap&&this._setParameter("material_bumpiness",this.bumpiness),this.normalMap&&this.normalDetailMap&&this._setParameter("material_normalDetailMapBumpiness",this.normalDetailMapBumpiness),this.heightMap&&this._setParameter("material_heightMapFactor",a("heightMapFactor"));const s=this.shadingModel===o;this.envAtlas&&this.cubeMap&&!s?(this._setParameter("texture_envAtlas",this.envAtlas),this._setParameter("texture_cubeMap",this.cubeMap)):this.envAtlas&&!s?this._setParameter("texture_envAtlas",this.envAtlas):this.cubeMap?this._setParameter("texture_cubeMap",this.cubeMap):this.sphereMap&&this._setParameter("texture_sphereMap",this.sphereMap),this._setParameter("material_reflectivity",this.reflectivity),this._processParameters("_activeParams"),this._dirtyShader&&this.clearVariants()}updateEnvUniforms(e,t){const s=this.shadingModel===o;!(this.envAtlas&&!s||this.cubeMap||this.sphereMap)&&this.useSkybox&&(t.envAtlas&&t.skybox&&!s?(this._setParameter("texture_envAtlas",t.envAtlas),this._setParameter("texture_cubeMap",t.skybox)):t.envAtlas&&!s?this._setParameter("texture_envAtlas",t.envAtlas):t.skybox&&this._setParameter("texture_cubeMap",t.skybox),!t.skyboxRotation.equals(a.IDENTITY)&&t._skyboxRotationMat3&&this._setParameter("cubeMapRotationMatrix",t._skyboxRotationMat3.data)),this._processParameters("_activeLightingParams")}getShaderVariant(e,t,a,s,i,n,h,o){this.updateEnvUniforms(e,t);const m=i===l||i===c||f.isShadow(i);let u=m?r.optionsContextMin:r.optionsContext;m?this.shaderOptBuilder.updateMinRef(u,t,this,a,s,i,n):this.shaderOptBuilder.updateRef(u,t,this,a,s,i,n),this.onUpdateShader&&(u=this.onUpdateShader(u));const p=new P(h,o),d=e.getProgramLibrary();d.register("standard",r);const _=d.getProgram("standard",u,p);return this._dirtyShader=!1,_}destroy(){for(const e in this._assetReferences)this._assetReferences[e]._unbind();this._assetReferences=null,super.destroy()}}T.TEXTURE_PARAMETERS=g,T.CUBEMAP_PARAMETERS=v;const A=(e,t)=>{b[e]=t},F=(e,t,a,s)=>{Object.defineProperty(T.prototype,e,{get:s||function(){return this[`_${e}`]},set:a}),x[e]={value:t}},k=e=>{const t=`_${e.name}`,a=e.dirtyShaderFunc||(()=>!0);F(e.name,(()=>e.defaultValue),(function(e){const s=this[t];s!==e&&(this._dirtyShader=this._dirtyShader||a(s,e),this[t]=e)}),e.getterFunc)},C=e=>{const t=`_${e.name}`,a=e.dirtyShaderFunc||(()=>!0);F(e.name,(()=>e.defaultValue.clone()),(function(e){const s=this[t];s.equals(e)||(this._dirtyShader=this._dirtyShader||a(s,e),this[t]=s.copy(e))}),e.getterFunc)},w=e=>e.defaultValue&&e.defaultValue.clone?C(e):k(e);function R(e,a,r,n,h,o){i[e]=r,w({name:`${e}Map`,defaultValue:null,dirtyShaderFunc:(e,t)=>!!e!=!!t||e&&(e.type!==t.type||e.fixCubemapSeams!==t.fixCubemapSeams||e.format!==t.format)}),w({name:`${e}MapTiling`,defaultValue:new t(1,1)}),w({name:`${e}MapOffset`,defaultValue:new t(0,0)}),w({name:`${e}MapRotation`,defaultValue:0}),w({name:`${e}MapUv`,defaultValue:a}),r>0&&w({name:`${e}MapChannel`,defaultValue:n||(r>1?"rgb":"g")}),h&&(w({name:`${e}VertexColor`,defaultValue:!1}),r>0&&w({name:`${e}VertexColorChannel`,defaultValue:n||(r>1?"rgb":"g")})),o&&w({name:`${e}Mode`,defaultValue:m});const l=`${e}MapTiling`,c=`${e}MapOffset`,u=`${e}MapRotation`,p=`${e}MapTransform`;A(p,((e,t,a)=>{const i=e[l],r=e[c],n=e[u];if(1===i.x&&1===i.y&&0===r.x&&0===r.y&&0===n)return null;const h=e._allocUniform(p,(()=>[{name:`texture_${p}0`,value:new Float32Array(3)},{name:`texture_${p}1`,value:new Float32Array(3)}])),o=Math.cos(n*s.DEG_TO_RAD),m=Math.sin(n*s.DEG_TO_RAD),d=h[0].value;d[0]=o*i.x,d[1]=-m*i.y,d[2]=r.x;const _=h[1].value;return _[0]=m*i.x,_[1]=o*i.y,_[2]=1-i.y-r.y,h}))}function j(e,t){w({name:e,defaultValue:t,getterFunc:function(){return this._dirtyShader=!0,this[`_${e}`]}}),A(e,((t,a,s)=>{const i=t._allocUniform(e,(()=>new Float32Array(3))),r=t[e];return t.useGammaTonemap&&s.gammaCorrection?(i[0]=Math.pow(r.r,2.2),i[1]=Math.pow(r.g,2.2),i[2]=Math.pow(r.b,2.2)):(i[0]=r.r,i[1]=r.g,i[2]=r.b),i}))}function V(e,t,a){w({name:e,defaultValue:t,dirtyShaderFunc:(e,t)=>(0===e||1===e)!=(0===t||1===t)}),A(e,a)}function $(e,t){w({name:e,defaultValue:null,dirtyShaderFunc:(e,t)=>!!e==!!t}),A(e,t)}function I(e,t){w({name:e,defaultValue:t})}!function(){j("ambient",new e(.7,.7,.7)),j("diffuse",new e(1,1,1)),j("specular",new e(0,0,0)),j("emissive",new e(0,0,0)),j("sheen",new e(1,1,1)),j("attenuation",new e(1,1,1)),V("emissiveIntensity",1),V("specularityFactor",1),V("sheenGlossiness",0),V("shininess",25,((e,t,a)=>e.shadingModel===o?Math.pow(2,.01*e.shininess*11):.01*e.shininess)),V("heightMapFactor",1,((e,t,a)=>.025*e.heightMapFactor)),V("opacity",1),V("alphaFade",1),V("alphaTest",0),V("bumpiness",1),V("normalDetailMapBumpiness",1),V("reflectivity",1),V("occludeSpecularIntensity",1),V("refraction",0),V("refractionIndex",1/1.5),V("thickness",0),V("attenuationDistance",0),V("metalness",1),V("anisotropy",0),V("clearCoat",0),V("clearCoatGlossiness",1),V("clearCoatBumpiness",1),V("aoUvSet",0,null),V("iridescence",0),V("iridescenceRefractionIndex",1/1.5),V("iridescenceThicknessMin",0),V("iridescenceThicknessMax",0),$("ambientSH"),$("cubeMapProjectionBox",((e,t,a)=>{const s=e._allocUniform("cubeMapProjectionBox",(()=>[{name:"envBoxMin",value:new Float32Array(3)},{name:"envBoxMax",value:new Float32Array(3)}])),i=e.cubeMapProjectionBox.getMin(),r=s[0].value;r[0]=i.x,r[1]=i.y,r[2]=i.z;const n=e.cubeMapProjectionBox.getMax(),h=s[1].value;return h[0]=n.x,h[1]=n.y,h[2]=n.z,s})),I("ambientTint",!1),I("diffuseTint",!1),I("specularTint",!1),I("specularityFactorTint",!1),I("emissiveTint",!1),I("fastTbn",!1),I("useMetalness",!1),I("useMetalnessSpecularColor",!1),I("useSheen",!1),I("enableGGXSpecular",!1),I("occludeDirect",!1),I("normalizeNormalMap",!0),I("conserveEnergy",!0),I("opacityFadesSpecular",!0),I("occludeSpecular",u),I("shadingModel",p),I("fresnelModel",d),I("useDynamicRefraction",!1),I("cubeMapProjection",_),I("customFragmentShader",null),I("forceFragmentPrecision",null),I("useFog",!0),I("useLighting",!0),I("useGammaTonemap",!0),I("useSkybox",!0),I("forceUv1",!1),I("pixelSnap",!1),I("twoSidedLighting",!1),I("nineSlicedMode",void 0),I("msdfTextAttribute",!1),I("useIridescence",!1),R("diffuse",0,3,"",!0),R("specular",0,3,"",!0),R("emissive",0,3,"",!0),R("thickness",0,1,"",!0),R("specularityFactor",0,1,"",!0),R("normal",0,-1,"",!1),R("metalness",0,1,"",!0),R("gloss",0,1,"",!0),R("opacity",0,1,"a",!0),R("refraction",0,1,"",!0),R("height",0,1,"",!1),R("ao",0,1,"",!0),R("light",1,3,"",!0),R("msdf",0,3,"",!1),R("diffuseDetail",0,3,"",!1,!0),R("normalDetail",0,-1,"",!1),R("clearCoat",0,1,"",!0),R("clearCoatGloss",0,1,"",!0),R("clearCoatNormal",0,-1,"",!1),R("sheen",0,3,"",!0),R("sheenGloss",0,1,"",!0),R("iridescence",0,1,"",!0),R("iridescenceThickness",0,1,"",!0),$("cubeMap"),$("sphereMap"),$("envAtlas");const t=[null,null,null,null,null,null];F("prefilteredCubemaps",(()=>t.slice()),(function(e){const t=this._prefilteredCubemaps;e=e||[];let a=!1,s=!0;for(let i=0;i<6;++i){const r=e[i]||null;t[i]!==r&&(t[i]=r,a=!0),s=s&&!!t[i]}a&&(s?this.envAtlas=n.generatePrefilteredAtlas(t,{target:this.envAtlas}):this.envAtlas&&(this.envAtlas.destroy(),this.envAtlas=null),this._dirtyShader=!0)}),(function(){return this._prefilteredCubemaps}))}();export{T as StandardMaterial};
