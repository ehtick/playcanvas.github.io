import{Component as n}from"../component.js";import{ComponentSystem as t}from"../system.js";import{AnimationComponent as o}from"./component.js";import{AnimationComponentData as i}from"./data.js";const a=["enabled"];class e extends t{constructor(n){super(n),this.id="animation",this.ComponentType=o,this.DataType=i,this.schema=a,this.on("beforeremove",this.onBeforeRemove,this),this.app.systems.on("update",this.onUpdate,this)}initializeComponentData(n,t,o){for(const o in t)t.hasOwnProperty(o)&&(n[o]=t[o]);super.initializeComponentData(n,t,a)}cloneComponent(n,t){this.addComponent(t,{}),t.animation.assets=n.animation.assets.slice(),t.animation.speed=n.animation.speed,t.animation.loop=n.animation.loop,t.animation.activate=n.animation.activate,t.animation.enabled=n.animation.enabled;const o={},i=n.animation.animations;for(const n in i)i.hasOwnProperty(n)&&(o[n]=i[n]);t.animation.animations=o;const a={},e=n.animation.animationsIndex;for(const n in e)e.hasOwnProperty(n)&&(a[n]=e[n]);return t.animation.animationsIndex=a,t.animation}onBeforeRemove(n,t){t.onBeforeRemove()}onUpdate(n){const t=this.store;for(const o in t)if(t.hasOwnProperty(o)){const i=t[o];i.data.enabled&&i.entity.enabled&&i.entity.animation.update(n)}}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}n._buildAccessors(o.prototype,a);export{e as AnimationComponentSystem};
