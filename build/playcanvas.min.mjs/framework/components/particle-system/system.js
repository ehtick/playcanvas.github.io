import{Curve as e}from"../../../math/curve.js";import{CurveSet as t}from"../../../math/curve-set.js";import{Vec3 as a}from"../../../math/vec3.js";import{LIGHTTYPE_DIRECTIONAL as r}from"../../../scene/constants.js";import{Asset as s}from"../../../asset/asset.js";import{Component as i}from"../component.js";import{ComponentSystem as o}from"../system.js";import{ParticleSystemComponent as n}from"./component.js";import{ParticleSystemComponentData as p}from"./data.js";const l=["enabled","autoPlay","numParticles","lifetime","rate","rate2","startAngle","startAngle2","loop","preWarm","lighting","halfLambert","intensity","depthWrite","noFog","depthSoftening","sort","blendType","stretch","alignToMotion","emitterShape","emitterExtents","emitterExtentsInner","emitterRadius","emitterRadiusInner","initialVelocity","wrap","wrapBounds","localSpace","screenSpace","colorMapAsset","normalMapAsset","mesh","meshAsset","renderAsset","orientation","particleNormal","localVelocityGraph","localVelocityGraph2","velocityGraph","velocityGraph2","rotationSpeedGraph","rotationSpeedGraph2","radialSpeedGraph","radialSpeedGraph2","scaleGraph","scaleGraph2","colorGraph","colorGraph2","alphaGraph","alphaGraph2","colorMap","normalMap","animTilesX","animTilesY","animStartFrame","animNumFrames","animNumAnimations","animIndex","randomizeAnimIndex","animSpeed","animLoop","layers"];class c extends o{constructor(e){super(e),this.id="particlesystem",this.ComponentType=n,this.DataType=p,this.schema=l,this.propertyTypes={emitterExtents:"vec3",emitterExtentsInner:"vec3",particleNormal:"vec3",wrapBounds:"vec3",localVelocityGraph:"curveset",localVelocityGraph2:"curveset",velocityGraph:"curveset",velocityGraph2:"curveset",colorGraph:"curveset",colorGraph2:"curveset",alphaGraph:"curve",alphaGraph2:"curve",rotationSpeedGraph:"curve",rotationSpeedGraph2:"curve",radialSpeedGraph:"curve",radialSpeedGraph2:"curve",scaleGraph:"curve",scaleGraph2:"curve"},this.on("beforeremove",this.onBeforeRemove,this),this.app.systems.on("update",this.onUpdate,this)}initializeComponentData(r,i,o){const n={};o=[];const p=this.propertyTypes;(i.mesh instanceof s||"number"==typeof i.mesh)&&(i.meshAsset=i.mesh,delete i.mesh);for(const r in i){if(i.hasOwnProperty(r)&&(o.push(r),n[r]=i[r]),"vec3"===p[r])Array.isArray(n[r])&&(n[r]=new a(n[r][0],n[r][1],n[r][2]));else if("curve"===p[r]){if(!(n[r]instanceof e)){const t=n[r].type;n[r]=new e(n[r].keys),n[r].type=t}}else if("curveset"===p[r]&&!(n[r]instanceof t)){const e=n[r].type;n[r]=new t(n[r].keys),n[r].type=e}n.layers&&Array.isArray(n.layers)&&(n.layers=n.layers.slice(0))}super.initializeComponentData(r,n,o)}cloneComponent(r,s){const i=r.particlesystem.data,o=this.schema,n={};for(let r=0,s=o.length;r<s;r++){const s=o[r];let p=i[s];p instanceof a||p instanceof e||p instanceof t?(p=p.clone(),n[s]=p):"layers"===s?n.layers=i.layers.slice(0):null!=p&&(n[s]=p)}return this.addComponent(s,n)}onUpdate(e){const t=this.store;let a;const s=this.app.stats.particles;for(const i in t)if(t.hasOwnProperty(i)){const o=t[i],n=o.entity,p=o.data;if(p.enabled&&n.enabled){const t=n.particlesystem.emitter;if(!t.meshInstance.visible)continue;if(t.lighting){const e=p.layers;let a;for(let s=0;s<e.length;s++){const i=this.app.scene.layers.getLayerById(e[s]);if(!i)continue;i._lightCube||(i._lightCube=new Float32Array(18)),a=i._lightCube;for(let e=0;e<6;e++)a[3*e]=this.app.scene.ambientLight.r,a[3*e+1]=this.app.scene.ambientLight.g,a[3*e+2]=this.app.scene.ambientLight.b;const o=i._splitLights[r];for(let e=0;e<o.length;e++)for(let r=0;r<6;r++){const s=Math.max(t.lightCubeDir[r].dot(o[e]._direction),0)*o[e]._intensity;a[3*r]+=o[e]._color.r*s,a[3*r+1]+=o[e]._color.g*s,a[3*r+2]+=o[e]._color.b*s}}t.constantLightCube.setValue(a)}if(!p.paused){if(t.simTime+=e,t.simTime>t.fixedTimeStep&&(a=Math.floor(t.simTime/t.fixedTimeStep),t.simTime-=a*t.fixedTimeStep),a){a=Math.min(a,t.maxSubSteps);for(let e=0;e<a;e++)t.addTime(t.fixedTimeStep,!1);s._updatesPerFrame+=a,s._frameTime+=t._addTimeTime,t._addTimeTime=0}t.finishFrame()}}}}onBeforeRemove(e,t){t.onBeforeRemove()}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}i._buildAccessors(n.prototype,l);export{c as ParticleSystemComponentSystem};
