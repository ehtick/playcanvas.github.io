import"../../../core/debug.js";import{LAYERID_WORLD as s}from"../../../scene/constants.js";import{BatchGroup as t}from"../../../scene/batching/batch-group.js";import{GraphNode as e}from"../../../scene/graph-node.js";import{MeshInstance as i}from"../../../scene/mesh-instance.js";import{Model as a}from"../../../scene/model.js";import{getShapePrimitive as h}from"../../../scene/procedural.js";import{Asset as n}from"../../asset/asset.js";import{Component as o}from"../component.js";class l extends o{constructor(t,e){super(t,e),this._type="asset",this._asset=null,this._model=null,this._mapping={},this._castShadows=!0,this._receiveShadows=!0,this._materialAsset=null,this._material=void 0,this._castShadowsLightmap=!0,this._lightmapped=!1,this._lightmapSizeMultiplier=1,this._isStatic=!1,this._layers=[s],this._batchGroupId=-1,this._customAabb=null,this._area=null,this._materialEvents=null,this._clonedModel=!1,this._material=t.defaultMaterial,e.on("remove",this.onRemoveChild,this),e.on("removehierarchy",this.onRemoveChild,this),e.on("insert",this.onInsertChild,this),e.on("inserthierarchy",this.onInsertChild,this)}set meshInstances(s){this._model&&(this._model.meshInstances=s)}get meshInstances(){return this._model?this._model.meshInstances:null}set customAabb(s){if(this._customAabb=s,this._model){const s=this._model.meshInstances;if(s)for(let t=0;t<s.length;t++)s[t].setCustomAabb(this._customAabb)}}get customAabb(){return this._customAabb}set type(s){if(this._type!==s)if(this._area=null,this._type=s,"asset"===s)null!==this._asset?this._bindModelAsset(this._asset):this.model=null;else{const t=h(this.system.app.graphicsDevice,s);this._area=t.area;const n=t.mesh,o=new e,l=new a;l.graph=o,l.meshInstances=[new i(n,this._material,o)],this.model=l,this._asset=null}}get type(){return this._type}set asset(s){const t=this.system.app.assets;let e=s;if(s instanceof n&&(e=s.id),this._asset!==e){if(this._asset){t.off("add:"+this._asset,this._onModelAssetAdded,this);const s=t.get(this._asset);s&&this._unbindModelAsset(s)}if(this._asset=e,this._asset){const s=t.get(this._asset);s?this._bindModelAsset(s):(this.model=null,t.on("add:"+this._asset,this._onModelAssetAdded,this))}else this.model=null}}get asset(){return this._asset}set model(s){if(this._model!==s&&(!s||!s._immutable)&&(this._model&&(this._model._immutable=!1,this.removeModelFromLayers(),this._model.getGraph().destroy(),delete this._model._entity,this._clonedModel&&(this._model.destroy(),this._clonedModel=!1)),this._model=s,this._model)){this._model._immutable=!0;const s=this._model.meshInstances;for(let t=0;t<s.length;t++)s[t].castShadow=this._castShadows,s[t].receiveShadow=this._receiveShadows,s[t].isStatic=this._isStatic,s[t].setCustomAabb(this._customAabb);this.lightmapped=this._lightmapped,this.entity.addChild(this._model.graph),this.enabled&&this.entity.enabled&&this.addModelToLayers(),this._model._entity=this.entity,this.entity.animation&&this.entity.animation.setModel(this._model),this.entity.anim&&this.entity.anim.rebind(),"asset"===this.type?this.mapping=this._mapping:this._unsetMaterialEvents()}}get model(){return this._model}set lightmapped(s){if(s!==this._lightmapped&&(this._lightmapped=s,this._model)){const t=this._model.meshInstances;for(let e=0;e<t.length;e++)t[e].setLightmapped(s)}}get lightmapped(){return this._lightmapped}set castShadows(s){if(this._castShadows===s)return;const t=this._model;if(t){const e=this.layers,i=this.system.app.scene;if(this._castShadows&&!s)for(let s=0;s<e.length;s++){const e=this.system.app.scene.layers.getLayerById(this.layers[s]);e&&e.removeShadowCasters(t.meshInstances)}const a=t.meshInstances;for(let t=0;t<a.length;t++)a[t].castShadow=s;if(!this._castShadows&&s)for(let s=0;s<e.length;s++){const a=i.layers.getLayerById(e[s]);a&&a.addShadowCasters(t.meshInstances)}}this._castShadows=s}get castShadows(){return this._castShadows}set receiveShadows(s){if(this._receiveShadows!==s&&(this._receiveShadows=s,this._model)){const t=this._model.meshInstances;for(let e=0,i=t.length;e<i;e++)t[e].receiveShadow=s}}get receiveShadows(){return this._receiveShadows}set castShadowsLightmap(s){this._castShadowsLightmap=s}get castShadowsLightmap(){return this._castShadowsLightmap}set lightmapSizeMultiplier(s){this._lightmapSizeMultiplier=s}get lightmapSizeMultiplier(){return this._lightmapSizeMultiplier}set isStatic(s){if(this._isStatic!==s&&(this._isStatic=s,this._model)){const t=this._model.meshInstances;for(let e=0;e<t.length;e++){t[e].isStatic=s}}}get isStatic(){return this._isStatic}set layers(s){const t=this.system.app.scene.layers;if(this.meshInstances)for(let s=0;s<this._layers.length;s++){const e=t.getLayerById(this._layers[s]);e&&e.removeMeshInstances(this.meshInstances)}this._layers.length=0;for(let t=0;t<s.length;t++)this._layers[t]=s[t];if(this.enabled&&this.entity.enabled&&this.meshInstances)for(let s=0;s<this._layers.length;s++){const e=t.getLayerById(this._layers[s]);e&&e.addMeshInstances(this.meshInstances)}}get layers(){return this._layers}set batchGroupId(s){if(this._batchGroupId!==s){var e,i;if(this.entity.enabled&&this._batchGroupId>=0)null==(e=this.system.app.batcher)||e.remove(t.MODEL,this.batchGroupId,this.entity);if(this.entity.enabled&&s>=0)null==(i=this.system.app.batcher)||i.insert(t.MODEL,s,this.entity);s<0&&this._batchGroupId>=0&&this.enabled&&this.entity.enabled&&this.addModelToLayers(),this._batchGroupId=s}}get batchGroupId(){return this._batchGroupId}set materialAsset(s){let t=s;s instanceof n&&(t=s.id);const e=this.system.app.assets;if(t!==this._materialAsset){if(this._materialAsset){e.off("add:"+this._materialAsset,this._onMaterialAssetAdd,this);const s=e.get(this._materialAsset);s&&this._unbindMaterialAsset(s)}if(this._materialAsset=t,this._materialAsset){const s=e.get(this._materialAsset);s?this._bindMaterialAsset(s):(this._setMaterial(this.system.defaultMaterial),e.on("add:"+this._materialAsset,this._onMaterialAssetAdd,this))}else this._setMaterial(this.system.defaultMaterial)}}get materialAsset(){return this._materialAsset}set material(s){this._material!==s&&(this.materialAsset=null,this._setMaterial(s))}get material(){return this._material}set mapping(s){if("asset"!==this._type)return;if(this._unsetMaterialEvents(),s||(s={}),this._mapping=s,!this._model)return;const t=this._model.meshInstances,e=this.asset?this.system.app.assets.get(this.asset):null,i=e?e.data.mapping:null;let a=null;for(let e=0,h=t.length;e<h;e++)if(void 0!==s[e])s[e]?(a=this.system.app.assets.get(s[e]),this._loadAndSetMeshInstanceMaterial(a,t[e],e)):t[e].material=this.system.defaultMaterial;else if(i)if(i[e]&&(i[e].material||i[e].path)){if(void 0!==i[e].material)a=this.system.app.assets.get(i[e].material);else if(void 0!==i[e].path){const s=this._getMaterialAssetUrl(i[e].path);s&&(a=this.system.app.assets.getByUrl(s))}this._loadAndSetMeshInstanceMaterial(a,t[e],e)}else t[e].material=this.system.defaultMaterial}get mapping(){return this._mapping}addModelToLayers(){const s=this.system.app.scene.layers;for(let t=0;t<this._layers.length;t++){const e=s.getLayerById(this._layers[t]);e&&e.addMeshInstances(this.meshInstances)}}removeModelFromLayers(){const s=this.system.app.scene.layers;for(let t=0;t<this._layers.length;t++){const e=s.getLayerById(this._layers[t]);e&&e.removeMeshInstances(this.meshInstances)}}onRemoveChild(){this._model&&this.removeModelFromLayers()}onInsertChild(){this._model&&this.enabled&&this.entity.enabled&&this.addModelToLayers()}onRemove(){this.asset=null,this.model=null,this.materialAsset=null,this._unsetMaterialEvents(),this.entity.off("remove",this.onRemoveChild,this),this.entity.off("insert",this.onInsertChild,this)}onLayersChanged(s,t){this.addModelToLayers(),s.off("add",this.onLayerAdded,this),s.off("remove",this.onLayerRemoved,this),t.on("add",this.onLayerAdded,this),t.on("remove",this.onLayerRemoved,this)}onLayerAdded(s){this.layers.indexOf(s.id)<0||s.addMeshInstances(this.meshInstances)}onLayerRemoved(s){this.layers.indexOf(s.id)<0||s.removeMeshInstances(this.meshInstances)}_setMaterialEvent(s,t,e,i){const a=t+":"+e;this.system.app.assets.on(a,i,this),this._materialEvents||(this._materialEvents=[]),this._materialEvents[s]||(this._materialEvents[s]={}),this._materialEvents[s][a]={id:e,handler:i}}_unsetMaterialEvents(){const s=this.system.app.assets,t=this._materialEvents;if(t){for(let e=0,i=t.length;e<i;e++){if(!t[e])continue;const i=t[e];for(const t in i)s.off(t,i[t].handler,this)}this._materialEvents=null}}_getAssetByIdOrPath(s){let t=null;if(isNaN(parseInt(s,10))){if(this.asset){const e=this._getMaterialAssetUrl(s);e&&(t=this.system.app.assets.getByUrl(e))}}else t=this.system.app.assets.get(s);return t}_getMaterialAssetUrl(s){if(!this.asset)return null;const t=this.system.app.assets.get(this.asset);return t?t.getAbsoluteUrl(s):null}_loadAndSetMeshInstanceMaterial(s,t,e){const i=this.system.app.assets;s&&(s.resource?(t.material=s.resource,this._setMaterialEvent(e,"remove",s.id,(function(){t.material=this.system.defaultMaterial}))):(this._setMaterialEvent(e,"load",s.id,(function(i){t.material=i.resource,this._setMaterialEvent(e,"remove",s.id,(function(){t.material=this.system.defaultMaterial}))})),this.enabled&&this.entity.enabled&&i.load(s)))}onEnable(){const s=this.system.app,e=s.scene;e.on("set:layers",this.onLayersChanged,this),e.layers&&(e.layers.on("add",this.onLayerAdded,this),e.layers.on("remove",this.onLayerRemoved,this));const i="asset"===this._type;let a;if(this._model?this.addModelToLayers():i&&this._asset&&(a=s.assets.get(this._asset),a&&a.resource!==this._model&&this._bindModelAsset(a)),this._materialAsset&&(a=s.assets.get(this._materialAsset),a&&a.resource!==this._material&&this._bindMaterialAsset(a)),i&&this._mapping)for(const t in this._mapping)this._mapping[t]&&(a=this._getAssetByIdOrPath(this._mapping[t]),a&&!a.resource&&s.assets.load(a));var h;this._batchGroupId>=0&&(null==(h=s.batcher)||h.insert(t.MODEL,this.batchGroupId,this.entity))}onDisable(){const s=this.system.app,e=s.scene;var i;(e.off("set:layers",this.onLayersChanged,this),e.layers&&(e.layers.off("add",this.onLayerAdded,this),e.layers.off("remove",this.onLayerRemoved,this)),this._batchGroupId>=0)&&(null==(i=s.batcher)||i.remove(t.MODEL,this.batchGroupId,this.entity));this._model&&this.removeModelFromLayers()}hide(){if(this._model){const s=this._model.meshInstances;for(let t=0,e=s.length;t<e;t++)s[t].visible=!1}}show(){if(this._model){const s=this._model.meshInstances;for(let t=0,e=s.length;t<e;t++)s[t].visible=!0}}_bindMaterialAsset(s){if(s.on("load",this._onMaterialAssetLoad,this),s.on("unload",this._onMaterialAssetUnload,this),s.on("remove",this._onMaterialAssetRemove,this),s.on("change",this._onMaterialAssetChange,this),s.resource)this._onMaterialAssetLoad(s);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(s)}}_unbindMaterialAsset(s){s.off("load",this._onMaterialAssetLoad,this),s.off("unload",this._onMaterialAssetUnload,this),s.off("remove",this._onMaterialAssetRemove,this),s.off("change",this._onMaterialAssetChange,this)}_onMaterialAssetAdd(s){this.system.app.assets.off("add:"+s.id,this._onMaterialAssetAdd,this),this._materialAsset===s.id&&this._bindMaterialAsset(s)}_onMaterialAssetLoad(s){this._setMaterial(s.resource)}_onMaterialAssetUnload(s){this._setMaterial(this.system.defaultMaterial)}_onMaterialAssetRemove(s){this._onMaterialAssetUnload(s)}_onMaterialAssetChange(s){}_bindModelAsset(s){if(this._unbindModelAsset(s),s.on("load",this._onModelAssetLoad,this),s.on("unload",this._onModelAssetUnload,this),s.on("change",this._onModelAssetChange,this),s.on("remove",this._onModelAssetRemove,this),s.resource)this._onModelAssetLoad(s);else{if(!this.enabled||!this.entity.enabled)return;this.system.app.assets.load(s)}}_unbindModelAsset(s){s.off("load",this._onModelAssetLoad,this),s.off("unload",this._onModelAssetUnload,this),s.off("change",this._onModelAssetChange,this),s.off("remove",this._onModelAssetRemove,this)}_onModelAssetAdded(s){this.system.app.assets.off("add:"+s.id,this._onModelAssetAdded,this),s.id===this._asset&&this._bindModelAsset(s)}_onModelAssetLoad(s){this.model=s.resource.clone(),this._clonedModel=!0}_onModelAssetUnload(s){this.model=null}_onModelAssetChange(s,t,e,i){"data"===t&&(this.mapping=this._mapping)}_onModelAssetRemove(s){this.model=null}_setMaterial(s){if(this._material===s)return;this._material=s;const t=this._model;if(t&&"asset"!==this._type){const e=t.meshInstances;for(let t=0,i=e.length;t<i;t++)e[t].material=s}}}export{l as ModelComponent};
