import"../../core/debug.js";class e{constructor(e){this._handlers={},this._requests={},this._cache={},this._app=e}addHandler(e,s){this._handlers[e]=s,s._loader=this}removeHandler(e){delete this._handlers[e]}getHandler(e){return this._handlers[e]}static makeKey(e,s){return`${e}-${s}`}load(s,t,r,l){const n=this._handlers[t];if(!n){return void r(`No resource handler for asset type: '${t}' when loading [${s}]`)}if(!s)return void this._loadNull(n,r,l);const i=e.makeKey(s,t);if(void 0!==this._cache[i])r(null,this._cache[i]);else if(this._requests[i])this._requests[i].push(r);else{this._requests[i]=[r];const e=this,t=function(s,t){s?e._onFailure(i,s):n.load(t,(function(s,r,a){if(e._requests[i])if(s)e._onFailure(i,s);else try{e._onSuccess(i,n.open(t.original,r,l),a)}catch(s){e._onFailure(i,s)}}),l)},a=s.split("?")[0];if(this._app.enableBundles&&this._app.bundles.hasUrl(a)){if(!this._app.bundles.canLoadUrl(a))return void t(`Bundle for ${s} not loaded yet`);this._app.bundles.loadUrl(a,(function(e,s){t(e,{load:s,original:a})}))}else t(null,{load:s,original:l&&l.file.filename||s})}}_loadNull(e,s,t){e.load(null,(function(r,l,n){if(r)s(r);else try{s(null,e.open(null,l,t),n)}catch(e){s(e)}}),t)}_onSuccess(e,s,t){null!==s?this._cache[e]=s:delete this._cache[e];for(let r=0;r<this._requests[e].length;r++)this._requests[e][r](null,s,t);delete this._requests[e]}_onFailure(e,s){if(console.error(s),this._requests[e]){for(let t=0;t<this._requests[e].length;t++)this._requests[e][t](s);delete this._requests[e]}}open(e,s){const t=this._handlers[e];return t?t.open(null,s):(console.warn("No resource handler found for: "+e),s)}patch(e,s){const t=this._handlers[e.type];t?t.patch&&t.patch(e,s):console.warn("No resource handler found for: "+e.type)}clearCache(s,t){const r=e.makeKey(s,t);delete this._cache[r]}getFromCache(s,t){const r=e.makeKey(s,t);if(this._cache[r])return this._cache[r]}enableRetry(e=5){e=Math.max(0,e)||0;for(const s in this._handlers)this._handlers[s].maxRetries=e}disableRetry(){for(const e in this._handlers)this._handlers[e].maxRetries=0}destroy(){this._handlers={},this._requests={},this._cache={}}}export{e as ResourceLoader};
