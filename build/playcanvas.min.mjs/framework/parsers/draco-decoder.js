import{WasmModule as s}from"../../core/wasm-module.js";import{ABSOLUTE_URL as e}from"../asset/constants.js";import{DracoWorker as t}from"./draco-worker.js";import"../../core/tracing.js";import{http as r}from"../../platform/net/http.js";class o{constructor(){this.workers=[[],[],[]],this.jobId=0,this.jobQueue=[],this.jobCallbacks=new Map,this.run=(s,e)=>{s.postMessage({type:"decodeMesh",jobId:e.jobId,buffer:e.buffer},[e.buffer])}}init(s){for(s.forEach((s=>{s.addEventListener("message",(e=>{const t=e.data,r=this.jobCallbacks.get(t.jobId);if(r&&r(t.error,{indices:t.indices,vertices:t.vertices}),this.jobCallbacks.delete(t.jobId),this.jobQueue.length>0){const e=this.jobQueue.shift();this.run(s,e)}else{const e=this.workers[2].indexOf(s);if(-1!==e)this.workers[2].splice(e,1),this.workers[1].push(s);else{const e=this.workers[1].indexOf(s);-1!==e&&(this.workers[1].splice(e,1),this.workers[0].push(s))}}}))})),this.workers[0]=s;this.jobQueue.length&&(this.workers[0].length||this.workers[1].length);){const s=this.jobQueue.shift();if(this.workers[0].length>0){const e=this.workers[0].shift();this.workers[1].push(e),this.run(e,s)}else{const e=this.workers[1].shift();this.workers[2].push(e),this.run(e,s)}}}enqueueJob(s,e){const t={jobId:this.jobId++,buffer:s};if(this.jobCallbacks.set(t.jobId,e),this.workers[0].length>0){const s=this.workers[0].shift();this.workers[1].push(s),this.run(s,t)}else if(this.workers[1].length>0){const s=this.workers[1].shift();this.workers[2].push(s),this.run(s,t)}else this.jobQueue.push(t)}}const i=s=>{const e=()=>fetch(s).then((s=>s.arrayBuffer())).then((s=>WebAssembly.compile(s)));return WebAssembly.compileStreaming?WebAssembly.compileStreaming(fetch(s)).catch((s=>e())):e()};let n,h;const c=c=>{if(n)return!0;if(!c)if(h)c=h;else{const e=s.getConfig("DracoDecoderModule");c=e?{jsUrl:e.glueUrl,wasmUrl:e.wasmUrl,numWorkers:e.numWorkers}:{jsUrl:"/draco.wasm.js",wasmUrl:"/draco.wasm.wasm",numWorkers:1}}if(!c.jsUrl||!c.wasmUrl)return!1;n=new o;const a=s=>e.test(s)?s:new URL(window.location.href).origin+s,l=a(c.jsUrl),u=a(c.wasmUrl);var w;return Promise.all([(w=l,new Promise(((s,e)=>{const t={cache:!0,responseType:"text",retry:!0,maxRetries:3};r.get(w,t,((t,r)=>{t?e(t):s(r)}))}))),i(u)]).then((([s,e])=>{const r=["/* draco */",s,"/* worker */",`(\n${t.toString()}\n)()\n\n`].join("\n"),o=new Blob([r],{type:"application/javascript"}),i=URL.createObjectURL(o),h=Math.max(1,Math.min(16,c.numWorkers||1)),a=[];for(let s=0;s<h;++s){const s=new Worker(i);s.postMessage({type:"init",module:e}),a.push(s)}n.init(a)})),!0},a=s=>{s.lazyInit?h=s:c(s)},l=(s,e)=>!!c()&&(n.enqueueJob(s,e),!0);export{l as dracoDecode,a as dracoInitialize};
