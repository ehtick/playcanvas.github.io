import{extends as e}from"../../../_virtual/_rollupPluginBabelHelpers.js";import{Color as t}from"../../../math/color.js";import{Vec2 as a}from"../../../math/vec2.js";import{Vec3 as r}from"../../../math/vec3.js";import{Texture as o}from"../../../graphics/texture.js";import{BoundingBox as s}from"../../../shape/bounding-box.js";import{SPECULAR_BLINN as i,SPECULAR_PHONG as n}from"../../../scene/constants.js";import{StandardMaterial as l}from"../../../scene/materials/standard-material.js";import{StandardMaterialValidator as p}from"../../../scene/materials/standard-material-validator.js";import{standardMaterialParameterTypes as m}from"../../../scene/materials/standard-material-parameters.js";class d{constructor(){this._validator=null}parse(e){const t=this.migrate(e),a=this._validate(t),r=new l;return this.initialize(r,a),r}initialize(i,n){n.validated||(n=this._validate(n)),n.chunks&&(i.chunks=e({},n.chunks));for(const e in n){const l=m[e],p=n[e];if("vec2"===l)i[e]=new a(p[0],p[1]);else if("rgb"===l)i[e]=new t(p[0],p[1],p[2]);else if("texture"===l)p instanceof o?i[e]=p:i[e]instanceof o&&"number"==typeof p&&p>0||(i[e]=null);else if("cubemap"===l)p instanceof o?i[e]=p:i[e]instanceof o&&"number"==typeof p&&p>0||(i[e]=null),"cubeMap"!==e||p||(i.prefilteredCubemaps=null);else if("boundingbox"===l){const t=new r(p.center[0],p.center[1],p.center[2]),a=new r(p.halfExtents[0],p.halfExtents[1],p.halfExtents[2]);i[e]=new s(t,a)}else i[e]=n[e]}i.update()}migrate(e){let t;void 0===e.shadingModel&&("blinn"===e.shader?e.shadingModel=i:e.shadingModel=n),e.shader&&delete e.shader,e.mapping_format&&(e.mappingFormat=e.mapping_format,delete e.mapping_format);const a=[["bumpMapFactor","bumpiness"],["aoUvSet","aoMapUv"],["aoMapVertexColor","aoVertexColor"],["diffuseMapVertexColor","diffuseVertexColor"],["emissiveMapVertexColor","emissiveVertexColor"],["specularMapVertexColor","specularVertexColor"],["metalnessMapVertexColor","metalnessVertexColor"],["opacityMapVertexColor","opacityVertexColor"],["glossMapVertexColor","glossVertexColor"],["lightMapVertexColor","lightVertexColor"],["diffuseMapTint","diffuseTint"],["specularMapTint","specularTint"],["emissiveMapTint","emissiveTint"],["metalnessMapTint","metalnessTint"]];for(t=0;t<a.length;t++){const r=a[t][0],o=a[t][1];void 0!==e[r]&&void 0===e[o]&&(e[o]=e[r],delete e[r])}const r=["fresnelFactor","shadowSampleType"];for(t=0;t<r.length;t++){const a=r[t];e.hasOwnProperty(a)&&delete e[a]}return e}_validate(e){return e.validated||(this._validator||(this._validator=new p),this._validator.validate(e)),e}}export{d as JsonStandardMaterialParser};
